/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2020 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autonomic/ext/edge/edge.proto

package edge

import (
	context "context"
	fmt "fmt"
	event "xk6-fabric/proto/autonomic/ext/event"
	telemetry "xk6-fabric/proto/autonomic/ext/telemetry"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PublishResponse_PublishErrorStatus int32

const (
	PublishResponse_UNDEFINED_ERROR_STATUS PublishResponse_PublishErrorStatus = 0
	PublishResponse_TRANSIENT_FAILURE      PublishResponse_PublishErrorStatus = 1
	PublishResponse_PERMANENT_FAILURE      PublishResponse_PublishErrorStatus = 2
	PublishResponse_TELEMETRY_REJECTED     PublishResponse_PublishErrorStatus = 3
)

var PublishResponse_PublishErrorStatus_name = map[int32]string{
	0: "UNDEFINED_ERROR_STATUS",
	1: "TRANSIENT_FAILURE",
	2: "PERMANENT_FAILURE",
	3: "TELEMETRY_REJECTED",
}

var PublishResponse_PublishErrorStatus_value = map[string]int32{
	"UNDEFINED_ERROR_STATUS": 0,
	"TRANSIENT_FAILURE":      1,
	"PERMANENT_FAILURE":      2,
	"TELEMETRY_REJECTED":     3,
}

func (x PublishResponse_PublishErrorStatus) String() string {
	return proto.EnumName(PublishResponse_PublishErrorStatus_name, int32(x))
}

func (PublishResponse_PublishErrorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6c49515003145342, []int{3, 0}
}

// Request object for Edge.Keepalive.
type KeepaliveRequest struct {
	// A client-generated sequence number used to correlate with the
	// server responses. The individual values are not considered
	// meaningful, but the sequence **must** be monotonically
	// increasing while a device is running. The sequence number
	// **may** be reset to zero on reboot.
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The current time according to the client.
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *KeepaliveRequest) Reset()         { *m = KeepaliveRequest{} }
func (m *KeepaliveRequest) String() string { return proto.CompactTextString(m) }
func (*KeepaliveRequest) ProtoMessage()    {}
func (*KeepaliveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c49515003145342, []int{0}
}

func (m *KeepaliveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeepaliveRequest.Unmarshal(m, b)
}
func (m *KeepaliveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeepaliveRequest.Marshal(b, m, deterministic)
}
func (m *KeepaliveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepaliveRequest.Merge(m, src)
}
func (m *KeepaliveRequest) XXX_Size() int {
	return xxx_messageInfo_KeepaliveRequest.Size(m)
}
func (m *KeepaliveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepaliveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeepaliveRequest proto.InternalMessageInfo

func (m *KeepaliveRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *KeepaliveRequest) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// Response object for Edge.Keepalive.
type KeepaliveResponse struct {
	// The sequence number from the `KeepaliveRequest` to which the
	// server is responding.
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The current time according to the server.
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *KeepaliveResponse) Reset()         { *m = KeepaliveResponse{} }
func (m *KeepaliveResponse) String() string { return proto.CompactTextString(m) }
func (*KeepaliveResponse) ProtoMessage()    {}
func (*KeepaliveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c49515003145342, []int{1}
}

func (m *KeepaliveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeepaliveResponse.Unmarshal(m, b)
}
func (m *KeepaliveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeepaliveResponse.Marshal(b, m, deterministic)
}
func (m *KeepaliveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepaliveResponse.Merge(m, src)
}
func (m *KeepaliveResponse) XXX_Size() int {
	return xxx_messageInfo_KeepaliveResponse.Size(m)
}
func (m *KeepaliveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepaliveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeepaliveResponse proto.InternalMessageInfo

func (m *KeepaliveResponse) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *KeepaliveResponse) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type PublishRequest struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Events               []*event.Event       `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	Reports              []*telemetry.Report  `protobuf:"bytes,3,rep,name=reports,proto3" json:"reports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c49515003145342, []int{2}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *PublishRequest) GetEvents() []*event.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *PublishRequest) GetReports() []*telemetry.Report {
	if m != nil {
		return m.Reports
	}
	return nil
}

// The response to a call to publish() based on the provisioning status
// of the device, or the contents of what the device has attempted
// to publish
type PublishResponse struct {
	ErrorStatus          PublishResponse_PublishErrorStatus `protobuf:"varint,1,opt,name=error_status,json=errorStatus,proto3,enum=autonomic.ext.edge.PublishResponse_PublishErrorStatus" json:"error_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c49515003145342, []int{3}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetErrorStatus() PublishResponse_PublishErrorStatus {
	if m != nil {
		return m.ErrorStatus
	}
	return PublishResponse_UNDEFINED_ERROR_STATUS
}

type PublishWithAckRequest struct {
	// Client-provided unique-identifier for this message. Cloud shall
	// return the client-provided id in the response, upon the successful
	// ingest of this message. The cloud does not enforce uniqueness
	// constraints on this field. The only constraint on this field is
	// that it shall not exceed 16 bytes. Any id that exceeds 16 bytes
	// shall be truncated to 16 bytes by the cloud in the response.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// PublishRequest containing events and/or telemetry reports
	//
	// Types that are valid to be assigned to PublishRequest:
	//	*PublishWithAckRequest_UnencryptedRequest
	//	*PublishWithAckRequest_EncryptedRequest
	PublishRequest       isPublishWithAckRequest_PublishRequest `protobuf_oneof:"publish_request"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *PublishWithAckRequest) Reset()         { *m = PublishWithAckRequest{} }
func (m *PublishWithAckRequest) String() string { return proto.CompactTextString(m) }
func (*PublishWithAckRequest) ProtoMessage()    {}
func (*PublishWithAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c49515003145342, []int{4}
}

func (m *PublishWithAckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishWithAckRequest.Unmarshal(m, b)
}
func (m *PublishWithAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishWithAckRequest.Marshal(b, m, deterministic)
}
func (m *PublishWithAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishWithAckRequest.Merge(m, src)
}
func (m *PublishWithAckRequest) XXX_Size() int {
	return xxx_messageInfo_PublishWithAckRequest.Size(m)
}
func (m *PublishWithAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishWithAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishWithAckRequest proto.InternalMessageInfo

func (m *PublishWithAckRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type isPublishWithAckRequest_PublishRequest interface {
	isPublishWithAckRequest_PublishRequest()
}

type PublishWithAckRequest_UnencryptedRequest struct {
	UnencryptedRequest *PublishRequest `protobuf:"bytes,2,opt,name=unencrypted_request,json=unencryptedRequest,proto3,oneof"`
}

type PublishWithAckRequest_EncryptedRequest struct {
	EncryptedRequest []byte `protobuf:"bytes,3,opt,name=encrypted_request,json=encryptedRequest,proto3,oneof"`
}

func (*PublishWithAckRequest_UnencryptedRequest) isPublishWithAckRequest_PublishRequest() {}

func (*PublishWithAckRequest_EncryptedRequest) isPublishWithAckRequest_PublishRequest() {}

func (m *PublishWithAckRequest) GetPublishRequest() isPublishWithAckRequest_PublishRequest {
	if m != nil {
		return m.PublishRequest
	}
	return nil
}

func (m *PublishWithAckRequest) GetUnencryptedRequest() *PublishRequest {
	if x, ok := m.GetPublishRequest().(*PublishWithAckRequest_UnencryptedRequest); ok {
		return x.UnencryptedRequest
	}
	return nil
}

func (m *PublishWithAckRequest) GetEncryptedRequest() []byte {
	if x, ok := m.GetPublishRequest().(*PublishWithAckRequest_EncryptedRequest); ok {
		return x.EncryptedRequest
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PublishWithAckRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PublishWithAckRequest_UnencryptedRequest)(nil),
		(*PublishWithAckRequest_EncryptedRequest)(nil),
	}
}

type PublishWithAckResponse struct {
	// The Id of the message for which the server is acknowledging receipt
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// PublishResponse generated in response to to the PublishRequest
	// sent with the Id above
	PublishResponse      *PublishResponse `protobuf:"bytes,2,opt,name=publish_response,json=publishResponse,proto3" json:"publish_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PublishWithAckResponse) Reset()         { *m = PublishWithAckResponse{} }
func (m *PublishWithAckResponse) String() string { return proto.CompactTextString(m) }
func (*PublishWithAckResponse) ProtoMessage()    {}
func (*PublishWithAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c49515003145342, []int{5}
}

func (m *PublishWithAckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishWithAckResponse.Unmarshal(m, b)
}
func (m *PublishWithAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishWithAckResponse.Marshal(b, m, deterministic)
}
func (m *PublishWithAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishWithAckResponse.Merge(m, src)
}
func (m *PublishWithAckResponse) XXX_Size() int {
	return xxx_messageInfo_PublishWithAckResponse.Size(m)
}
func (m *PublishWithAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishWithAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishWithAckResponse proto.InternalMessageInfo

func (m *PublishWithAckResponse) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PublishWithAckResponse) GetPublishResponse() *PublishResponse {
	if m != nil {
		return m.PublishResponse
	}
	return nil
}

func init() {
	proto.RegisterEnum("autonomic.ext.edge.PublishResponse_PublishErrorStatus", PublishResponse_PublishErrorStatus_name, PublishResponse_PublishErrorStatus_value)
	proto.RegisterType((*KeepaliveRequest)(nil), "autonomic.ext.edge.KeepaliveRequest")
	proto.RegisterType((*KeepaliveResponse)(nil), "autonomic.ext.edge.KeepaliveResponse")
	proto.RegisterType((*PublishRequest)(nil), "autonomic.ext.edge.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "autonomic.ext.edge.PublishResponse")
	proto.RegisterType((*PublishWithAckRequest)(nil), "autonomic.ext.edge.PublishWithAckRequest")
	proto.RegisterType((*PublishWithAckResponse)(nil), "autonomic.ext.edge.PublishWithAckResponse")
}

func init() { proto.RegisterFile("autonomic/ext/edge/edge.proto", fileDescriptor_6c49515003145342) }

var fileDescriptor_6c49515003145342 = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0x33, 0x4e, 0xd5, 0x7e, 0x3d, 0xad, 0xda, 0x64, 0x3e, 0x35, 0x8a, 0x2c, 0xa1, 0x56,
	0xa6, 0x48, 0x05, 0xa9, 0x36, 0x0a, 0x12, 0x82, 0x65, 0x4a, 0xa7, 0x6a, 0xa0, 0x0d, 0xd1, 0xc4,
	0x01, 0xb5, 0x9b, 0xc8, 0x71, 0x0e, 0x89, 0x45, 0x7c, 0xc1, 0x1e, 0x57, 0xed, 0xeb, 0xb0, 0xe3,
	0x11, 0xd8, 0xf1, 0x30, 0x3c, 0x04, 0x4b, 0xe4, 0xf1, 0x25, 0xad, 0x53, 0x95, 0xb0, 0x60, 0x33,
	0xf2, 0x8c, 0x7f, 0xff, 0x73, 0x9d, 0x39, 0xf0, 0xc8, 0x8a, 0x85, 0xef, 0xf9, 0xae, 0x63, 0x1b,
	0x78, 0x2d, 0x0c, 0x1c, 0x4f, 0x50, 0x2e, 0x7a, 0x10, 0xfa, 0xc2, 0xa7, 0xb4, 0xf8, 0xad, 0xe3,
	0xb5, 0xd0, 0x93, 0x3f, 0xea, 0xee, 0xc4, 0xf7, 0x27, 0x33, 0x34, 0x24, 0x31, 0x8a, 0x3f, 0x19,
	0xc2, 0x71, 0x31, 0x12, 0x96, 0x1b, 0xa4, 0x22, 0x75, 0xb7, 0x64, 0xf3, 0x0a, 0xbd, 0x6c, 0xcd,
	0x80, 0xfd, 0xbb, 0x80, 0xc0, 0x19, 0xba, 0x28, 0xc2, 0x1b, 0x23, 0xc4, 0xc0, 0x0f, 0x33, 0x4a,
	0x9b, 0x42, 0xed, 0x1d, 0x62, 0x60, 0xcd, 0x9c, 0x2b, 0xe4, 0xf8, 0x25, 0xc6, 0x48, 0x50, 0x15,
	0xfe, 0x8b, 0x92, 0x4f, 0xcf, 0xc6, 0x26, 0xd9, 0x23, 0x07, 0x2b, 0xbc, 0xd8, 0xd3, 0x57, 0xb0,
	0x5e, 0x44, 0xd2, 0x54, 0xf6, 0xc8, 0xc1, 0x46, 0x4b, 0xd5, 0xd3, 0x58, 0xf5, 0x3c, 0x56, 0xdd,
	0xcc, 0x09, 0x3e, 0x87, 0x35, 0x07, 0xea, 0xb7, 0x3c, 0x45, 0x81, 0xef, 0x45, 0xf8, 0x8f, 0x5c,
	0x7d, 0x27, 0xb0, 0xd5, 0x8b, 0x47, 0x33, 0x27, 0x9a, 0xe6, 0x39, 0xdd, 0x31, 0x46, 0xfe, 0xc2,
	0x18, 0x6d, 0xc1, 0xaa, 0x2c, 0x6b, 0xd4, 0x54, 0xf6, 0xaa, 0x52, 0x56, 0x6a, 0x97, 0xac, 0x39,
	0x4b, 0x56, 0x9e, 0x91, 0xf4, 0x35, 0xac, 0xa5, 0x55, 0x8e, 0x9a, 0x55, 0x29, 0xda, 0x2d, 0x89,
	0x8a, 0x6e, 0xe8, 0x5c, 0x72, 0x3c, 0xe7, 0xb5, 0x9f, 0x04, 0xb6, 0x8b, 0xd8, 0xb3, 0x2a, 0x5d,
	0xc0, 0x26, 0x86, 0xa1, 0x1f, 0x0e, 0x23, 0x61, 0x89, 0x38, 0x92, 0xf1, 0x6f, 0xb5, 0x5e, 0xea,
	0x8b, 0xf7, 0x46, 0x2f, 0x49, 0xf3, 0x3d, 0x4b, 0xe4, 0x7d, 0xa9, 0xe6, 0x1b, 0x38, 0xdf, 0x68,
	0x57, 0x40, 0x17, 0x11, 0xaa, 0x42, 0x63, 0xd0, 0x3d, 0x66, 0x27, 0x9d, 0x2e, 0x3b, 0x1e, 0x32,
	0xce, 0xdf, 0xf3, 0x61, 0xdf, 0x6c, 0x9b, 0x83, 0x7e, 0xad, 0x42, 0x77, 0xa0, 0x6e, 0xf2, 0x76,
	0xb7, 0xdf, 0x61, 0x5d, 0x73, 0x78, 0xd2, 0xee, 0x9c, 0x0d, 0x38, 0xab, 0x91, 0xe4, 0xb8, 0xc7,
	0xf8, 0x79, 0xbb, 0x7b, 0xfb, 0x58, 0xa1, 0x0d, 0xa0, 0x26, 0x3b, 0x63, 0xe7, 0xcc, 0xe4, 0x17,
	0x43, 0xce, 0xde, 0xb2, 0x37, 0x26, 0x3b, 0xae, 0x55, 0xb5, 0x1f, 0x04, 0x76, 0x32, 0xc7, 0x1f,
	0x1d, 0x31, 0x6d, 0xdb, 0x9f, 0xf3, 0x4e, 0x6d, 0x81, 0xe2, 0x8c, 0x65, 0x8a, 0x9b, 0x5c, 0x71,
	0xc6, 0x74, 0x00, 0xff, 0xc7, 0x1e, 0x7a, 0x76, 0x78, 0x13, 0x08, 0x1c, 0x0f, 0xc3, 0x14, 0xcb,
	0x2e, 0x84, 0xf6, 0x60, 0x0d, 0x24, 0x79, 0x5a, 0xe1, 0xf4, 0x96, 0x81, 0xdc, 0xcd, 0x21, 0xd4,
	0x17, 0x8d, 0x56, 0x13, 0xaf, 0xa7, 0x15, 0x5e, 0x2b, 0xe3, 0x47, 0x75, 0xd8, 0x0e, 0x52, 0xb3,
	0x39, 0xac, 0x5d, 0x43, 0xa3, 0x9c, 0x41, 0xd6, 0xaf, 0x72, 0x0a, 0x5d, 0xa8, 0xcd, 0xc5, 0x29,
	0x93, 0xc5, 0xff, 0x78, 0x89, 0x1e, 0xf2, 0xdc, 0x73, 0x7e, 0xd0, 0xfa, 0xa6, 0xc0, 0x0a, 0x1b,
	0x4f, 0x90, 0x5e, 0xc2, 0x7a, 0xf1, 0xa6, 0xe8, 0xfe, 0x7d, 0xb6, 0xca, 0x8f, 0x5b, 0x7d, 0xf2,
	0x07, 0x2a, 0x75, 0xa1, 0x55, 0xe8, 0x07, 0x58, 0xcb, 0x02, 0xa1, 0x4b, 0x54, 0x59, 0x5d, 0x26,
	0x13, 0xad, 0x72, 0x40, 0xa8, 0x5b, 0xbc, 0xcd, 0xac, 0x6c, 0xf4, 0xe9, 0x03, 0xd2, 0xbb, 0x97,
	0x43, 0x7d, 0xb6, 0x0c, 0x3a, 0x77, 0xf6, 0x9c, 0x1c, 0xdd, 0x40, 0xc3, 0xf6, 0xdd, 0x7b, 0x64,
	0x47, 0xeb, 0x49, 0x09, 0x7b, 0xc9, 0xdb, 0xef, 0x91, 0xcb, 0xce, 0xc4, 0x11, 0xd3, 0x78, 0xa4,
	0xdb, 0xbe, 0x6b, 0x14, 0xec, 0xa1, 0xe5, 0x24, 0xb3, 0x13, 0x43, 0xcf, 0x9a, 0x1d, 0xca, 0x29,
	0x11, 0x19, 0x51, 0x68, 0x1b, 0xae, 0xe5, 0x78, 0xe9, 0x64, 0x36, 0x16, 0x27, 0xfb, 0x2f, 0x42,
	0xbe, 0x2a, 0xd5, 0xf6, 0xc0, 0x1c, 0xad, 0x4a, 0xe4, 0xc5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xeb, 0x52, 0x54, 0xfc, 0xff, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EdgeClient is the client API for Edge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EdgeClient interface {
	// `Keepalive()` is used to maintain the connection from the client
	// to the server. Clients send their current notion of time, and
	// servers respond with their current notion of time, allowing clients
	// to quickly get a good approximation of the current time before more
	// sophisticated clock synchronization mechanisms are used.
	Keepalive(ctx context.Context, in *KeepaliveRequest, opts ...grpc.CallOption) (*KeepaliveResponse, error)
	// Publish a stream of telemetry / events to the server
	Publish(ctx context.Context, opts ...grpc.CallOption) (Edge_PublishClient, error)
	// Publish a stream of telemetry / events to the server, receiving
	// a stream of acknowledgments from the server in response.
	//
	// A response with no error_status guarantees that the data was
	// successfully ingested into the platform.
	//
	// A response with an error status of TRANSIENT_FAILURE indicates
	// that the data was not ingested due to a transient error and that the
	// client should re-attempt at a later time.
	//
	// A response with an error status of PERMANENT_FAILURE indicates
	// that the data was not ingested due to bad / invalid device credentials.
	// The device should bootstrap and re-attempt.
	//
	// A response with an error status of TELEMETRY_REJECTED indicates
	// that the data was not ingested due to malformed data.  The device
	// should not re-attempt.
	PublishWithAck(ctx context.Context, opts ...grpc.CallOption) (Edge_PublishWithAckClient, error)
}

type edgeClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeClient(cc grpc.ClientConnInterface) EdgeClient {
	return &edgeClient{cc}
}

func (c *edgeClient) Keepalive(ctx context.Context, in *KeepaliveRequest, opts ...grpc.CallOption) (*KeepaliveResponse, error) {
	out := new(KeepaliveResponse)
	err := c.cc.Invoke(ctx, "/autonomic.ext.edge.Edge/Keepalive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Edge_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Edge_serviceDesc.Streams[0], "/autonomic.ext.edge.Edge/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &edgePublishClient{stream}
	return x, nil
}

type Edge_PublishClient interface {
	Send(*PublishRequest) error
	CloseAndRecv() (*PublishResponse, error)
	grpc.ClientStream
}

type edgePublishClient struct {
	grpc.ClientStream
}

func (x *edgePublishClient) Send(m *PublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *edgePublishClient) CloseAndRecv() (*PublishResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *edgeClient) PublishWithAck(ctx context.Context, opts ...grpc.CallOption) (Edge_PublishWithAckClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Edge_serviceDesc.Streams[1], "/autonomic.ext.edge.Edge/PublishWithAck", opts...)
	if err != nil {
		return nil, err
	}
	x := &edgePublishWithAckClient{stream}
	return x, nil
}

type Edge_PublishWithAckClient interface {
	Send(*PublishWithAckRequest) error
	Recv() (*PublishWithAckResponse, error)
	grpc.ClientStream
}

type edgePublishWithAckClient struct {
	grpc.ClientStream
}

func (x *edgePublishWithAckClient) Send(m *PublishWithAckRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *edgePublishWithAckClient) Recv() (*PublishWithAckResponse, error) {
	m := new(PublishWithAckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EdgeServer is the server API for Edge service.
type EdgeServer interface {
	// `Keepalive()` is used to maintain the connection from the client
	// to the server. Clients send their current notion of time, and
	// servers respond with their current notion of time, allowing clients
	// to quickly get a good approximation of the current time before more
	// sophisticated clock synchronization mechanisms are used.
	Keepalive(context.Context, *KeepaliveRequest) (*KeepaliveResponse, error)
	// Publish a stream of telemetry / events to the server
	Publish(Edge_PublishServer) error
	// Publish a stream of telemetry / events to the server, receiving
	// a stream of acknowledgments from the server in response.
	//
	// A response with no error_status guarantees that the data was
	// successfully ingested into the platform.
	//
	// A response with an error status of TRANSIENT_FAILURE indicates
	// that the data was not ingested due to a transient error and that the
	// client should re-attempt at a later time.
	//
	// A response with an error status of PERMANENT_FAILURE indicates
	// that the data was not ingested due to bad / invalid device credentials.
	// The device should bootstrap and re-attempt.
	//
	// A response with an error status of TELEMETRY_REJECTED indicates
	// that the data was not ingested due to malformed data.  The device
	// should not re-attempt.
	PublishWithAck(Edge_PublishWithAckServer) error
}

// UnimplementedEdgeServer can be embedded to have forward compatible implementations.
type UnimplementedEdgeServer struct {
}

func (*UnimplementedEdgeServer) Keepalive(ctx context.Context, req *KeepaliveRequest) (*KeepaliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keepalive not implemented")
}
func (*UnimplementedEdgeServer) Publish(srv Edge_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedEdgeServer) PublishWithAck(srv Edge_PublishWithAckServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishWithAck not implemented")
}

func RegisterEdgeServer(s *grpc.Server, srv EdgeServer) {
	s.RegisterService(&_Edge_serviceDesc, srv)
}

func _Edge_Keepalive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepaliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServer).Keepalive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autonomic.ext.edge.Edge/Keepalive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServer).Keepalive(ctx, req.(*KeepaliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edge_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EdgeServer).Publish(&edgePublishServer{stream})
}

type Edge_PublishServer interface {
	SendAndClose(*PublishResponse) error
	Recv() (*PublishRequest, error)
	grpc.ServerStream
}

type edgePublishServer struct {
	grpc.ServerStream
}

func (x *edgePublishServer) SendAndClose(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *edgePublishServer) Recv() (*PublishRequest, error) {
	m := new(PublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Edge_PublishWithAck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EdgeServer).PublishWithAck(&edgePublishWithAckServer{stream})
}

type Edge_PublishWithAckServer interface {
	Send(*PublishWithAckResponse) error
	Recv() (*PublishWithAckRequest, error)
	grpc.ServerStream
}

type edgePublishWithAckServer struct {
	grpc.ServerStream
}

func (x *edgePublishWithAckServer) Send(m *PublishWithAckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *edgePublishWithAckServer) Recv() (*PublishWithAckRequest, error) {
	m := new(PublishWithAckRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Edge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "autonomic.ext.edge.Edge",
	HandlerType: (*EdgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Keepalive",
			Handler:    _Edge_Keepalive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _Edge_Publish_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PublishWithAck",
			Handler:       _Edge_PublishWithAck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "autonomic/ext/edge/edge.proto",
}
