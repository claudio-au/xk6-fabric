/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2017 - 2018 Autonomic Incorporated - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 * 
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 * 
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
syntax = "proto3";

package autonomic.ext.edge;

option go_package = "xk6-fabric/proto/autonomic/ext/edge";
option java_package = "com.autonomic.ext.edge";
option java_outer_classname = "EdgeProto";
option java_multiple_files = true;

option cc_enable_arenas = true;

option objc_class_prefix = "AUT";

import "google/protobuf/timestamp.proto";
import "autonomic/ext/event/event.proto";

import "autonomic/ext/telemetry/report.proto";

// #### Introduction
//
// The Edge API is the primary communication mechanism between devices,
// such as vehicle TCUs and PIDs, and the Autonomic service.
//
service Edge {
    // `Keepalive()` is used to maintain the connection from the client
    // to the server. Clients send their current notion of time, and
    // servers respond with their current notion of time, allowing clients
    // to quickly get a good approximation of the current time before more
    // sophisticated clock synchronization mechanisms are used.
    rpc Keepalive(KeepaliveRequest) returns (KeepaliveResponse) {};

    // Publish a stream of telemetry / events to the server
    rpc Publish(stream PublishRequest) returns (PublishResponse) {};

    // Publish a stream of telemetry / events to the server, receiving
    // a stream of acknowledgments from the server in response.
    //
    // A response with no error_status guarantees that the data was
    // successfully ingested into the platform.
    //
    // A response with an error status of TRANSIENT_FAILURE indicates
    // that the data was not ingested due to a transient error and that the
    // client should re-attempt at a later time.
    //
    // A response with an error status of PERMANENT_FAILURE indicates
    // that the data was not ingested due to bad / invalid device credentials.
    // The device should bootstrap and re-attempt.
    //
    // A response with an error status of TELEMETRY_REJECTED indicates
    // that the data was not ingested due to malformed data.  The device
    // should not re-attempt.
    rpc PublishWithAck(stream PublishWithAckRequest) returns (stream PublishWithAckResponse) {};
}

// Request object for Edge.Keepalive.
message KeepaliveRequest {
    // A client-generated sequence number used to correlate with the
    // server responses. The individual values are not considered
    // meaningful, but the sequence **must** be monotonically
    // increasing while a device is running. The sequence number
    // **may** be reset to zero on reboot.
    uint64 sequence = 1;

    // The current time according to the client.
    google.protobuf.Timestamp timestamp = 2;
}

// Response object for Edge.Keepalive.
message KeepaliveResponse {
    // The sequence number from the `KeepaliveRequest` to which the
    // server is responding.
    uint64 sequence = 1;

    // The current time according to the server.
    google.protobuf.Timestamp timestamp = 2;
}

message PublishRequest {
    google.protobuf.Timestamp timestamp = 1;

    repeated autonomic.ext.event.Event events = 2;

    repeated autonomic.ext.telemetry.Report reports = 3;
}

// The response to a call to publish() based on the provisioning status
// of the device, or the contents of what the device has attempted
// to publish
message PublishResponse {

    enum PublishErrorStatus {
        UNDEFINED_ERROR_STATUS = 0;
        TRANSIENT_FAILURE = 1;  // request can be tried again
        PERMANENT_FAILURE = 2;  // request should not be tried again
        TELEMETRY_REJECTED = 3; // telemetry was rejected (not ingested)
                                // e.g. telemetry too large, or device is
                                // not authorized to send telemetry

    }

    PublishErrorStatus error_status = 1;
}

message PublishWithAckRequest {
    // Client-provided unique-identifier for this message. Cloud shall
    // return the client-provided id in the response, upon the successful
    // ingest of this message. The cloud does not enforce uniqueness
    // constraints on this field. The only constraint on this field is
    // that it shall not exceed 16 bytes. Any id that exceeds 16 bytes
    // shall be truncated to 16 bytes by the cloud in the response.
    bytes id = 1;

    // PublishRequest containing events and/or telemetry reports
    oneof publish_request {
        PublishRequest unencrypted_request = 2;
        // an encrypted_request is a PublishRequest that has passed through a message-level encryption operation.
        bytes encrypted_request = 3;
    }
}

message PublishWithAckResponse {
    // The Id of the message for which the server is acknowledging receipt
    bytes id = 1;

    // PublishResponse generated in response to to the PublishRequest
    // sent with the Id above
    PublishResponse publish_response = 2;
}
