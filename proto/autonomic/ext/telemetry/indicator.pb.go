/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2020 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autonomic/ext/telemetry/indicator.proto

package telemetry

import (
	fmt "fmt"
	enumerations "xk6-fabric/proto/autonomic/ext/telemetry/enumerations"
	//enumerations "xk6-fabric/proto/autonomic/ext/telemetry/enumerations"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Indicator struct {
	// Types that are valid to be assigned to DiagnosticIndicator:
	//	*Indicator_WellKnownIndicator
	//	*Indicator_StringDiagnosticIndicator
	DiagnosticIndicator   isIndicator_DiagnosticIndicator `protobuf_oneof:"diagnostic_indicator"`
	IndicatorState        enumerations.IndicatorState     `protobuf:"varint,3,opt,name=indicator_state,json=indicatorState,proto3,enum=autonomic.ext.telemetry.enumerations.indicatorState.IndicatorState" json:"indicator_state,omitempty"`
	DiagnosticTroubleCode *DiagnosticTroubleCode          `protobuf:"bytes,4,opt,name=diagnostic_trouble_code,json=diagnosticTroubleCode,proto3" json:"diagnostic_trouble_code,omitempty"`
	AdditionalInfo        *any.Any                        `protobuf:"bytes,5,opt,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                        `json:"-"`
	XXX_unrecognized      []byte                          `json:"-"`
	XXX_sizecache         int32                           `json:"-"`
}

func (m *Indicator) Reset()         { *m = Indicator{} }
func (m *Indicator) String() string { return proto.CompactTextString(m) }
func (*Indicator) ProtoMessage()    {}
func (*Indicator) Descriptor() ([]byte, []int) {
	return fileDescriptor_cce91eb8e95304e0, []int{0}
}

func (m *Indicator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Indicator.Unmarshal(m, b)
}
func (m *Indicator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Indicator.Marshal(b, m, deterministic)
}
func (m *Indicator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Indicator.Merge(m, src)
}
func (m *Indicator) XXX_Size() int {
	return xxx_messageInfo_Indicator.Size(m)
}
func (m *Indicator) XXX_DiscardUnknown() {
	xxx_messageInfo_Indicator.DiscardUnknown(m)
}

var xxx_messageInfo_Indicator proto.InternalMessageInfo

type isIndicator_DiagnosticIndicator interface {
	isIndicator_DiagnosticIndicator()
}

type Indicator_WellKnownIndicator struct {
	WellKnownIndicator WellKnownIndicator `protobuf:"varint,1,opt,name=well_known_indicator,json=wellKnownIndicator,proto3,enum=autonomic.ext.telemetry.indicator.WellKnownIndicator,oneof"`
}

type Indicator_StringDiagnosticIndicator struct {
	StringDiagnosticIndicator string `protobuf:"bytes,2,opt,name=string_diagnostic_indicator,json=stringDiagnosticIndicator,proto3,oneof"`
}

func (*Indicator_WellKnownIndicator) isIndicator_DiagnosticIndicator() {}

func (*Indicator_StringDiagnosticIndicator) isIndicator_DiagnosticIndicator() {}

func (m *Indicator) GetDiagnosticIndicator() isIndicator_DiagnosticIndicator {
	if m != nil {
		return m.DiagnosticIndicator
	}
	return nil
}

func (m *Indicator) GetWellKnownIndicator() WellKnownIndicator {
	if x, ok := m.GetDiagnosticIndicator().(*Indicator_WellKnownIndicator); ok {
		return x.WellKnownIndicator
	}
	return WellKnownIndicator_UNKNOWN_INDICATOR
}

func (m *Indicator) GetStringDiagnosticIndicator() string {
	if x, ok := m.GetDiagnosticIndicator().(*Indicator_StringDiagnosticIndicator); ok {
		return x.StringDiagnosticIndicator
	}
	return ""
}

func (m *Indicator) GetIndicatorState() enumerations.IndicatorState {
	if m != nil {
		return m.IndicatorState
	}
	return enumerations.IndicatorState_UNKNOWN_INDICATOR_STATE
}

func (m *Indicator) GetDiagnosticTroubleCode() *DiagnosticTroubleCode {
	if m != nil {
		return m.DiagnosticTroubleCode
	}
	return nil
}

func (m *Indicator) GetAdditionalInfo() *any.Any {
	if m != nil {
		return m.AdditionalInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Indicator) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Indicator_WellKnownIndicator)(nil),
		(*Indicator_StringDiagnosticIndicator)(nil),
	}
}

func init() {
	proto.RegisterType((*Indicator)(nil), "autonomic.ext.telemetry.Indicator")
}

func init() {
	proto.RegisterFile("autonomic/ext/telemetry/indicator.proto", fileDescriptor_cce91eb8e95304e0)
}

var fileDescriptor_cce91eb8e95304e0 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x8b, 0x13, 0x31,
	0x1c, 0xc5, 0x37, 0xad, 0x0a, 0x1b, 0xa1, 0x0b, 0x43, 0x75, 0xbb, 0xbb, 0x97, 0xae, 0x17, 0x7b,
	0xd9, 0x04, 0x76, 0xf1, 0x22, 0x08, 0xb6, 0xab, 0xb0, 0x45, 0x90, 0x65, 0xac, 0x08, 0x5e, 0x86,
	0x34, 0x49, 0xc7, 0x60, 0x26, 0x7f, 0xc9, 0xfc, 0x87, 0xb6, 0x5f, 0xc7, 0xa3, 0xf8, 0xb5, 0xfc,
	0x0e, 0x1e, 0xa5, 0x33, 0xbb, 0x99, 0xd6, 0x6d, 0x8e, 0x49, 0xde, 0x7b, 0xf9, 0xe5, 0xe5, 0x4f,
	0x5f, 0x8a, 0x0a, 0xc1, 0x41, 0x61, 0x24, 0xd7, 0x2b, 0xe4, 0xa8, 0xad, 0x2e, 0x34, 0xfa, 0x35,
	0x37, 0x4e, 0x19, 0x29, 0x10, 0x3c, 0xfb, 0xe1, 0x01, 0x21, 0x39, 0x0e, 0x42, 0xa6, 0x57, 0xc8,
	0x82, 0xf0, 0xf4, 0x2a, 0x96, 0xb0, 0xd4, 0xd6, 0x66, 0xdf, 0x1d, 0x2c, 0x5d, 0x16, 0xc2, 0xca,
	0x26, 0xed, 0xf4, 0x75, 0xcc, 0xa4, 0x5d, 0x55, 0x68, 0x2f, 0xd0, 0x80, 0x2b, 0x5b, 0x86, 0xac,
	0x44, 0x81, 0xfa, 0xce, 0x7b, 0x1e, 0xf3, 0x2a, 0x94, 0x77, 0x92, 0x93, 0x1c, 0x20, 0xb7, 0x9a,
	0xd7, 0xab, 0x79, 0xb5, 0xe0, 0xc2, 0xad, 0x9b, 0xa3, 0x17, 0x7f, 0xba, 0xf4, 0x70, 0x7a, 0x9f,
	0x9b, 0x18, 0xda, 0xdf, 0x87, 0x39, 0x20, 0x43, 0x32, 0xea, 0x5d, 0xbe, 0x62, 0x91, 0x47, 0xb3,
	0xb6, 0x9d, 0x2f, 0xda, 0xda, 0x0f, 0x1b, 0x77, 0x08, 0xbd, 0x39, 0x48, 0x93, 0xe5, 0x83, 0xdd,
	0xe4, 0x2d, 0x3d, 0x2b, 0xd1, 0x1b, 0x97, 0x67, 0xca, 0x88, 0xdc, 0x41, 0x89, 0x46, 0x6e, 0xdd,
	0xd8, 0x19, 0x92, 0xd1, 0xe1, 0xcd, 0x41, 0x7a, 0xd2, 0x88, 0xde, 0x05, 0x4d, 0x9b, 0x60, 0xe9,
	0xd1, 0x7f, 0x8d, 0x0c, 0xba, 0x35, 0xe7, 0x75, 0x94, 0x73, 0xbb, 0xce, 0x16, 0xfa, 0x53, 0xdd,
	0xe6, 0x74, 0x67, 0x99, 0xf6, 0x76, 0x8f, 0x93, 0x05, 0x3d, 0xde, 0x02, 0x45, 0x0f, 0xd5, 0xdc,
	0xea, 0x4c, 0x82, 0xd2, 0x83, 0x47, 0x43, 0x32, 0x7a, 0x7a, 0xc9, 0xa2, 0xb7, 0xb6, 0xf0, 0xb3,
	0xc6, 0x76, 0x0d, 0x4a, 0xa7, 0xcf, 0xd4, 0xbe, 0xed, 0xe4, 0x0d, 0x3d, 0x12, 0x4a, 0x99, 0x0d,
	0xa2, 0xb0, 0x99, 0x71, 0x0b, 0x18, 0x3c, 0xae, 0xf3, 0xfb, 0xac, 0xf9, 0x45, 0x76, 0xff, 0x8b,
	0x6c, 0xec, 0xd6, 0x69, 0xaf, 0x15, 0x4f, 0xdd, 0x02, 0x26, 0xcf, 0x69, 0x7f, 0x5f, 0x9f, 0x93,
	0xdf, 0x84, 0x9e, 0x49, 0x28, 0x62, 0x8c, 0x93, 0x5e, 0x78, 0xfe, 0xed, 0x26, 0xfe, 0x96, 0x7c,
	0xfd, 0x98, 0x1b, 0xfc, 0x56, 0xcd, 0x99, 0x84, 0x82, 0x07, 0xd7, 0x85, 0x30, 0x9b, 0x29, 0xd3,
	0xde, 0x09, 0x7b, 0x51, 0x83, 0x94, 0xbc, 0xf4, 0x92, 0x17, 0xc2, 0xb8, 0x66, 0xbc, 0x78, 0x64,
	0x1c, 0xff, 0x12, 0xf2, 0xb3, 0xd3, 0x1d, 0x7f, 0x9e, 0xfd, 0xea, 0x9c, 0x8f, 0x03, 0xc4, 0xfb,
	0x15, 0xb2, 0x59, 0x28, 0x2a, 0x30, 0xcc, 0x9f, 0xd4, 0x59, 0x57, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xc8, 0x47, 0xef, 0x2b, 0x90, 0x03, 0x00, 0x00,
}
