/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2020 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autonomic/ext/telemetry/raw.proto

package telemetry

import (
	fmt "fmt"
	common "xk6-fabric/proto/autonomic/ext/common"
	//common "xk6-fabric/proto/autonomic/ext/common"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The type of the raw data in a RawTelemetry message
type RawTelemetryType int32

const (
	RawTelemetryType_UNKNOWN_TYPE              RawTelemetryType = 0
	RawTelemetryType_AU_NATIVE                 RawTelemetryType = 1
	RawTelemetryType_MDI                       RawTelemetryType = 4
	RawTelemetryType_FNV                       RawTelemetryType = 2
	RawTelemetryType_FTCP                      RawTelemetryType = 5
	RawTelemetryType_PUBLISH_REQUEST           RawTelemetryType = 6
	RawTelemetryType_REPORT                    RawTelemetryType = 7
	RawTelemetryType_FNV2_MMOTA                RawTelemetryType = 8
	RawTelemetryType_ENCRYPTED_PUBLISH_REQUEST RawTelemetryType = 9
)

var RawTelemetryType_name = map[int32]string{
	0: "UNKNOWN_TYPE",
	1: "AU_NATIVE",
	4: "MDI",
	2: "FNV",
	5: "FTCP",
	6: "PUBLISH_REQUEST",
	7: "REPORT",
	8: "FNV2_MMOTA",
	9: "ENCRYPTED_PUBLISH_REQUEST",
}

var RawTelemetryType_value = map[string]int32{
	"UNKNOWN_TYPE":              0,
	"AU_NATIVE":                 1,
	"MDI":                       4,
	"FNV":                       2,
	"FTCP":                      5,
	"PUBLISH_REQUEST":           6,
	"REPORT":                    7,
	"FNV2_MMOTA":                8,
	"ENCRYPTED_PUBLISH_REQUEST": 9,
}

func (x RawTelemetryType) String() string {
	return proto.EnumName(RawTelemetryType_name, int32(x))
}

func (RawTelemetryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b63fd28991d86e15, []int{0}
}

// This message is deprecated in favour of the representation found in
// autonomic/ext/raw/raw.proto
//
// Deprecated: Do not use.
type RawTelemetry struct {
	// Type of the raw data
	Type RawTelemetryType `protobuf:"varint,1,opt,name=type,proto3,enum=autonomic.ext.telemetry.RawTelemetryType" json:"type,omitempty"`
	// Type specific version information
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Time the raw data package was ingested
	IngestTimestamp *timestamp.Timestamp `protobuf:"bytes,5,opt,name=ingest_timestamp,json=ingestTimestamp,proto3" json:"ingest_timestamp,omitempty"`
	OemParams       map[string]string    `protobuf:"bytes,6,rep,name=oem_params,json=oemParams,proto3" json:"oem_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// oem parameters for this telemetry. Opaque to Au.
	OemData *common.OemData `protobuf:"bytes,7,opt,name=oem_data,json=oemData,proto3" json:"oem_data,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*RawTelemetry_BytesData
	//	*RawTelemetry_JsonData
	Data                 isRawTelemetry_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RawTelemetry) Reset()         { *m = RawTelemetry{} }
func (m *RawTelemetry) String() string { return proto.CompactTextString(m) }
func (*RawTelemetry) ProtoMessage()    {}
func (*RawTelemetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63fd28991d86e15, []int{0}
}

func (m *RawTelemetry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawTelemetry.Unmarshal(m, b)
}
func (m *RawTelemetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawTelemetry.Marshal(b, m, deterministic)
}
func (m *RawTelemetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawTelemetry.Merge(m, src)
}
func (m *RawTelemetry) XXX_Size() int {
	return xxx_messageInfo_RawTelemetry.Size(m)
}
func (m *RawTelemetry) XXX_DiscardUnknown() {
	xxx_messageInfo_RawTelemetry.DiscardUnknown(m)
}

var xxx_messageInfo_RawTelemetry proto.InternalMessageInfo

func (m *RawTelemetry) GetType() RawTelemetryType {
	if m != nil {
		return m.Type
	}
	return RawTelemetryType_UNKNOWN_TYPE
}

func (m *RawTelemetry) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RawTelemetry) GetIngestTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.IngestTimestamp
	}
	return nil
}

func (m *RawTelemetry) GetOemParams() map[string]string {
	if m != nil {
		return m.OemParams
	}
	return nil
}

func (m *RawTelemetry) GetOemData() *common.OemData {
	if m != nil {
		return m.OemData
	}
	return nil
}

type isRawTelemetry_Data interface {
	isRawTelemetry_Data()
}

type RawTelemetry_BytesData struct {
	BytesData []byte `protobuf:"bytes,20,opt,name=bytes_data,json=bytesData,proto3,oneof"`
}

type RawTelemetry_JsonData struct {
	JsonData string `protobuf:"bytes,21,opt,name=json_data,json=jsonData,proto3,oneof"`
}

func (*RawTelemetry_BytesData) isRawTelemetry_Data() {}

func (*RawTelemetry_JsonData) isRawTelemetry_Data() {}

func (m *RawTelemetry) GetData() isRawTelemetry_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RawTelemetry) GetBytesData() []byte {
	if x, ok := m.GetData().(*RawTelemetry_BytesData); ok {
		return x.BytesData
	}
	return nil
}

func (m *RawTelemetry) GetJsonData() string {
	if x, ok := m.GetData().(*RawTelemetry_JsonData); ok {
		return x.JsonData
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RawTelemetry) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RawTelemetry_BytesData)(nil),
		(*RawTelemetry_JsonData)(nil),
	}
}

func init() {
	proto.RegisterEnum("autonomic.ext.telemetry.RawTelemetryType", RawTelemetryType_name, RawTelemetryType_value)
	proto.RegisterType((*RawTelemetry)(nil), "autonomic.ext.telemetry.RawTelemetry")
	proto.RegisterMapType((map[string]string)(nil), "autonomic.ext.telemetry.RawTelemetry.OemParamsEntry")
}

func init() { proto.RegisterFile("autonomic/ext/telemetry/raw.proto", fileDescriptor_b63fd28991d86e15) }

var fileDescriptor_b63fd28991d86e15 = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xd1, 0x6e, 0xd3, 0x4a,
	0x10, 0xed, 0x26, 0x69, 0x12, 0x4f, 0x7b, 0xdb, 0xbd, 0x4b, 0x11, 0x26, 0xa8, 0x6a, 0x00, 0x21,
	0x05, 0xa4, 0xda, 0x52, 0xe0, 0x01, 0x55, 0x20, 0x91, 0x34, 0x8e, 0x12, 0x41, 0x1c, 0xb3, 0x71,
	0x82, 0xca, 0x8b, 0xb5, 0x09, 0x4b, 0x30, 0x64, 0xbd, 0x91, 0xbd, 0x69, 0xeb, 0x6f, 0xe0, 0x23,
	0x90, 0xf8, 0x21, 0x7e, 0x87, 0x47, 0x64, 0x1b, 0x47, 0x6d, 0xa4, 0x48, 0xbc, 0xcd, 0x8c, 0xcf,
	0x19, 0x9f, 0x39, 0x33, 0x0b, 0x0f, 0xd9, 0x4a, 0xc9, 0x40, 0x0a, 0x7f, 0x66, 0xf2, 0x6b, 0x65,
	0x2a, 0xbe, 0xe0, 0x82, 0xab, 0x30, 0x36, 0x43, 0x76, 0x65, 0x2c, 0x43, 0xa9, 0x24, 0xb9, 0xb7,
	0x86, 0x18, 0xfc, 0x5a, 0x19, 0x6b, 0x48, 0xed, 0x64, 0x2e, 0xe5, 0x7c, 0xc1, 0xcd, 0x14, 0x36,
	0x5d, 0x7d, 0x36, 0x95, 0x2f, 0x78, 0xa4, 0x98, 0x58, 0x66, 0xcc, 0xda, 0xe3, 0xdb, 0xcd, 0x67,
	0x52, 0x08, 0x19, 0x98, 0x92, 0x0b, 0xef, 0x13, 0x53, 0x2c, 0x03, 0x3d, 0xfa, 0x55, 0x84, 0x7d,
	0xca, 0xae, 0xdc, 0xbc, 0x2d, 0x79, 0x0d, 0x25, 0x15, 0x2f, 0xb9, 0x8e, 0xea, 0xa8, 0x71, 0xd0,
	0x7c, 0x6a, 0x6c, 0xf9, 0xbd, 0x71, 0x93, 0xe4, 0xc6, 0x4b, 0x4e, 0x53, 0x1a, 0xd1, 0xa1, 0x72,
	0xc9, 0xc3, 0xc8, 0x97, 0x81, 0x5e, 0xa8, 0xa3, 0x86, 0x46, 0xf3, 0x94, 0x58, 0x80, 0xfd, 0x60,
	0xce, 0x23, 0xe5, 0xad, 0x85, 0xea, 0xbb, 0x75, 0xd4, 0xd8, 0x6b, 0xd6, 0x8c, 0x6c, 0x14, 0x23,
	0x1f, 0xc5, 0x70, 0x73, 0x04, 0x3d, 0xcc, 0x38, 0xeb, 0x02, 0x19, 0x01, 0x24, 0x23, 0x2c, 0x59,
	0xc8, 0x44, 0xa4, 0x97, 0xeb, 0xc5, 0xc6, 0x5e, 0xf3, 0xc5, 0x3f, 0xa9, 0x34, 0x86, 0x5c, 0x38,
	0x29, 0xcd, 0x0a, 0x54, 0x18, 0x53, 0x4d, 0xe6, 0x39, 0x79, 0x03, 0xd5, 0xdc, 0x17, 0xbd, 0x92,
	0x6a, 0x7a, 0xb2, 0xd1, 0x32, 0x73, 0xcf, 0x90, 0x5c, 0xa4, 0xe6, 0x0d, 0xb9, 0xe8, 0x30, 0xc5,
	0x68, 0x45, 0x66, 0x01, 0x39, 0x01, 0x98, 0xc6, 0x8a, 0x47, 0x59, 0x8f, 0xa3, 0x3a, 0x6a, 0xec,
	0xf7, 0x76, 0xa8, 0x96, 0xd6, 0x52, 0xc0, 0x31, 0x68, 0x5f, 0x23, 0x19, 0x64, 0xdf, 0xef, 0x26,
	0xd6, 0xf4, 0x76, 0x68, 0x35, 0x29, 0x25, 0x9f, 0x6b, 0xaf, 0xe0, 0xe0, 0xb6, 0x3c, 0x82, 0xa1,
	0xf8, 0x8d, 0xc7, 0xe9, 0x1e, 0x34, 0x9a, 0x84, 0xe4, 0x08, 0x76, 0x2f, 0xd9, 0x62, 0xc5, 0xff,
	0x3a, 0x9b, 0x25, 0x67, 0x85, 0x97, 0xe8, 0xac, 0xa0, 0xa3, 0x76, 0x19, 0x4a, 0x49, 0xef, 0x67,
	0x3f, 0x10, 0xe0, 0xcd, 0xe5, 0x10, 0x0c, 0xfb, 0x63, 0xfb, 0xad, 0x3d, 0xfc, 0x60, 0x7b, 0xee,
	0x85, 0x63, 0xe1, 0x1d, 0xf2, 0x1f, 0x68, 0xad, 0xb1, 0x67, 0xb7, 0xdc, 0xfe, 0xc4, 0xc2, 0x88,
	0x54, 0xa0, 0x38, 0xe8, 0xf4, 0x71, 0x29, 0x09, 0xba, 0xf6, 0x04, 0x17, 0x48, 0x15, 0x4a, 0x5d,
	0xf7, 0xdc, 0xc1, 0xbb, 0xe4, 0x0e, 0x1c, 0x3a, 0xe3, 0xf6, 0xbb, 0xfe, 0xa8, 0xe7, 0x51, 0xeb,
	0xfd, 0xd8, 0x1a, 0xb9, 0xb8, 0x4c, 0x00, 0xca, 0xd4, 0x72, 0x86, 0xd4, 0xc5, 0x15, 0x72, 0x00,
	0xd0, 0xb5, 0x27, 0x4d, 0x6f, 0x30, 0x18, 0xba, 0x2d, 0x5c, 0x25, 0xc7, 0x70, 0xdf, 0xb2, 0xcf,
	0xe9, 0x85, 0xe3, 0x5a, 0x1d, 0x6f, 0x93, 0xaa, 0xb5, 0xbf, 0x23, 0x78, 0x30, 0x93, 0x62, 0xdb,
	0xd2, 0xda, 0xff, 0xdf, 0x94, 0xef, 0x24, 0x37, 0xe1, 0xa0, 0x8f, 0xf6, 0xdc, 0x57, 0x5f, 0x56,
	0xd3, 0x64, 0x11, 0xe6, 0x9a, 0x78, 0xca, 0xfc, 0xe4, 0xb6, 0x79, 0x18, 0xb0, 0xc5, 0x69, 0x7a,
	0x3d, 0x91, 0x19, 0x85, 0x33, 0x53, 0x30, 0x3f, 0xc8, 0x1e, 0x86, 0xb9, 0xe5, 0x85, 0xfd, 0x46,
	0xe8, 0x67, 0xa1, 0xd8, 0x1a, 0xbb, 0xd3, 0x72, 0x8a, 0x7b, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x7b, 0x2a, 0x67, 0x2d, 0x8c, 0x03, 0x00, 0x00,
}
