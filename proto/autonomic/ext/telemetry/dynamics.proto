/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2018 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */

syntax = "proto3";

package autonomic.ext.telemetry;

option go_package = "xk6-fabric/proto/autonomic/ext/telemetry";
option java_package = "com.autonomic.ext.telemetry";
option java_outer_classname = "DynamicsProto";
option java_multiple_files = true;

option cc_enable_arenas = true;

option objc_class_prefix = "AUT";

// https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation
message Quaternion {
    double x = 1;
    double y = 2;
    double z = 3;
    double w = 4;
}

// https://en.wikipedia.org/wiki/Euler_angles
message EulerAngles {
    double roll = 1;
    double pitch = 2;
    double yaw = 3;
}

// https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion
message RotationMatrix {
    double m11 = 1; double m12 = 2; double m13 = 3;
    double m21 = 4; double m22 = 5; double m23 = 6;
    double m31 = 7; double m32 = 8; double m33 = 9;
}

message Orientation {
    oneof orientation {
        Quaternion quaternion = 1;
        EulerAngles euler_angles = 2;
        RotationMatrix rotation_matrix = 3;
    }
}

// Rotation, measured by gyros, is expressed in rad/s
// Acceleration, measured by accelerometers, is expressed in m/s^2
// Magnetic field, measured by magnetometers, is expressed in uTesla
//
// Raw sensor output, meaning the data has not beet filtered, smoothed,
// or otherwise processed to remove noise, is provided by SensorType
// values ending in _DATA. Processed data is provided by corresponding
// SensorType (e.g., ROTATION_RATE corresponds to GYRO_DATA and
// MAGNETIC_FIELD corresponds to MAGNETOMETER_DATA).
message ThreeAxisSensorState {
    enum SensorType {
        TYPE_UNSPECIFIED = 0;
        GYRO_DATA = 1;
        ROTATION_RATE = 2;
        ACCELEROMETER_DATA = 3;
        ACCELERATION_RATE = 4;
        MAGNETOMETER_DATA = 5;
        MAGNETIC_FIELD = 6;
    }

    SensorType sensor_type = 2;
    double x = 3;
    double y = 4;
    double z = 5;
}
