/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2020 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autonomic/ext/telemetry/metric.proto

package telemetry

import (
	fmt "fmt"
	common "xk6-fabric/proto/autonomic/ext/common"
	enumerations "xk6-fabric/proto/autonomic/ext/telemetry/enumerations"
	//common "xk6-fabric/proto/autonomic/ext/common"
	//enumerations "xk6-fabric/proto/autonomic/ext/telemetry/enumerations"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The kind of measurement. It describes how the data is reported.
type Metric_MetricKind int32

const (
	// Do not use this default value.
	Metric_METRIC_KIND_UNSPECIFIED Metric_MetricKind = 0
	// An instantaneous measurement of a value.
	Metric_GAUGE Metric_MetricKind = 1
	// The change in a value during a time interval.
	Metric_DELTA Metric_MetricKind = 2
	// A value accumulated over a time interval.  Cumulative
	// measurements in a time series should have the same start time
	// and increasing end times, until an event resets the cumulative
	// value to zero and sets a new start time for the following
	// points.
	Metric_CUMULATIVE Metric_MetricKind = 3
)

var Metric_MetricKind_name = map[int32]string{
	0: "METRIC_KIND_UNSPECIFIED",
	1: "GAUGE",
	2: "DELTA",
	3: "CUMULATIVE",
}

var Metric_MetricKind_value = map[string]int32{
	"METRIC_KIND_UNSPECIFIED": 0,
	"GAUGE":                   1,
	"DELTA":                   2,
	"CUMULATIVE":              3,
}

func (x Metric_MetricKind) String() string {
	return proto.EnumName(Metric_MetricKind_name, int32(x))
}

func (Metric_MetricKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b1f17bf0da8c6f10, []int{0, 0}
}

// Represents a single metric value.
type Metric struct {
	Signal *Signal `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
	Tags   []*Tag  `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	// The start of the time period over which this metric value's measurement
	// applies. The time period has different semantics for different metric
	// kinds (cumulative, delta, and gauge).
	StartTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end of the time period over which this metric value's measurement
	// applies.
	EndTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Whether the metric records instantaneous values, changes to a value, etc.
	MetricKind Metric_MetricKind `protobuf:"varint,6,opt,name=metric_kind,json=metricKind,proto3,enum=autonomic.ext.telemetry.Metric_MetricKind" json:"metric_kind,omitempty"`
	// The value. The type of value used in the request must
	// agree with the metric definition in the service configuration, otherwise
	// the MetricValue is rejected.
	//
	// Types that are valid to be assigned to Value:
	//	*Metric_BoolValue
	//	*Metric_Int64Value
	//	*Metric_DoubleValue
	//	*Metric_StringValue
	//	*Metric_PositionValue
	//	*Metric_DistributionValue
	//	*Metric_DtcValue
	//	*Metric_EnumValue
	//	*Metric_HeadingValue
	//	*Metric_SpeedValue
	//	*Metric_ThreeAxisValue
	//	*Metric_IndicatorValue
	//	*Metric_EvBatteryPackageStatus
	//	*Metric_EvBatteryCellStatus
	//	*Metric_EvBatteryProbeStatus
	//	*Metric_ElectricMachineState
	//	*Metric_ErrorValue
	//	*Metric_Range
	//	*Metric_ClimateControlValue
	//	*Metric_ConfigurationValue
	Value isMetric_Value `protobuf_oneof:"value"`
	// The metrics in this set.
	Metrics []*Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Additional information about the metric (opaque to Au)
	OemData              *common.OemData `protobuf:"bytes,100,opt,name=oem_data,json=oemData,proto3" json:"oem_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1f17bf0da8c6f10, []int{0}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetSignal() *Signal {
	if m != nil {
		return m.Signal
	}
	return nil
}

func (m *Metric) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Metric) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Metric) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Metric) GetMetricKind() Metric_MetricKind {
	if m != nil {
		return m.MetricKind
	}
	return Metric_METRIC_KIND_UNSPECIFIED
}

type isMetric_Value interface {
	isMetric_Value()
}

type Metric_BoolValue struct {
	BoolValue bool `protobuf:"varint,7,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Metric_Int64Value struct {
	Int64Value int64 `protobuf:"varint,8,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Metric_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,9,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Metric_StringValue struct {
	StringValue string `protobuf:"bytes,10,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Metric_PositionValue struct {
	PositionValue *Position `protobuf:"bytes,12,opt,name=position_value,json=positionValue,proto3,oneof"`
}

type Metric_DistributionValue struct {
	DistributionValue *Distribution `protobuf:"bytes,11,opt,name=distribution_value,json=distributionValue,proto3,oneof"`
}

type Metric_DtcValue struct {
	DtcValue *DiagnosticTroubleCode `protobuf:"bytes,13,opt,name=dtc_value,json=dtcValue,proto3,oneof"`
}

type Metric_EnumValue struct {
	EnumValue *Enumeration `protobuf:"bytes,14,opt,name=enum_value,json=enumValue,proto3,oneof"`
}

type Metric_HeadingValue struct {
	HeadingValue *Heading `protobuf:"bytes,15,opt,name=heading_value,json=headingValue,proto3,oneof"`
}

type Metric_SpeedValue struct {
	SpeedValue *Speed `protobuf:"bytes,16,opt,name=speed_value,json=speedValue,proto3,oneof"`
}

type Metric_ThreeAxisValue struct {
	ThreeAxisValue *ThreeAxisSensorState `protobuf:"bytes,17,opt,name=three_axis_value,json=threeAxisValue,proto3,oneof"`
}

type Metric_IndicatorValue struct {
	IndicatorValue *Indicator `protobuf:"bytes,18,opt,name=indicator_value,json=indicatorValue,proto3,oneof"`
}

type Metric_EvBatteryPackageStatus struct {
	EvBatteryPackageStatus *EvBatteryPackageStatus `protobuf:"bytes,22,opt,name=ev_battery_package_status,json=evBatteryPackageStatus,proto3,oneof"`
}

type Metric_EvBatteryCellStatus struct {
	EvBatteryCellStatus *EvBatteryCellStatus `protobuf:"bytes,23,opt,name=ev_battery_cell_status,json=evBatteryCellStatus,proto3,oneof"`
}

type Metric_EvBatteryProbeStatus struct {
	EvBatteryProbeStatus *EvBatteryProbeStatus `protobuf:"bytes,24,opt,name=ev_battery_probe_status,json=evBatteryProbeStatus,proto3,oneof"`
}

type Metric_ElectricMachineState struct {
	ElectricMachineState *ElectricMachineState `protobuf:"bytes,25,opt,name=electric_machine_state,json=electricMachineState,proto3,oneof"`
}

type Metric_ErrorValue struct {
	ErrorValue *ErrorMetric `protobuf:"bytes,27,opt,name=error_value,json=errorValue,proto3,oneof"`
}

type Metric_Range struct {
	Range *common.Range `protobuf:"bytes,28,opt,name=range,proto3,oneof"`
}

type Metric_ClimateControlValue struct {
	ClimateControlValue *ClimateControl `protobuf:"bytes,29,opt,name=climate_control_value,json=climateControlValue,proto3,oneof"`
}

type Metric_ConfigurationValue struct {
	ConfigurationValue *Configuration `protobuf:"bytes,30,opt,name=configuration_value,json=configurationValue,proto3,oneof"`
}

func (*Metric_BoolValue) isMetric_Value() {}

func (*Metric_Int64Value) isMetric_Value() {}

func (*Metric_DoubleValue) isMetric_Value() {}

func (*Metric_StringValue) isMetric_Value() {}

func (*Metric_PositionValue) isMetric_Value() {}

func (*Metric_DistributionValue) isMetric_Value() {}

func (*Metric_DtcValue) isMetric_Value() {}

func (*Metric_EnumValue) isMetric_Value() {}

func (*Metric_HeadingValue) isMetric_Value() {}

func (*Metric_SpeedValue) isMetric_Value() {}

func (*Metric_ThreeAxisValue) isMetric_Value() {}

func (*Metric_IndicatorValue) isMetric_Value() {}

func (*Metric_EvBatteryPackageStatus) isMetric_Value() {}

func (*Metric_EvBatteryCellStatus) isMetric_Value() {}

func (*Metric_EvBatteryProbeStatus) isMetric_Value() {}

func (*Metric_ElectricMachineState) isMetric_Value() {}

func (*Metric_ErrorValue) isMetric_Value() {}

func (*Metric_Range) isMetric_Value() {}

func (*Metric_ClimateControlValue) isMetric_Value() {}

func (*Metric_ConfigurationValue) isMetric_Value() {}

func (m *Metric) GetValue() isMetric_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Metric) GetBoolValue() bool {
	if x, ok := m.GetValue().(*Metric_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *Metric) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*Metric_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Metric) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*Metric_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Metric) GetStringValue() string {
	if x, ok := m.GetValue().(*Metric_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Metric) GetPositionValue() *Position {
	if x, ok := m.GetValue().(*Metric_PositionValue); ok {
		return x.PositionValue
	}
	return nil
}

func (m *Metric) GetDistributionValue() *Distribution {
	if x, ok := m.GetValue().(*Metric_DistributionValue); ok {
		return x.DistributionValue
	}
	return nil
}

func (m *Metric) GetDtcValue() *DiagnosticTroubleCode {
	if x, ok := m.GetValue().(*Metric_DtcValue); ok {
		return x.DtcValue
	}
	return nil
}

func (m *Metric) GetEnumValue() *Enumeration {
	if x, ok := m.GetValue().(*Metric_EnumValue); ok {
		return x.EnumValue
	}
	return nil
}

func (m *Metric) GetHeadingValue() *Heading {
	if x, ok := m.GetValue().(*Metric_HeadingValue); ok {
		return x.HeadingValue
	}
	return nil
}

func (m *Metric) GetSpeedValue() *Speed {
	if x, ok := m.GetValue().(*Metric_SpeedValue); ok {
		return x.SpeedValue
	}
	return nil
}

func (m *Metric) GetThreeAxisValue() *ThreeAxisSensorState {
	if x, ok := m.GetValue().(*Metric_ThreeAxisValue); ok {
		return x.ThreeAxisValue
	}
	return nil
}

func (m *Metric) GetIndicatorValue() *Indicator {
	if x, ok := m.GetValue().(*Metric_IndicatorValue); ok {
		return x.IndicatorValue
	}
	return nil
}

// Deprecated: Do not use.
func (m *Metric) GetEvBatteryPackageStatus() *EvBatteryPackageStatus {
	if x, ok := m.GetValue().(*Metric_EvBatteryPackageStatus); ok {
		return x.EvBatteryPackageStatus
	}
	return nil
}

// Deprecated: Do not use.
func (m *Metric) GetEvBatteryCellStatus() *EvBatteryCellStatus {
	if x, ok := m.GetValue().(*Metric_EvBatteryCellStatus); ok {
		return x.EvBatteryCellStatus
	}
	return nil
}

// Deprecated: Do not use.
func (m *Metric) GetEvBatteryProbeStatus() *EvBatteryProbeStatus {
	if x, ok := m.GetValue().(*Metric_EvBatteryProbeStatus); ok {
		return x.EvBatteryProbeStatus
	}
	return nil
}

// Deprecated: Do not use.
func (m *Metric) GetElectricMachineState() *ElectricMachineState {
	if x, ok := m.GetValue().(*Metric_ElectricMachineState); ok {
		return x.ElectricMachineState
	}
	return nil
}

func (m *Metric) GetErrorValue() *ErrorMetric {
	if x, ok := m.GetValue().(*Metric_ErrorValue); ok {
		return x.ErrorValue
	}
	return nil
}

func (m *Metric) GetRange() *common.Range {
	if x, ok := m.GetValue().(*Metric_Range); ok {
		return x.Range
	}
	return nil
}

func (m *Metric) GetClimateControlValue() *ClimateControl {
	if x, ok := m.GetValue().(*Metric_ClimateControlValue); ok {
		return x.ClimateControlValue
	}
	return nil
}

func (m *Metric) GetConfigurationValue() *Configuration {
	if x, ok := m.GetValue().(*Metric_ConfigurationValue); ok {
		return x.ConfigurationValue
	}
	return nil
}

func (m *Metric) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *Metric) GetOemData() *common.OemData {
	if m != nil {
		return m.OemData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Metric) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Metric_BoolValue)(nil),
		(*Metric_Int64Value)(nil),
		(*Metric_DoubleValue)(nil),
		(*Metric_StringValue)(nil),
		(*Metric_PositionValue)(nil),
		(*Metric_DistributionValue)(nil),
		(*Metric_DtcValue)(nil),
		(*Metric_EnumValue)(nil),
		(*Metric_HeadingValue)(nil),
		(*Metric_SpeedValue)(nil),
		(*Metric_ThreeAxisValue)(nil),
		(*Metric_IndicatorValue)(nil),
		(*Metric_EvBatteryPackageStatus)(nil),
		(*Metric_EvBatteryCellStatus)(nil),
		(*Metric_EvBatteryProbeStatus)(nil),
		(*Metric_ElectricMachineState)(nil),
		(*Metric_ErrorValue)(nil),
		(*Metric_Range)(nil),
		(*Metric_ClimateControlValue)(nil),
		(*Metric_ConfigurationValue)(nil),
	}
}

type ErrorMetric struct {
	WkErrorName enumerations.Error `protobuf:"varint,1,opt,name=wk_error_name,json=wkErrorName,proto3,enum=autonomic.ext.telemetry.enumerations.error.Error" json:"wk_error_name,omitempty"`
	// Custom message to expand on Error
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// See: ErrorSource enum
	Source enumerations.ErrorSource `protobuf:"varint,3,opt,name=source,proto3,enum=autonomic.ext.telemetry.enumerations.error.ErrorSource" json:"source,omitempty"`
	// Capture (if available) the original metric value
	SourceMetric         *Metric  `protobuf:"bytes,4,opt,name=source_metric,json=sourceMetric,proto3" json:"source_metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorMetric) Reset()         { *m = ErrorMetric{} }
func (m *ErrorMetric) String() string { return proto.CompactTextString(m) }
func (*ErrorMetric) ProtoMessage()    {}
func (*ErrorMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1f17bf0da8c6f10, []int{1}
}

func (m *ErrorMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorMetric.Unmarshal(m, b)
}
func (m *ErrorMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorMetric.Marshal(b, m, deterministic)
}
func (m *ErrorMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorMetric.Merge(m, src)
}
func (m *ErrorMetric) XXX_Size() int {
	return xxx_messageInfo_ErrorMetric.Size(m)
}
func (m *ErrorMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorMetric.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorMetric proto.InternalMessageInfo

func (m *ErrorMetric) GetWkErrorName() enumerations.Error {
	if m != nil {
		return m.WkErrorName
	}
	return enumerations.Error_UNKNOWN
}

func (m *ErrorMetric) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ErrorMetric) GetSource() enumerations.ErrorSource {
	if m != nil {
		return m.Source
	}
	return enumerations.ErrorSource_ERROR_SOURCE_UNKNOWN
}

func (m *ErrorMetric) GetSourceMetric() *Metric {
	if m != nil {
		return m.SourceMetric
	}
	return nil
}

type Enumeration struct {
	// Types that are valid to be assigned to Value:
	//	*Enumeration_Error
	//	*Enumeration_GearPosition
	//	*Enumeration_ImpactStatus
	//	*Enumeration_OccupancyStatus
	//	*Enumeration_SeatbeltStatus
	//	*Enumeration_IgnitionStatus
	//	*Enumeration_OffOnStatus
	//	*Enumeration_CompassDirectionStatus
	//	*Enumeration_PowerTakeOffStatus
	//	*Enumeration_MeasurementSystemStatus
	//	*Enumeration_AlarmStatus
	//	*Enumeration_TirePressureStatus
	//	*Enumeration_DoorStatus
	//	*Enumeration_DoorLockStatus
	//	*Enumeration_DieselExhaustFilter
	//	*Enumeration_DieselExhaustFilterRegeneration
	//	*Enumeration_EngineStatus
	//	*Enumeration_ElectricMachineStatus
	//	*Enumeration_EvBatteryChargeDisplayStatus
	//	*Enumeration_EvBatteryChargeStatus
	//	*Enumeration_EvDcPowerSourceStatus
	//	*Enumeration_EvOperationMode
	//	*Enumeration_EvPlugChargerStatus
	//	*Enumeration_HybridVehicleModeStatus
	//	*Enumeration_WaterInFuelStatus
	//	*Enumeration_DieselExhaustFluidQualityStatus
	//	*Enumeration_AcceleratorPedalStatus
	//	*Enumeration_DieselExhaustFluidLevelStatus
	//	*Enumeration_DieselExhaustFluidUltrasonicSensorStatus
	//	*Enumeration_FuelPressureStatus
	//	*Enumeration_DieselExhaustFluidSystemStatus
	//	*Enumeration_DieselExhaustFilterAutomaticCleanStatus
	//	*Enumeration_DieselExhaustFilterManualRegenerationStatus
	//	*Enumeration_AntennaSource
	//	*Enumeration_PowerSource
	//	*Enumeration_BatteryStatus
	//	*Enumeration_EngineAutomaticShutdownStatus
	//	*Enumeration_VehicleAudioSource
	//	*Enumeration_MitigationBrakeStatus
	//	*Enumeration_ActiveInactiveStatus
	//	*Enumeration_VehicleLifeCycleMode
	//	*Enumeration_XevPlugChargerStatus
	//	*Enumeration_BatteryLoadStatus
	//	*Enumeration_BatteryPerformanceStatus
	//	*Enumeration_RemoteStartDeviceStatus
	//	*Enumeration_XevBatteryChargeDisplayStatus
	//	*Enumeration_XevChargeStationPowerType
	//	*Enumeration_XevChargeStationCommunicationStatus
	Value                isEnumeration_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Enumeration) Reset()         { *m = Enumeration{} }
func (m *Enumeration) String() string { return proto.CompactTextString(m) }
func (*Enumeration) ProtoMessage()    {}
func (*Enumeration) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1f17bf0da8c6f10, []int{2}
}

func (m *Enumeration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Enumeration.Unmarshal(m, b)
}
func (m *Enumeration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Enumeration.Marshal(b, m, deterministic)
}
func (m *Enumeration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enumeration.Merge(m, src)
}
func (m *Enumeration) XXX_Size() int {
	return xxx_messageInfo_Enumeration.Size(m)
}
func (m *Enumeration) XXX_DiscardUnknown() {
	xxx_messageInfo_Enumeration.DiscardUnknown(m)
}

var xxx_messageInfo_Enumeration proto.InternalMessageInfo

type isEnumeration_Value interface {
	isEnumeration_Value()
}

type Enumeration_Error struct {
	Error enumerations.Error `protobuf:"varint,1,opt,name=error,proto3,enum=autonomic.ext.telemetry.enumerations.error.Error,oneof"`
}

type Enumeration_GearPosition struct {
	GearPosition enumerations.GearPosition `protobuf:"varint,2,opt,name=gear_position,json=gearPosition,proto3,enum=autonomic.ext.telemetry.enumerations.gearPosition.GearPosition,oneof"`
}

type Enumeration_ImpactStatus struct {
	ImpactStatus enumerations.ImpactStatus `protobuf:"varint,3,opt,name=impact_status,json=impactStatus,proto3,enum=autonomic.ext.telemetry.enumerations.impactStatus.ImpactStatus,oneof"`
}

type Enumeration_OccupancyStatus struct {
	OccupancyStatus enumerations.OccupancyStatus `protobuf:"varint,4,opt,name=occupancy_status,json=occupancyStatus,proto3,enum=autonomic.ext.telemetry.enumerations.occupancyStatus.OccupancyStatus,oneof"`
}

type Enumeration_SeatbeltStatus struct {
	SeatbeltStatus enumerations.SeatbeltStatus `protobuf:"varint,5,opt,name=seatbelt_status,json=seatbeltStatus,proto3,enum=autonomic.ext.telemetry.enumerations.seatbeltStatus.SeatbeltStatus,oneof"`
}

type Enumeration_IgnitionStatus struct {
	IgnitionStatus enumerations.IgnitionStatus `protobuf:"varint,6,opt,name=ignition_status,json=ignitionStatus,proto3,enum=autonomic.ext.telemetry.enumerations.ignitionStatus.IgnitionStatus,oneof"`
}

type Enumeration_OffOnStatus struct {
	OffOnStatus enumerations.OffOnStatus `protobuf:"varint,7,opt,name=off_on_status,json=offOnStatus,proto3,enum=autonomic.ext.telemetry.enumerations.offOnStatus.OffOnStatus,oneof"`
}

type Enumeration_CompassDirectionStatus struct {
	CompassDirectionStatus enumerations.CompassDirectionStatus `protobuf:"varint,8,opt,name=compass_direction_status,json=compassDirectionStatus,proto3,enum=autonomic.ext.telemetry.enumerations.compassDirectionStatus.CompassDirectionStatus,oneof"`
}

type Enumeration_PowerTakeOffStatus struct {
	PowerTakeOffStatus enumerations.PowerTakeOffStatus `protobuf:"varint,9,opt,name=power_take_off_status,json=powerTakeOffStatus,proto3,enum=autonomic.ext.telemetry.enumerations.powerTakeOffStatus.PowerTakeOffStatus,oneof"`
}

type Enumeration_MeasurementSystemStatus struct {
	MeasurementSystemStatus enumerations.MeasurementSystemStatus `protobuf:"varint,10,opt,name=measurement_system_status,json=measurementSystemStatus,proto3,enum=autonomic.ext.telemetry.enumerations.measurementSystemStatus.MeasurementSystemStatus,oneof"`
}

type Enumeration_AlarmStatus struct {
	AlarmStatus enumerations.AlarmStatus `protobuf:"varint,11,opt,name=alarm_status,json=alarmStatus,proto3,enum=autonomic.ext.telemetry.enumerations.alarmStatus.AlarmStatus,oneof"`
}

type Enumeration_TirePressureStatus struct {
	TirePressureStatus enumerations.TirePressureStatus `protobuf:"varint,12,opt,name=tire_pressure_status,json=tirePressureStatus,proto3,enum=autonomic.ext.telemetry.enumerations.tirePressureStatus.TirePressureStatus,oneof"`
}

type Enumeration_DoorStatus struct {
	DoorStatus enumerations.DoorStatus `protobuf:"varint,13,opt,name=door_status,json=doorStatus,proto3,enum=autonomic.ext.telemetry.enumerations.doorStatus.DoorStatus,oneof"`
}

type Enumeration_DoorLockStatus struct {
	DoorLockStatus enumerations.DoorLockStatus `protobuf:"varint,14,opt,name=door_lock_status,json=doorLockStatus,proto3,enum=autonomic.ext.telemetry.enumerations.doorLockStatus.DoorLockStatus,oneof"`
}

type Enumeration_DieselExhaustFilter struct {
	DieselExhaustFilter enumerations.DieselExhaustFilter `protobuf:"varint,15,opt,name=diesel_exhaust_filter,json=dieselExhaustFilter,proto3,enum=autonomic.ext.telemetry.enumerations.dieselExhaustFilter.DieselExhaustFilter,oneof"`
}

type Enumeration_DieselExhaustFilterRegeneration struct {
	DieselExhaustFilterRegeneration enumerations.DieselExhaustFilterRegeneration `protobuf:"varint,16,opt,name=diesel_exhaust_filter_regeneration,json=dieselExhaustFilterRegeneration,proto3,enum=autonomic.ext.telemetry.enumerations.dieselExhaustFilterRegeneration.DieselExhaustFilterRegeneration,oneof"`
}

type Enumeration_EngineStatus struct {
	EngineStatus enumerations.EngineStatus `protobuf:"varint,17,opt,name=engine_status,json=engineStatus,proto3,enum=autonomic.ext.telemetry.enumerations.engineStatus.EngineStatus,oneof"`
}

type Enumeration_ElectricMachineStatus struct {
	ElectricMachineStatus enumerations.ElectricMachineStatus `protobuf:"varint,18,opt,name=electric_machine_status,json=electricMachineStatus,proto3,enum=autonomic.ext.telemetry.enumerations.electricMachineStatus.ElectricMachineStatus,oneof"`
}

type Enumeration_EvBatteryChargeDisplayStatus struct {
	EvBatteryChargeDisplayStatus enumerations.EvBatteryChargeDisplayStatus `protobuf:"varint,19,opt,name=ev_battery_charge_display_status,json=evBatteryChargeDisplayStatus,proto3,enum=autonomic.ext.telemetry.enumerations.evBatteryChargeDisplayStatus.EvBatteryChargeDisplayStatus,oneof"`
}

type Enumeration_EvBatteryChargeStatus struct {
	EvBatteryChargeStatus enumerations.EvBatteryChargeStatus `protobuf:"varint,20,opt,name=ev_battery_charge_status,json=evBatteryChargeStatus,proto3,enum=autonomic.ext.telemetry.enumerations.evBatteryChargeStatus.EvBatteryChargeStatus,oneof"`
}

type Enumeration_EvDcPowerSourceStatus struct {
	EvDcPowerSourceStatus enumerations.EvDcPowerSourceStatus `protobuf:"varint,21,opt,name=ev_dc_power_source_status,json=evDcPowerSourceStatus,proto3,enum=autonomic.ext.telemetry.enumerations.evDcPowerSourceStatus.EvDcPowerSourceStatus,oneof"`
}

type Enumeration_EvOperationMode struct {
	EvOperationMode enumerations.EvOperationMode `protobuf:"varint,22,opt,name=ev_operation_mode,json=evOperationMode,proto3,enum=autonomic.ext.telemetry.enumerations.evOperationMode.EvOperationMode,oneof"`
}

type Enumeration_EvPlugChargerStatus struct {
	EvPlugChargerStatus enumerations.EvPlugChargerStatus `protobuf:"varint,23,opt,name=ev_plug_charger_status,json=evPlugChargerStatus,proto3,enum=autonomic.ext.telemetry.enumerations.evPlugChargerStatus.EvPlugChargerStatus,oneof"`
}

type Enumeration_HybridVehicleModeStatus struct {
	HybridVehicleModeStatus enumerations.HybridVehicleModeStatus `protobuf:"varint,24,opt,name=hybrid_vehicle_mode_status,json=hybridVehicleModeStatus,proto3,enum=autonomic.ext.telemetry.enumerations.hybridVehicleModeStatus.HybridVehicleModeStatus,oneof"`
}

type Enumeration_WaterInFuelStatus struct {
	WaterInFuelStatus enumerations.WaterInFuelStatus `protobuf:"varint,25,opt,name=water_in_fuel_status,json=waterInFuelStatus,proto3,enum=autonomic.ext.telemetry.enumerations.waterInFuelStatus.WaterInFuelStatus,oneof"`
}

type Enumeration_DieselExhaustFluidQualityStatus struct {
	DieselExhaustFluidQualityStatus enumerations.DieselExhaustFluidQualityStatus `protobuf:"varint,26,opt,name=diesel_exhaust_fluid_quality_status,json=dieselExhaustFluidQualityStatus,proto3,enum=autonomic.ext.telemetry.enumerations.dieselExhaustFluidQualityStatus.DieselExhaustFluidQualityStatus,oneof"`
}

type Enumeration_AcceleratorPedalStatus struct {
	AcceleratorPedalStatus enumerations.AcceleratorPedalStatus `protobuf:"varint,27,opt,name=accelerator_pedal_status,json=acceleratorPedalStatus,proto3,enum=autonomic.ext.telemetry.enumerations.acceleratorPedalStatus.AcceleratorPedalStatus,oneof"`
}

type Enumeration_DieselExhaustFluidLevelStatus struct {
	DieselExhaustFluidLevelStatus enumerations.DieselExhaustFluidLevelStatus `protobuf:"varint,28,opt,name=diesel_exhaust_fluid_level_status,json=dieselExhaustFluidLevelStatus,proto3,enum=autonomic.ext.telemetry.enumerations.dieselExhaustFluidLevelStatus.DieselExhaustFluidLevelStatus,oneof"`
}

type Enumeration_DieselExhaustFluidUltrasonicSensorStatus struct {
	DieselExhaustFluidUltrasonicSensorStatus enumerations.DieselExhaustFluidUltrasonicSensorStatus `protobuf:"varint,29,opt,name=diesel_exhaust_fluid_ultrasonic_sensor_status,json=dieselExhaustFluidUltrasonicSensorStatus,proto3,enum=autonomic.ext.telemetry.enumerations.dieselExhaustFluidUltrasonicSensorStatus.DieselExhaustFluidUltrasonicSensorStatus,oneof"`
}

type Enumeration_FuelPressureStatus struct {
	FuelPressureStatus enumerations.FuelPressureStatus `protobuf:"varint,30,opt,name=fuel_pressure_status,json=fuelPressureStatus,proto3,enum=autonomic.ext.telemetry.enumerations.fuelPressureStatus.FuelPressureStatus,oneof"`
}

type Enumeration_DieselExhaustFluidSystemStatus struct {
	DieselExhaustFluidSystemStatus enumerations.DieselExhaustFluidSystemStatus `protobuf:"varint,31,opt,name=diesel_exhaust_fluid_system_status,json=dieselExhaustFluidSystemStatus,proto3,enum=autonomic.ext.telemetry.enumerations.dieselExhaustFluidSystemStatus.DieselExhaustFluidSystemStatus,oneof"`
}

type Enumeration_DieselExhaustFilterAutomaticCleanStatus struct {
	DieselExhaustFilterAutomaticCleanStatus enumerations.DieselExhaustFilterAutomaticCleanStatus `protobuf:"varint,32,opt,name=diesel_exhaust_filter_automatic_clean_status,json=dieselExhaustFilterAutomaticCleanStatus,proto3,enum=autonomic.ext.telemetry.enumerations.dieselExhaustFilterAutomaticCleanStatus.DieselExhaustFilterAutomaticCleanStatus,oneof"`
}

type Enumeration_DieselExhaustFilterManualRegenerationStatus struct {
	DieselExhaustFilterManualRegenerationStatus enumerations.DieselExhaustFilterManualRegenerationStatus `protobuf:"varint,33,opt,name=diesel_exhaust_filter_manual_regeneration_status,json=dieselExhaustFilterManualRegenerationStatus,proto3,enum=autonomic.ext.telemetry.enumerations.dieselExhaustFilterManualRegenerationStatus.DieselExhaustFilterManualRegenerationStatus,oneof"`
}

type Enumeration_AntennaSource struct {
	AntennaSource enumerations.AntennaSource `protobuf:"varint,34,opt,name=antenna_source,json=antennaSource,proto3,enum=autonomic.ext.telemetry.enumerations.antennaSource.AntennaSource,oneof"`
}

type Enumeration_PowerSource struct {
	PowerSource enumerations.BatteryPowerSource `protobuf:"varint,35,opt,name=power_source,json=powerSource,proto3,enum=autonomic.ext.telemetry.enumerations.batteryPowerSource.BatteryPowerSource,oneof"`
}

type Enumeration_BatteryStatus struct {
	BatteryStatus enumerations.BatteryStatus `protobuf:"varint,36,opt,name=battery_status,json=batteryStatus,proto3,enum=autonomic.ext.telemetry.enumerations.batteryStatus.BatteryStatus,oneof"`
}

type Enumeration_EngineAutomaticShutdownStatus struct {
	EngineAutomaticShutdownStatus enumerations.EngineAutomaticShutdownStatus `protobuf:"varint,37,opt,name=engine_automatic_shutdown_status,json=engineAutomaticShutdownStatus,proto3,enum=autonomic.ext.telemetry.enumerations.engineAutomaticShutdownStatus.EngineAutomaticShutdownStatus,oneof"`
}

type Enumeration_VehicleAudioSource struct {
	VehicleAudioSource enumerations.VehicleAudioSource `protobuf:"varint,38,opt,name=vehicle_audio_source,json=vehicleAudioSource,proto3,enum=autonomic.ext.telemetry.enumerations.vehicleAudioSource.VehicleAudioSource,oneof"`
}

type Enumeration_MitigationBrakeStatus struct {
	MitigationBrakeStatus enumerations.MitigationBrakeStatus `protobuf:"varint,39,opt,name=mitigation_brake_status,json=mitigationBrakeStatus,proto3,enum=autonomic.ext.telemetry.enumerations.mitigationBrakeStatus.MitigationBrakeStatus,oneof"`
}

type Enumeration_ActiveInactiveStatus struct {
	ActiveInactiveStatus enumerations.ActiveInactiveStatus `protobuf:"varint,40,opt,name=active_inactive_status,json=activeInactiveStatus,proto3,enum=autonomic.ext.telemetry.enumerations.activeInactiveStatus.ActiveInactiveStatus,oneof"`
}

type Enumeration_VehicleLifeCycleMode struct {
	VehicleLifeCycleMode enumerations.VehicleLifeCycleMode `protobuf:"varint,41,opt,name=vehicle_life_cycle_mode,json=vehicleLifeCycleMode,proto3,enum=autonomic.ext.telemetry.enumerations.vehicleLifeCycleMode.VehicleLifeCycleMode,oneof"`
}

type Enumeration_XevPlugChargerStatus struct {
	XevPlugChargerStatus enumerations.XevPlugChargerStatus `protobuf:"varint,42,opt,name=xev_plug_charger_status,json=xevPlugChargerStatus,proto3,enum=autonomic.ext.telemetry.enumerations.xevPlugChargerStatus.XevPlugChargerStatus,oneof"`
}

type Enumeration_BatteryLoadStatus struct {
	BatteryLoadStatus enumerations.BatteryLoadStatus `protobuf:"varint,43,opt,name=battery_load_status,json=batteryLoadStatus,proto3,enum=autonomic.ext.telemetry.enumerations.batteryLoadStatus.BatteryLoadStatus,oneof"`
}

type Enumeration_BatteryPerformanceStatus struct {
	BatteryPerformanceStatus enumerations.BatteryPerformanceStatus `protobuf:"varint,44,opt,name=battery_performance_status,json=batteryPerformanceStatus,proto3,enum=autonomic.ext.telemetry.enumerations.batteryPerformanceStatus.BatteryPerformanceStatus,oneof"`
}

type Enumeration_RemoteStartDeviceStatus struct {
	RemoteStartDeviceStatus enumerations.RemoteStartDeviceStatus `protobuf:"varint,45,opt,name=remote_start_device_status,json=remoteStartDeviceStatus,proto3,enum=autonomic.ext.telemetry.enumerations.remoteStartDeviceStatus.RemoteStartDeviceStatus,oneof"`
}

type Enumeration_XevBatteryChargeDisplayStatus struct {
	XevBatteryChargeDisplayStatus enumerations.XevBatteryChargeDisplayStatus `protobuf:"varint,46,opt,name=xev_battery_charge_display_status,json=xevBatteryChargeDisplayStatus,proto3,enum=autonomic.ext.telemetry.enumerations.xevBatteryChargeDisplayStatus.XevBatteryChargeDisplayStatus,oneof"`
}

type Enumeration_XevChargeStationPowerType struct {
	XevChargeStationPowerType enumerations.XevChargeStationPowerType `protobuf:"varint,47,opt,name=xev_charge_station_power_type,json=xevChargeStationPowerType,proto3,enum=autonomic.ext.telemetry.enumerations.xevChargeStationPowerType.XevChargeStationPowerType,oneof"`
}

type Enumeration_XevChargeStationCommunicationStatus struct {
	XevChargeStationCommunicationStatus enumerations.XevChargeStationCommunicationStatus `protobuf:"varint,48,opt,name=xev_charge_station_communication_status,json=xevChargeStationCommunicationStatus,proto3,enum=autonomic.ext.telemetry.enumerations.xevChargeStationCommunicationStatus.XevChargeStationCommunicationStatus,oneof"`
}

func (*Enumeration_Error) isEnumeration_Value() {}

func (*Enumeration_GearPosition) isEnumeration_Value() {}

func (*Enumeration_ImpactStatus) isEnumeration_Value() {}

func (*Enumeration_OccupancyStatus) isEnumeration_Value() {}

func (*Enumeration_SeatbeltStatus) isEnumeration_Value() {}

func (*Enumeration_IgnitionStatus) isEnumeration_Value() {}

func (*Enumeration_OffOnStatus) isEnumeration_Value() {}

func (*Enumeration_CompassDirectionStatus) isEnumeration_Value() {}

func (*Enumeration_PowerTakeOffStatus) isEnumeration_Value() {}

func (*Enumeration_MeasurementSystemStatus) isEnumeration_Value() {}

func (*Enumeration_AlarmStatus) isEnumeration_Value() {}

func (*Enumeration_TirePressureStatus) isEnumeration_Value() {}

func (*Enumeration_DoorStatus) isEnumeration_Value() {}

func (*Enumeration_DoorLockStatus) isEnumeration_Value() {}

func (*Enumeration_DieselExhaustFilter) isEnumeration_Value() {}

func (*Enumeration_DieselExhaustFilterRegeneration) isEnumeration_Value() {}

func (*Enumeration_EngineStatus) isEnumeration_Value() {}

func (*Enumeration_ElectricMachineStatus) isEnumeration_Value() {}

func (*Enumeration_EvBatteryChargeDisplayStatus) isEnumeration_Value() {}

func (*Enumeration_EvBatteryChargeStatus) isEnumeration_Value() {}

func (*Enumeration_EvDcPowerSourceStatus) isEnumeration_Value() {}

func (*Enumeration_EvOperationMode) isEnumeration_Value() {}

func (*Enumeration_EvPlugChargerStatus) isEnumeration_Value() {}

func (*Enumeration_HybridVehicleModeStatus) isEnumeration_Value() {}

func (*Enumeration_WaterInFuelStatus) isEnumeration_Value() {}

func (*Enumeration_DieselExhaustFluidQualityStatus) isEnumeration_Value() {}

func (*Enumeration_AcceleratorPedalStatus) isEnumeration_Value() {}

func (*Enumeration_DieselExhaustFluidLevelStatus) isEnumeration_Value() {}

func (*Enumeration_DieselExhaustFluidUltrasonicSensorStatus) isEnumeration_Value() {}

func (*Enumeration_FuelPressureStatus) isEnumeration_Value() {}

func (*Enumeration_DieselExhaustFluidSystemStatus) isEnumeration_Value() {}

func (*Enumeration_DieselExhaustFilterAutomaticCleanStatus) isEnumeration_Value() {}

func (*Enumeration_DieselExhaustFilterManualRegenerationStatus) isEnumeration_Value() {}

func (*Enumeration_AntennaSource) isEnumeration_Value() {}

func (*Enumeration_PowerSource) isEnumeration_Value() {}

func (*Enumeration_BatteryStatus) isEnumeration_Value() {}

func (*Enumeration_EngineAutomaticShutdownStatus) isEnumeration_Value() {}

func (*Enumeration_VehicleAudioSource) isEnumeration_Value() {}

func (*Enumeration_MitigationBrakeStatus) isEnumeration_Value() {}

func (*Enumeration_ActiveInactiveStatus) isEnumeration_Value() {}

func (*Enumeration_VehicleLifeCycleMode) isEnumeration_Value() {}

func (*Enumeration_XevPlugChargerStatus) isEnumeration_Value() {}

func (*Enumeration_BatteryLoadStatus) isEnumeration_Value() {}

func (*Enumeration_BatteryPerformanceStatus) isEnumeration_Value() {}

func (*Enumeration_RemoteStartDeviceStatus) isEnumeration_Value() {}

func (*Enumeration_XevBatteryChargeDisplayStatus) isEnumeration_Value() {}

func (*Enumeration_XevChargeStationPowerType) isEnumeration_Value() {}

func (*Enumeration_XevChargeStationCommunicationStatus) isEnumeration_Value() {}

func (m *Enumeration) GetValue() isEnumeration_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

// Deprecated: Do not use.
func (m *Enumeration) GetError() enumerations.Error {
	if x, ok := m.GetValue().(*Enumeration_Error); ok {
		return x.Error
	}
	return enumerations.Error_UNKNOWN
}

func (m *Enumeration) GetGearPosition() enumerations.GearPosition {
	if x, ok := m.GetValue().(*Enumeration_GearPosition); ok {
		return x.GearPosition
	}
	return enumerations.GearPosition_UNKNOWN
}

func (m *Enumeration) GetImpactStatus() enumerations.ImpactStatus {
	if x, ok := m.GetValue().(*Enumeration_ImpactStatus); ok {
		return x.ImpactStatus
	}
	return enumerations.ImpactStatus_UNKNOWN
}

func (m *Enumeration) GetOccupancyStatus() enumerations.OccupancyStatus {
	if x, ok := m.GetValue().(*Enumeration_OccupancyStatus); ok {
		return x.OccupancyStatus
	}
	return enumerations.OccupancyStatus_UNKNOWN
}

func (m *Enumeration) GetSeatbeltStatus() enumerations.SeatbeltStatus {
	if x, ok := m.GetValue().(*Enumeration_SeatbeltStatus); ok {
		return x.SeatbeltStatus
	}
	return enumerations.SeatbeltStatus_UNKNOWN
}

func (m *Enumeration) GetIgnitionStatus() enumerations.IgnitionStatus {
	if x, ok := m.GetValue().(*Enumeration_IgnitionStatus); ok {
		return x.IgnitionStatus
	}
	return enumerations.IgnitionStatus_UNKNOWN
}

func (m *Enumeration) GetOffOnStatus() enumerations.OffOnStatus {
	if x, ok := m.GetValue().(*Enumeration_OffOnStatus); ok {
		return x.OffOnStatus
	}
	return enumerations.OffOnStatus_UNKNOWN
}

func (m *Enumeration) GetCompassDirectionStatus() enumerations.CompassDirectionStatus {
	if x, ok := m.GetValue().(*Enumeration_CompassDirectionStatus); ok {
		return x.CompassDirectionStatus
	}
	return enumerations.CompassDirectionStatus_UNKNOWN
}

func (m *Enumeration) GetPowerTakeOffStatus() enumerations.PowerTakeOffStatus {
	if x, ok := m.GetValue().(*Enumeration_PowerTakeOffStatus); ok {
		return x.PowerTakeOffStatus
	}
	return enumerations.PowerTakeOffStatus_UNKNOWN
}

func (m *Enumeration) GetMeasurementSystemStatus() enumerations.MeasurementSystemStatus {
	if x, ok := m.GetValue().(*Enumeration_MeasurementSystemStatus); ok {
		return x.MeasurementSystemStatus
	}
	return enumerations.MeasurementSystemStatus_UNKNOWN
}

func (m *Enumeration) GetAlarmStatus() enumerations.AlarmStatus {
	if x, ok := m.GetValue().(*Enumeration_AlarmStatus); ok {
		return x.AlarmStatus
	}
	return enumerations.AlarmStatus_UNKNOWN
}

func (m *Enumeration) GetTirePressureStatus() enumerations.TirePressureStatus {
	if x, ok := m.GetValue().(*Enumeration_TirePressureStatus); ok {
		return x.TirePressureStatus
	}
	return enumerations.TirePressureStatus_UNKNOWN
}

func (m *Enumeration) GetDoorStatus() enumerations.DoorStatus {
	if x, ok := m.GetValue().(*Enumeration_DoorStatus); ok {
		return x.DoorStatus
	}
	return enumerations.DoorStatus_UNKNOWN
}

func (m *Enumeration) GetDoorLockStatus() enumerations.DoorLockStatus {
	if x, ok := m.GetValue().(*Enumeration_DoorLockStatus); ok {
		return x.DoorLockStatus
	}
	return enumerations.DoorLockStatus_UNKNOWN
}

func (m *Enumeration) GetDieselExhaustFilter() enumerations.DieselExhaustFilter {
	if x, ok := m.GetValue().(*Enumeration_DieselExhaustFilter); ok {
		return x.DieselExhaustFilter
	}
	return enumerations.DieselExhaustFilter_UNKNOWN
}

// Deprecated: Do not use.
func (m *Enumeration) GetDieselExhaustFilterRegeneration() enumerations.DieselExhaustFilterRegeneration {
	if x, ok := m.GetValue().(*Enumeration_DieselExhaustFilterRegeneration); ok {
		return x.DieselExhaustFilterRegeneration
	}
	return enumerations.DieselExhaustFilterRegeneration_UNKNOWN
}

func (m *Enumeration) GetEngineStatus() enumerations.EngineStatus {
	if x, ok := m.GetValue().(*Enumeration_EngineStatus); ok {
		return x.EngineStatus
	}
	return enumerations.EngineStatus_UNKNOWN
}

// Deprecated: Do not use.
func (m *Enumeration) GetElectricMachineStatus() enumerations.ElectricMachineStatus {
	if x, ok := m.GetValue().(*Enumeration_ElectricMachineStatus); ok {
		return x.ElectricMachineStatus
	}
	return enumerations.ElectricMachineStatus_UNKNOWN
}

func (m *Enumeration) GetEvBatteryChargeDisplayStatus() enumerations.EvBatteryChargeDisplayStatus {
	if x, ok := m.GetValue().(*Enumeration_EvBatteryChargeDisplayStatus); ok {
		return x.EvBatteryChargeDisplayStatus
	}
	return enumerations.EvBatteryChargeDisplayStatus_UNKNOWN
}

// Deprecated: Do not use.
func (m *Enumeration) GetEvBatteryChargeStatus() enumerations.EvBatteryChargeStatus {
	if x, ok := m.GetValue().(*Enumeration_EvBatteryChargeStatus); ok {
		return x.EvBatteryChargeStatus
	}
	return enumerations.EvBatteryChargeStatus_UNKNOWN
}

// Deprecated: Do not use.
func (m *Enumeration) GetEvDcPowerSourceStatus() enumerations.EvDcPowerSourceStatus {
	if x, ok := m.GetValue().(*Enumeration_EvDcPowerSourceStatus); ok {
		return x.EvDcPowerSourceStatus
	}
	return enumerations.EvDcPowerSourceStatus_UNKNOWN
}

// Deprecated: Do not use.
func (m *Enumeration) GetEvOperationMode() enumerations.EvOperationMode {
	if x, ok := m.GetValue().(*Enumeration_EvOperationMode); ok {
		return x.EvOperationMode
	}
	return enumerations.EvOperationMode_UNKNOWN
}

// Deprecated: Do not use.
func (m *Enumeration) GetEvPlugChargerStatus() enumerations.EvPlugChargerStatus {
	if x, ok := m.GetValue().(*Enumeration_EvPlugChargerStatus); ok {
		return x.EvPlugChargerStatus
	}
	return enumerations.EvPlugChargerStatus_UNKNOWN
}

func (m *Enumeration) GetHybridVehicleModeStatus() enumerations.HybridVehicleModeStatus {
	if x, ok := m.GetValue().(*Enumeration_HybridVehicleModeStatus); ok {
		return x.HybridVehicleModeStatus
	}
	return enumerations.HybridVehicleModeStatus_UNKNOWN
}

func (m *Enumeration) GetWaterInFuelStatus() enumerations.WaterInFuelStatus {
	if x, ok := m.GetValue().(*Enumeration_WaterInFuelStatus); ok {
		return x.WaterInFuelStatus
	}
	return enumerations.WaterInFuelStatus_UNKNOWN
}

func (m *Enumeration) GetDieselExhaustFluidQualityStatus() enumerations.DieselExhaustFluidQualityStatus {
	if x, ok := m.GetValue().(*Enumeration_DieselExhaustFluidQualityStatus); ok {
		return x.DieselExhaustFluidQualityStatus
	}
	return enumerations.DieselExhaustFluidQualityStatus_UNKNOWN
}

func (m *Enumeration) GetAcceleratorPedalStatus() enumerations.AcceleratorPedalStatus {
	if x, ok := m.GetValue().(*Enumeration_AcceleratorPedalStatus); ok {
		return x.AcceleratorPedalStatus
	}
	return enumerations.AcceleratorPedalStatus_UNKNOWN
}

func (m *Enumeration) GetDieselExhaustFluidLevelStatus() enumerations.DieselExhaustFluidLevelStatus {
	if x, ok := m.GetValue().(*Enumeration_DieselExhaustFluidLevelStatus); ok {
		return x.DieselExhaustFluidLevelStatus
	}
	return enumerations.DieselExhaustFluidLevelStatus_UNKNOWN
}

// Deprecated: Do not use.
func (m *Enumeration) GetDieselExhaustFluidUltrasonicSensorStatus() enumerations.DieselExhaustFluidUltrasonicSensorStatus {
	if x, ok := m.GetValue().(*Enumeration_DieselExhaustFluidUltrasonicSensorStatus); ok {
		return x.DieselExhaustFluidUltrasonicSensorStatus
	}
	return enumerations.DieselExhaustFluidUltrasonicSensorStatus_UNKNOWN
}

func (m *Enumeration) GetFuelPressureStatus() enumerations.FuelPressureStatus {
	if x, ok := m.GetValue().(*Enumeration_FuelPressureStatus); ok {
		return x.FuelPressureStatus
	}
	return enumerations.FuelPressureStatus_UNKNOWN
}

func (m *Enumeration) GetDieselExhaustFluidSystemStatus() enumerations.DieselExhaustFluidSystemStatus {
	if x, ok := m.GetValue().(*Enumeration_DieselExhaustFluidSystemStatus); ok {
		return x.DieselExhaustFluidSystemStatus
	}
	return enumerations.DieselExhaustFluidSystemStatus_UNKNOWN
}

func (m *Enumeration) GetDieselExhaustFilterAutomaticCleanStatus() enumerations.DieselExhaustFilterAutomaticCleanStatus {
	if x, ok := m.GetValue().(*Enumeration_DieselExhaustFilterAutomaticCleanStatus); ok {
		return x.DieselExhaustFilterAutomaticCleanStatus
	}
	return enumerations.DieselExhaustFilterAutomaticCleanStatus_UNKNOWN
}

func (m *Enumeration) GetDieselExhaustFilterManualRegenerationStatus() enumerations.DieselExhaustFilterManualRegenerationStatus {
	if x, ok := m.GetValue().(*Enumeration_DieselExhaustFilterManualRegenerationStatus); ok {
		return x.DieselExhaustFilterManualRegenerationStatus
	}
	return enumerations.DieselExhaustFilterManualRegenerationStatus_UNKNOWN
}

func (m *Enumeration) GetAntennaSource() enumerations.AntennaSource {
	if x, ok := m.GetValue().(*Enumeration_AntennaSource); ok {
		return x.AntennaSource
	}
	return enumerations.AntennaSource_UNKNOWN
}

func (m *Enumeration) GetPowerSource() enumerations.BatteryPowerSource {
	if x, ok := m.GetValue().(*Enumeration_PowerSource); ok {
		return x.PowerSource
	}
	return enumerations.BatteryPowerSource_UNKNOWN
}

func (m *Enumeration) GetBatteryStatus() enumerations.BatteryStatus {
	if x, ok := m.GetValue().(*Enumeration_BatteryStatus); ok {
		return x.BatteryStatus
	}
	return enumerations.BatteryStatus_UNKNOWN
}

func (m *Enumeration) GetEngineAutomaticShutdownStatus() enumerations.EngineAutomaticShutdownStatus {
	if x, ok := m.GetValue().(*Enumeration_EngineAutomaticShutdownStatus); ok {
		return x.EngineAutomaticShutdownStatus
	}
	return enumerations.EngineAutomaticShutdownStatus_UNKNOWN
}

func (m *Enumeration) GetVehicleAudioSource() enumerations.VehicleAudioSource {
	if x, ok := m.GetValue().(*Enumeration_VehicleAudioSource); ok {
		return x.VehicleAudioSource
	}
	return enumerations.VehicleAudioSource_UNDEFINED
}

func (m *Enumeration) GetMitigationBrakeStatus() enumerations.MitigationBrakeStatus {
	if x, ok := m.GetValue().(*Enumeration_MitigationBrakeStatus); ok {
		return x.MitigationBrakeStatus
	}
	return enumerations.MitigationBrakeStatus_UNKNOWN
}

func (m *Enumeration) GetActiveInactiveStatus() enumerations.ActiveInactiveStatus {
	if x, ok := m.GetValue().(*Enumeration_ActiveInactiveStatus); ok {
		return x.ActiveInactiveStatus
	}
	return enumerations.ActiveInactiveStatus_UNDEFINED
}

func (m *Enumeration) GetVehicleLifeCycleMode() enumerations.VehicleLifeCycleMode {
	if x, ok := m.GetValue().(*Enumeration_VehicleLifeCycleMode); ok {
		return x.VehicleLifeCycleMode
	}
	return enumerations.VehicleLifeCycleMode_UNKNOWN
}

func (m *Enumeration) GetXevPlugChargerStatus() enumerations.XevPlugChargerStatus {
	if x, ok := m.GetValue().(*Enumeration_XevPlugChargerStatus); ok {
		return x.XevPlugChargerStatus
	}
	return enumerations.XevPlugChargerStatus_UNKNOWN
}

func (m *Enumeration) GetBatteryLoadStatus() enumerations.BatteryLoadStatus {
	if x, ok := m.GetValue().(*Enumeration_BatteryLoadStatus); ok {
		return x.BatteryLoadStatus
	}
	return enumerations.BatteryLoadStatus_UNKNOWN
}

func (m *Enumeration) GetBatteryPerformanceStatus() enumerations.BatteryPerformanceStatus {
	if x, ok := m.GetValue().(*Enumeration_BatteryPerformanceStatus); ok {
		return x.BatteryPerformanceStatus
	}
	return enumerations.BatteryPerformanceStatus_UNKNOWN
}

func (m *Enumeration) GetRemoteStartDeviceStatus() enumerations.RemoteStartDeviceStatus {
	if x, ok := m.GetValue().(*Enumeration_RemoteStartDeviceStatus); ok {
		return x.RemoteStartDeviceStatus
	}
	return enumerations.RemoteStartDeviceStatus_UNKNOWN
}

func (m *Enumeration) GetXevBatteryChargeDisplayStatus() enumerations.XevBatteryChargeDisplayStatus {
	if x, ok := m.GetValue().(*Enumeration_XevBatteryChargeDisplayStatus); ok {
		return x.XevBatteryChargeDisplayStatus
	}
	return enumerations.XevBatteryChargeDisplayStatus_UNKNOWN
}

func (m *Enumeration) GetXevChargeStationPowerType() enumerations.XevChargeStationPowerType {
	if x, ok := m.GetValue().(*Enumeration_XevChargeStationPowerType); ok {
		return x.XevChargeStationPowerType
	}
	return enumerations.XevChargeStationPowerType_UNKNOWN
}

func (m *Enumeration) GetXevChargeStationCommunicationStatus() enumerations.XevChargeStationCommunicationStatus {
	if x, ok := m.GetValue().(*Enumeration_XevChargeStationCommunicationStatus); ok {
		return x.XevChargeStationCommunicationStatus
	}
	return enumerations.XevChargeStationCommunicationStatus_UNKNOWN
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Enumeration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Enumeration_Error)(nil),
		(*Enumeration_GearPosition)(nil),
		(*Enumeration_ImpactStatus)(nil),
		(*Enumeration_OccupancyStatus)(nil),
		(*Enumeration_SeatbeltStatus)(nil),
		(*Enumeration_IgnitionStatus)(nil),
		(*Enumeration_OffOnStatus)(nil),
		(*Enumeration_CompassDirectionStatus)(nil),
		(*Enumeration_PowerTakeOffStatus)(nil),
		(*Enumeration_MeasurementSystemStatus)(nil),
		(*Enumeration_AlarmStatus)(nil),
		(*Enumeration_TirePressureStatus)(nil),
		(*Enumeration_DoorStatus)(nil),
		(*Enumeration_DoorLockStatus)(nil),
		(*Enumeration_DieselExhaustFilter)(nil),
		(*Enumeration_DieselExhaustFilterRegeneration)(nil),
		(*Enumeration_EngineStatus)(nil),
		(*Enumeration_ElectricMachineStatus)(nil),
		(*Enumeration_EvBatteryChargeDisplayStatus)(nil),
		(*Enumeration_EvBatteryChargeStatus)(nil),
		(*Enumeration_EvDcPowerSourceStatus)(nil),
		(*Enumeration_EvOperationMode)(nil),
		(*Enumeration_EvPlugChargerStatus)(nil),
		(*Enumeration_HybridVehicleModeStatus)(nil),
		(*Enumeration_WaterInFuelStatus)(nil),
		(*Enumeration_DieselExhaustFluidQualityStatus)(nil),
		(*Enumeration_AcceleratorPedalStatus)(nil),
		(*Enumeration_DieselExhaustFluidLevelStatus)(nil),
		(*Enumeration_DieselExhaustFluidUltrasonicSensorStatus)(nil),
		(*Enumeration_FuelPressureStatus)(nil),
		(*Enumeration_DieselExhaustFluidSystemStatus)(nil),
		(*Enumeration_DieselExhaustFilterAutomaticCleanStatus)(nil),
		(*Enumeration_DieselExhaustFilterManualRegenerationStatus)(nil),
		(*Enumeration_AntennaSource)(nil),
		(*Enumeration_PowerSource)(nil),
		(*Enumeration_BatteryStatus)(nil),
		(*Enumeration_EngineAutomaticShutdownStatus)(nil),
		(*Enumeration_VehicleAudioSource)(nil),
		(*Enumeration_MitigationBrakeStatus)(nil),
		(*Enumeration_ActiveInactiveStatus)(nil),
		(*Enumeration_VehicleLifeCycleMode)(nil),
		(*Enumeration_XevPlugChargerStatus)(nil),
		(*Enumeration_BatteryLoadStatus)(nil),
		(*Enumeration_BatteryPerformanceStatus)(nil),
		(*Enumeration_RemoteStartDeviceStatus)(nil),
		(*Enumeration_XevBatteryChargeDisplayStatus)(nil),
		(*Enumeration_XevChargeStationPowerType)(nil),
		(*Enumeration_XevChargeStationCommunicationStatus)(nil),
	}
}

func init() {
	proto.RegisterEnum("autonomic.ext.telemetry.Metric_MetricKind", Metric_MetricKind_name, Metric_MetricKind_value)
	proto.RegisterType((*Metric)(nil), "autonomic.ext.telemetry.Metric")
	proto.RegisterType((*ErrorMetric)(nil), "autonomic.ext.telemetry.ErrorMetric")
	proto.RegisterType((*Enumeration)(nil), "autonomic.ext.telemetry.Enumeration")
}

func init() {
	proto.RegisterFile("autonomic/ext/telemetry/metric.proto", fileDescriptor_b1f17bf0da8c6f10)
}

var fileDescriptor_b1f17bf0da8c6f10 = []byte{
	// 3001 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x5b, 0xcd, 0x93, 0xdc, 0x46,
	0x15, 0x1f, 0xd9, 0xf1, 0x57, 0xaf, 0x77, 0xbc, 0x6e, 0x7f, 0xac, 0xbc, 0x8e, 0xe3, 0xf5, 0x3a,
	0x89, 0x97, 0x24, 0x9e, 0x09, 0x43, 0x3e, 0x48, 0x02, 0x49, 0x66, 0x67, 0xc6, 0x9e, 0x8d, 0x77,
	0xbd, 0x1b, 0xed, 0xae, 0xe3, 0x40, 0x81, 0xaa, 0x57, 0xea, 0x99, 0x55, 0x56, 0x52, 0x0f, 0x52,
	0x6b, 0x3f, 0x0a, 0x28, 0xa8, 0xa2, 0x28, 0xa0, 0x38, 0x00, 0x05, 0x14, 0x27, 0x2e, 0xdc, 0xa8,
	0x82, 0x03, 0x07, 0x28, 0xfe, 0x01, 0xfe, 0x05, 0x8e, 0x1c, 0xf9, 0x1b, 0x38, 0x52, 0xfd, 0xa1,
	0x19, 0x69, 0x24, 0xcd, 0xf4, 0x28, 0x17, 0xef, 0xa8, 0xfb, 0xfd, 0x7e, 0xef, 0xf5, 0xeb, 0xd6,
	0xeb, 0xf7, 0xba, 0x65, 0xf0, 0x32, 0x8a, 0x28, 0xf1, 0x89, 0xe7, 0x58, 0x75, 0x7c, 0x42, 0xeb,
	0x14, 0xbb, 0xd8, 0xc3, 0x34, 0x38, 0xad, 0xb3, 0x7f, 0x1d, 0xab, 0x36, 0x08, 0x08, 0x25, 0x70,
	0x71, 0x28, 0x55, 0xc3, 0x27, 0xb4, 0x36, 0x94, 0x5a, 0x7a, 0x58, 0x04, 0xb7, 0x5c, 0xc7, 0x43,
	0x14, 0x9b, 0x16, 0xf1, 0x69, 0x40, 0x5c, 0xc1, 0xb3, 0xf4, 0x7a, 0xa1, 0x38, 0xf1, 0x7b, 0x4e,
	0x3f, 0x0a, 0x10, 0x75, 0x88, 0x2f, 0x85, 0x5f, 0x2b, 0x12, 0xb6, 0x9d, 0x90, 0x06, 0xce, 0x7e,
	0x94, 0x90, 0xbd, 0x57, 0x28, 0x4b, 0xe5, 0x18, 0x96, 0x5e, 0x2d, 0x14, 0x39, 0xf5, 0x91, 0xe7,
	0x58, 0xa1, 0x94, 0x5b, 0x2e, 0x92, 0xc3, 0x47, 0x52, 0xe2, 0x41, 0x91, 0x84, 0xe3, 0xdb, 0x8e,
	0x85, 0x28, 0x09, 0xa6, 0xa9, 0x1c, 0x90, 0xd0, 0x49, 0x58, 0x5f, 0x38, 0x09, 0xa1, 0xd3, 0xf7,
	0x91, 0x3b, 0x6d, 0x8c, 0x14, 0xf5, 0xa5, 0xc8, 0xfd, 0xb4, 0x88, 0x45, 0x3c, 0x8f, 0xf8, 0x75,
	0x82, 0x3d, 0xd3, 0x46, 0x14, 0xe5, 0x0f, 0x50, 0x0a, 0x05, 0xc8, 0xef, 0x63, 0x29, 0x71, 0xb7,
	0x4f, 0x48, 0xdf, 0xc5, 0x75, 0xfe, 0xb4, 0x1f, 0xf5, 0xea, 0xd4, 0xf1, 0x70, 0x48, 0x91, 0x37,
	0x90, 0x02, 0x6f, 0x16, 0xfa, 0xc8, 0x8f, 0x3c, 0x2c, 0x66, 0x31, 0xac, 0xe3, 0x20, 0x18, 0xba,
	0xe2, 0x5d, 0x25, 0x04, 0x72, 0x51, 0xe0, 0x99, 0x21, 0x45, 0x34, 0x8a, 0xa7, 0xa3, 0xa5, 0x04,
	0xb4, 0x88, 0x37, 0x40, 0x61, 0x68, 0xda, 0x4e, 0x80, 0x2d, 0xd6, 0x94, 0x26, 0xf9, 0x40, 0x89,
	0xc4, 0x26, 0x24, 0x30, 0x5d, 0x62, 0x1d, 0xa6, 0xc1, 0xef, 0xa8, 0x83, 0x53, 0xb8, 0xaf, 0x2b,
	0xe1, 0xfa, 0x18, 0x05, 0xe6, 0xd8, 0x7a, 0x78, 0x5f, 0x09, 0xe9, 0xf4, 0x7d, 0x27, 0x3b, 0x54,
	0x35, 0xad, 0x8e, 0x37, 0x40, 0x16, 0x4d, 0x23, 0xdb, 0x4a, 0x48, 0x0f, 0xa3, 0x30, 0x0a, 0xb0,
	0x87, 0x7d, 0x6a, 0x86, 0xa7, 0x21, 0xc5, 0x5e, 0x19, 0x57, 0x13, 0xcb, 0x8a, 0x06, 0xc8, 0xb7,
	0x4e, 0xd3, 0x60, 0xb5, 0x55, 0x42, 0x7a, 0xbd, 0xf1, 0x51, 0x7f, 0xac, 0x04, 0x1c, 0x90, 0x63,
	0x1c, 0x98, 0x14, 0x1d, 0x62, 0x93, 0xf4, 0x7a, 0x69, 0x06, 0x35, 0x9f, 0x87, 0x18, 0xd1, 0x7d,
	0xec, 0x8e, 0x79, 0xee, 0x23, 0x25, 0x2c, 0x75, 0x02, 0x6c, 0x0e, 0x02, 0x1c, 0x32, 0xff, 0x95,
	0x31, 0xdf, 0x76, 0x70, 0x88, 0x5d, 0x13, 0x9f, 0x1c, 0xa0, 0x28, 0xa4, 0x66, 0xcf, 0x71, 0x29,
	0x8e, 0xdf, 0xaf, 0xcd, 0xf2, 0x0c, 0x66, 0x80, 0xfb, 0xd8, 0xc7, 0xa9, 0xd8, 0xab, 0xb6, 0x8a,
	0xb0, 0xdf, 0x77, 0xfc, 0xb1, 0xa1, 0xac, 0xa9, 0x21, 0x5d, 0x6c, 0xb1, 0xfd, 0xc5, 0xf4, 0x90,
	0x75, 0x90, 0xe1, 0x78, 0xa2, 0xc6, 0x71, 0x64, 0xee, 0x23, 0x4a, 0x71, 0x70, 0x6a, 0x5a, 0x07,
	0x28, 0xe8, 0x63, 0xd3, 0x76, 0xc2, 0x81, 0x8b, 0x4e, 0xcb, 0x04, 0x90, 0x2c, 0x59, 0x89, 0x77,
	0x03, 0x1f, 0x99, 0xb6, 0x65, 0x8a, 0x55, 0x16, 0x92, 0x28, 0xb0, 0xc6, 0x58, 0xbe, 0xa1, 0xca,
	0x42, 0x06, 0xf2, 0xc9, 0xf4, 0x88, 0x1d, 0x47, 0xe5, 0xa6, 0x2a, 0x7a, 0xe0, 0x46, 0x7d, 0x39,
	0x8a, 0xb1, 0x90, 0xd4, 0x51, 0xa2, 0x38, 0x38, 0xdd, 0x0f, 0x1c, 0xdb, 0x3c, 0xc2, 0x07, 0x8e,
	0xe5, 0x62, 0x6e, 0x42, 0x99, 0xf5, 0x7e, 0x8c, 0xd8, 0xe2, 0x72, 0x7c, 0xb3, 0x17, 0x61, 0x37,
	0x4d, 0x50, 0x6e, 0xb5, 0xba, 0x91, 0x63, 0xe7, 0xc6, 0x1c, 0xb5, 0x29, 0x46, 0x96, 0x85, 0x5d,
	0xf6, 0x44, 0x02, 0x73, 0x80, 0x6d, 0x34, 0x66, 0xd3, 0xd3, 0xf2, 0x36, 0x7d, 0x2f, 0x42, 0xae,
	0x43, 0xc7, 0xd6, 0xdd, 0x46, 0x79, 0x3e, 0x17, 0x1f, 0x8d, 0x7b, 0xec, 0x79, 0x79, 0xb6, 0xc8,
	0xa5, 0x01, 0x0a, 0x89, 0xef, 0x58, 0x66, 0x88, 0xfd, 0x70, 0x7c, 0x9b, 0x52, 0x9b, 0x4c, 0x3e,
	0x87, 0xf9, 0xc1, 0xeb, 0xb3, 0x2f, 0x11, 0x7a, 0x18, 0xd4, 0x43, 0xd4, 0xb1, 0x4c, 0xcb, 0xc5,
	0x68, 0x2c, 0xa8, 0x7f, 0xfb, 0x4b, 0x10, 0x7b, 0xc8, 0x8f, 0x90, 0x9b, 0x0a, 0x6d, 0x69, 0xf2,
	0xf7, 0xd4, 0xd6, 0x8c, 0x4f, 0xb1, 0xef, 0x23, 0xf9, 0x36, 0xcf, 0xe4, 0xb1, 0x38, 0x9c, 0x24,
	0xc3, 0xc1, 0x4c, 0xba, 0x63, 0x82, 0x32, 0xa1, 0x51, 0x04, 0xe6, 0x91, 0x77, 0xc3, 0x83, 0x88,
	0xda, 0xe4, 0xd8, 0x2f, 0x33, 0xf5, 0x71, 0x1c, 0x40, 0x91, 0xed, 0x90, 0xf4, 0x40, 0x9a, 0x8a,
	0x2f, 0x1e, 0x75, 0x8e, 0xb0, 0xe9, 0xf8, 0xf2, 0x47, 0x89, 0xfd, 0xc2, 0x73, 0xa8, 0xd3, 0x17,
	0xb3, 0xb8, 0x1f, 0xb0, 0xfd, 0xbb, 0x04, 0x47, 0x3c, 0x0e, 0xd7, 0xe9, 0x61, 0xd3, 0x3a, 0x8d,
	0x43, 0xdb, 0x4c, 0x1c, 0x27, 0x13, 0xc3, 0xeb, 0x87, 0x33, 0xcd, 0xab, 0x4b, 0x90, 0x5d, 0x26,
	0x3c, 0x0f, 0x17, 0x16, 0x0e, 0x7a, 0x24, 0xf0, 0x90, 0x3f, 0xbe, 0xcd, 0xa8, 0xd1, 0x04, 0xd8,
	0x23, 0x94, 0x23, 0x03, 0x6a, 0xda, 0xf8, 0xc8, 0x19, 0xa7, 0x31, 0x94, 0x3d, 0x92, 0xd8, 0x31,
	0xd9, 0x0c, 0xb1, 0x8a, 0x22, 0xf2, 0x59, 0x25, 0x94, 0x79, 0xeb, 0xba, 0x65, 0x39, 0x65, 0xea,
	0x76, 0x3a, 0xc0, 0x33, 0x85, 0xd7, 0x13, 0xb5, 0x24, 0x61, 0xe5, 0x17, 0x0b, 0xe0, 0xfc, 0x26,
	0xaf, 0x78, 0xe1, 0x87, 0xe0, 0xbc, 0x28, 0xbb, 0x74, 0x6d, 0x59, 0x5b, 0x9d, 0x6b, 0xbc, 0x5a,
	0x2b, 0x28, 0x7e, 0x6b, 0xb2, 0x3a, 0xdb, 0xe1, 0x7f, 0x0c, 0x89, 0x82, 0x6f, 0x81, 0x17, 0x28,
	0xea, 0x87, 0xfa, 0xd9, 0xe5, 0xb3, 0xab, 0x73, 0x8d, 0xe5, 0x42, 0x34, 0xab, 0xda, 0x76, 0x51,
	0xdf, 0xe0, 0xd2, 0xf0, 0x3d, 0x00, 0xc4, 0x4c, 0xb0, 0x52, 0x4b, 0x7f, 0x81, 0x6b, 0x5e, 0xaa,
	0x89, 0x3a, 0xac, 0x16, 0xd7, 0x61, 0xb5, 0xdd, 0xb8, 0x0e, 0x33, 0x2e, 0x71, 0x69, 0xf6, 0x0c,
	0xdf, 0x06, 0x17, 0xb1, 0x6f, 0x0b, 0xe0, 0xb9, 0xa9, 0xc0, 0x0b, 0xd8, 0xb7, 0x39, 0xec, 0x09,
	0x98, 0x13, 0x35, 0xbe, 0x79, 0xe8, 0xf8, 0xb6, 0x7e, 0x7e, 0x59, 0x5b, 0xad, 0x36, 0x5e, 0x2b,
	0x34, 0x57, 0x78, 0x47, 0xfe, 0x79, 0xe2, 0xf8, 0xb6, 0x01, 0xbc, 0xe1, 0x6f, 0x78, 0x17, 0x80,
	0x7d, 0x42, 0x5c, 0xf3, 0x08, 0xb9, 0x11, 0xd6, 0x2f, 0x2c, 0x6b, 0xab, 0x17, 0xbb, 0x15, 0xe3,
	0x12, 0x6b, 0x7b, 0xc6, 0x9a, 0xe0, 0x3d, 0x30, 0xe7, 0xf8, 0xf4, 0x9d, 0xb7, 0xa4, 0xc4, 0xc5,
	0x65, 0x6d, 0xf5, 0x6c, 0xb7, 0x62, 0x00, 0xde, 0x28, 0x44, 0xee, 0x83, 0xcb, 0x36, 0x89, 0xf6,
	0x5d, 0x2c, 0x65, 0x2e, 0x2d, 0x6b, 0xab, 0x5a, 0xb7, 0x62, 0xcc, 0x89, 0xd6, 0xa1, 0x10, 0x2b,
	0xfe, 0xfd, 0xbe, 0x14, 0x02, 0xcb, 0xda, 0xea, 0x25, 0x26, 0x24, 0x5a, 0x85, 0xd0, 0x27, 0xa0,
	0x1a, 0x57, 0x54, 0x52, 0xec, 0x32, 0xf7, 0xcb, 0xbd, 0xc2, 0xd1, 0x6d, 0x4b, 0xf1, 0x6e, 0xc5,
	0x98, 0x8f, 0xa1, 0x82, 0xeb, 0x19, 0x80, 0xc9, 0xf3, 0x06, 0xc9, 0x37, 0xc7, 0xf9, 0x5e, 0x29,
	0xe4, 0x6b, 0x27, 0x20, 0xdd, 0x8a, 0x71, 0x35, 0x49, 0x21, 0x78, 0x37, 0xc1, 0x25, 0x9b, 0x5a,
	0x92, 0x6e, 0x9e, 0xd3, 0xd5, 0x26, 0xd0, 0xa1, 0xbe, 0x4f, 0x42, 0xea, 0x58, 0xbb, 0x01, 0x77,
	0x46, 0x8b, 0xd8, 0xb8, 0x5b, 0x31, 0x2e, 0xda, 0xd4, 0x12, 0x74, 0x1d, 0x00, 0xd8, 0xc2, 0x97,
	0x7c, 0x55, 0xce, 0xf7, 0x72, 0x21, 0x5f, 0x67, 0xf4, 0x8e, 0xb0, 0x69, 0x62, 0x48, 0x41, 0xf3,
	0x18, 0xcc, 0x1f, 0x60, 0x64, 0x8f, 0xfc, 0x7b, 0x85, 0x33, 0x15, 0xaf, 0xe2, 0xae, 0x90, 0xee,
	0x56, 0x8c, 0xcb, 0x12, 0x28, 0x88, 0x9a, 0x60, 0x2e, 0x1c, 0x60, 0x6c, 0x4b, 0x9a, 0x05, 0x4e,
	0xf3, 0x52, 0x21, 0xcd, 0x0e, 0x93, 0x65, 0xeb, 0x81, 0x83, 0x04, 0xc5, 0xe7, 0x60, 0x81, 0x1e,
	0x04, 0x18, 0x9b, 0xe8, 0xc4, 0x09, 0x25, 0xcf, 0x55, 0xce, 0xf3, 0xb0, 0x90, 0x67, 0x97, 0x01,
	0x9a, 0x27, 0x4e, 0xb8, 0xc3, 0x33, 0x9d, 0x1d, 0x8a, 0x28, 0xf3, 0x53, 0x95, 0xc6, 0xed, 0xb1,
	0xf3, 0xaf, 0x0c, 0xcf, 0x6a, 0x24, 0x33, 0xe4, 0xcc, 0x2b, 0x85, 0xcc, 0xeb, 0xb1, 0x3c, 0xa3,
	0x1b, 0x82, 0x05, 0xdd, 0x00, 0xdc, 0x4a, 0xc4, 0x99, 0x01, 0xb2, 0x0e, 0xd1, 0xb0, 0x80, 0xd0,
	0x6f, 0x72, 0xe2, 0x7a, 0xf1, 0x5c, 0x1c, 0xad, 0x09, 0xe0, 0xb6, 0xc0, 0xed, 0x70, 0xd8, 0xda,
	0x19, 0x9d, 0xad, 0xfd, 0x9b, 0x38, 0xb7, 0x17, 0xf6, 0xc1, 0xcd, 0x64, 0x64, 0xc3, 0x6e, 0x9c,
	0x2e, 0xea, 0x8b, 0x5c, 0xdd, 0x1b, 0xd3, 0xd5, 0xb5, 0xb0, 0xeb, 0xa6, 0x74, 0x5d, 0xc3, 0xd9,
	0x2e, 0xf8, 0x05, 0x58, 0x4c, 0x0e, 0x2d, 0x20, 0xfb, 0xc3, 0x81, 0xe9, 0x53, 0xe6, 0x62, 0x34,
	0x30, 0x86, 0x4a, 0xa9, 0xba, 0x8e, 0x73, 0xfa, 0xa0, 0x03, 0x6e, 0xe6, 0xd6, 0x85, 0x58, 0xbf,
	0x35, 0x4d, 0x95, 0x84, 0x6d, 0x0a, 0x14, 0x9f, 0xf6, 0xa1, 0xaa, 0x9c, 0x3e, 0xf8, 0x18, 0xcc,
	0xf1, 0xd3, 0x29, 0x39, 0xf9, 0xb7, 0xa7, 0xbd, 0x2f, 0x4c, 0x56, 0x84, 0x3e, 0xb6, 0x48, 0x39,
	0x54, 0x4c, 0xfd, 0xfb, 0xe0, 0x1c, 0x3f, 0x39, 0xd3, 0x5f, 0xcc, 0x5d, 0x3f, 0xe2, 0x70, 0xad,
	0x86, 0x7d, 0xea, 0xd0, 0xd3, 0x9a, 0xc1, 0x24, 0xbb, 0x15, 0x43, 0x40, 0xe0, 0x77, 0xc0, 0x8d,
	0xb1, 0x63, 0x52, 0x69, 0xce, 0x1d, 0xce, 0xf5, 0xa0, 0xd0, 0x9c, 0x96, 0x40, 0xb5, 0x04, 0x88,
	0x4d, 0x9d, 0x95, 0x6a, 0x89, 0xdf, 0x9f, 0x6b, 0xa9, 0x63, 0x55, 0x49, 0xfe, 0xd2, 0x94, 0x5d,
	0xad, 0x95, 0xc4, 0x74, 0x2b, 0x06, 0x4c, 0x91, 0x08, 0xea, 0xf7, 0xc0, 0x05, 0x11, 0xfc, 0x43,
	0xfd, 0x0c, 0xdf, 0xe6, 0xee, 0x4e, 0xd9, 0x37, 0x8c, 0x58, 0x1e, 0x7e, 0x0c, 0x2e, 0xc6, 0xe7,
	0x91, 0xba, 0x9d, 0x1b, 0x45, 0xa5, 0xcf, 0x08, 0xf6, 0xf8, 0xa1, 0xe5, 0x16, 0xf6, 0xda, 0x88,
	0x22, 0xe3, 0x02, 0x11, 0x3f, 0x56, 0xb6, 0x00, 0x18, 0xed, 0x42, 0xf0, 0x36, 0x58, 0xdc, 0xec,
	0xec, 0x1a, 0xeb, 0x2d, 0xf3, 0xc9, 0xfa, 0xd3, 0xb6, 0xb9, 0xf7, 0x74, 0x67, 0xbb, 0xd3, 0x5a,
	0x7f, 0xb4, 0xde, 0x69, 0x2f, 0x54, 0xe0, 0x25, 0x70, 0xee, 0x71, 0x73, 0xef, 0x71, 0x67, 0x41,
	0x63, 0x3f, 0xdb, 0x9d, 0x8d, 0xdd, 0xe6, 0xc2, 0x19, 0x58, 0x05, 0xa0, 0xb5, 0xb7, 0xb9, 0xb7,
	0xd1, 0xdc, 0x5d, 0x7f, 0xd6, 0x59, 0x38, 0xbb, 0x76, 0x01, 0x9c, 0xe3, 0xae, 0xf9, 0xe4, 0x85,
	0x8b, 0x4b, 0x0b, 0xb7, 0x57, 0x7e, 0x7f, 0x06, 0xcc, 0x25, 0x26, 0x1c, 0xee, 0x81, 0xf9, 0xe3,
	0x43, 0x53, 0x2c, 0x17, 0x1f, 0x79, 0x98, 0xe7, 0x05, 0xd5, 0xc6, 0x57, 0x0b, 0x87, 0x9c, 0xcc,
	0x40, 0x6a, 0xe2, 0x10, 0x94, 0xf3, 0x19, 0x73, 0xc7, 0x87, 0xfc, 0xc7, 0x53, 0xe4, 0x61, 0xa8,
	0x33, 0x1f, 0x86, 0x21, 0xea, 0x63, 0xfd, 0x0c, 0xdb, 0xc4, 0x8c, 0xf8, 0x11, 0x6e, 0x81, 0xf3,
	0x22, 0xcb, 0xd6, 0xcf, 0x72, 0x4d, 0xef, 0xce, 0xac, 0x69, 0x87, 0xc3, 0x0d, 0x49, 0x03, 0xdb,
	0x60, 0x5e, 0x1e, 0x47, 0x88, 0x59, 0x90, 0xf9, 0xc5, 0xd4, 0x49, 0xbb, 0x2c, 0x50, 0xe2, 0x69,
	0xe5, 0x1f, 0x6f, 0x83, 0xb9, 0xc4, 0xc6, 0x01, 0x37, 0xc1, 0x39, 0xae, 0xb2, 0xb4, 0x3f, 0xe4,
	0x1b, 0x2a, 0x58, 0x60, 0x0f, 0xcc, 0xa7, 0xce, 0x42, 0xb9, 0x57, 0xaa, 0x8d, 0x8f, 0xd4, 0x68,
	0x19, 0x34, 0xde, 0xc4, 0x6b, 0x8f, 0x13, 0x0f, 0x6c, 0x67, 0x4a, 0x76, 0x32, 0x3d, 0xa9, 0xd3,
	0x4f, 0xe9, 0x64, 0x45, 0x3d, 0x02, 0x2a, 0x02, 0x56, 0x6d, 0x3d, 0xf1, 0xc0, 0xf4, 0x24, 0x3b,
	0x61, 0x00, 0x16, 0xc6, 0x4f, 0x39, 0xb9, 0xdf, 0xab, 0x8d, 0x8e, 0x9a, 0xaa, 0x21, 0x5a, 0x6a,
	0xdb, 0x4a, 0x3f, 0x77, 0x2b, 0xc6, 0x95, 0x31, 0x11, 0xe8, 0x83, 0x2b, 0x63, 0x27, 0x94, 0x3c,
	0x23, 0xac, 0x36, 0x5a, 0x6a, 0x2a, 0x63, 0xb0, 0xd4, 0xb8, 0x93, 0x7a, 0x64, 0x1b, 0x5f, 0x5a,
	0x80, 0xe9, 0x1b, 0x3b, 0x85, 0x96, 0x79, 0xa4, 0xa2, 0xbe, 0x18, 0x1c, 0xfb, 0x33, 0xf5, 0xc8,
	0x37, 0xda, 0x54, 0x0b, 0xb4, 0xc0, 0x3c, 0xe9, 0xf5, 0xcc, 0x91, 0xb6, 0x0b, 0x5c, 0xdb, 0x37,
	0x15, 0x1d, 0xda, 0xeb, 0x6d, 0xc5, 0xaa, 0xb6, 0x46, 0xbf, 0x59, 0xf6, 0x98, 0xe8, 0x82, 0xbf,
	0xd2, 0x80, 0x5e, 0x74, 0x9f, 0xc0, 0x13, 0xd7, 0x6a, 0x63, 0x47, 0x4d, 0xa1, 0x64, 0x69, 0xc7,
	0x24, 0x52, 0x77, 0x2b, 0xb7, 0x99, 0xed, 0xf6, 0xf9, 0x00, 0xf8, 0x63, 0x0d, 0xdc, 0xc8, 0x3d,
	0xbb, 0xe6, 0x39, 0x72, 0xb5, 0xf1, 0x44, 0xcd, 0x1c, 0x4e, 0xb1, 0x8b, 0x0e, 0xf1, 0x56, 0xaf,
	0x27, 0x4d, 0xd9, 0xce, 0x34, 0xb1, 0x88, 0x9f, 0x15, 0x84, 0xbf, 0xd5, 0xc0, 0xad, 0xc2, 0xa3,
	0x7f, 0x9e, 0x85, 0x57, 0x1b, 0x7b, 0x6a, 0x66, 0x24, 0x68, 0x76, 0x38, 0x8b, 0xb4, 0x65, 0x33,
	0xbf, 0xbd, 0x5b, 0x31, 0x16, 0x0b, 0x20, 0x70, 0x1f, 0x5c, 0x4e, 0x5e, 0x19, 0xf1, 0xb4, 0x5c,
	0x79, 0x39, 0x70, 0xa4, 0xd4, 0xdd, 0x1c, 0xfd, 0x66, 0xcb, 0x21, 0xd1, 0x05, 0x7f, 0x04, 0xae,
	0xe7, 0x9d, 0xdc, 0xf3, 0x92, 0x42, 0xd9, 0xf5, 0x8c, 0x61, 0x5b, 0x12, 0x48, 0x95, 0xbb, 0x99,
	0x26, 0xe6, 0xfa, 0xac, 0x20, 0xfc, 0x2e, 0x98, 0x4b, 0x5c, 0x2e, 0xf1, 0x5a, 0xa1, 0xda, 0xf8,
	0x40, 0x4d, 0x2f, 0x03, 0x4a, 0x7d, 0xed, 0xe1, 0x4f, 0x96, 0xc2, 0x8c, 0x3a, 0x20, 0x01, 0x0b,
	0xe3, 0x37, 0x5f, 0xbc, 0x80, 0x50, 0x7e, 0x8b, 0x19, 0x7a, 0x83, 0x58, 0x87, 0x09, 0x45, 0xa3,
	0x47, 0xf6, 0x16, 0xa7, 0x05, 0xe0, 0x4f, 0x34, 0x70, 0x23, 0xf7, 0xd4, 0x8e, 0x57, 0x1b, 0xd5,
	0xc6, 0xa6, 0xa2, 0x5a, 0x4e, 0xd1, 0x11, 0x0c, 0x8f, 0xc4, 0x65, 0x48, 0x3b, 0xdb, 0xc6, 0xd2,
	0xa3, 0x1c, 0x51, 0xf8, 0x4f, 0x0d, 0xac, 0x4c, 0xbf, 0x0f, 0xe1, 0x95, 0x4b, 0xb5, 0x81, 0x4b,
	0x9b, 0x64, 0x24, 0x2f, 0x57, 0xda, 0x93, 0xfb, 0xe5, 0x86, 0x78, 0x77, 0x0a, 0x0d, 0xdb, 0xc2,
	0x52, 0x57, 0x2f, 0xbc, 0x2c, 0x52, 0xde, 0xc2, 0x04, 0x54, 0x4e, 0x56, 0x27, 0xf1, 0xc0, 0xb6,
	0xb0, 0x64, 0x27, 0x8b, 0x84, 0x8b, 0x05, 0x37, 0x35, 0xbc, 0x5e, 0xaa, 0x36, 0x3e, 0x55, 0x54,
	0x99, 0xcd, 0xc1, 0x99, 0xee, 0xbc, 0x56, 0xe9, 0x83, 0x1b, 0xb9, 0x10, 0xf8, 0x67, 0x0d, 0x2c,
	0x4f, 0x3b, 0xd2, 0xd1, 0xaf, 0x71, 0xd3, 0x4c, 0x45, 0xd3, 0x86, 0x45, 0x0f, 0xe7, 0x6a, 0x0b,
	0xaa, 0xd8, 0xc2, 0x09, 0x9d, 0xdd, 0x8a, 0xf1, 0xe2, 0x24, 0x30, 0xfc, 0xb5, 0x06, 0xf4, 0xa2,
	0x6b, 0x25, 0xfd, 0xfa, 0x4c, 0xee, 0x4b, 0xab, 0xc9, 0x37, 0x6e, 0xcc, 0x7d, 0x79, 0x9d, 0xf0,
	0x37, 0x1a, 0xaf, 0x54, 0xf3, 0x2f, 0xa9, 0xf4, 0x1b, 0xb3, 0xd9, 0xd4, 0xb6, 0xf8, 0xee, 0x21,
	0x72, 0xcd, 0xa1, 0x4d, 0x39, 0xad, 0x23, 0x9b, 0x72, 0x3a, 0xe1, 0x31, 0xb8, 0x9a, 0xb9, 0xf1,
	0xe2, 0x45, 0xb3, 0x72, 0xa2, 0x84, 0x8f, 0xb6, 0x62, 0xf4, 0x26, 0xb1, 0x71, 0xad, 0x93, 0x7e,
	0x96, 0xea, 0xaf, 0x8c, 0x89, 0xc1, 0x9f, 0x6b, 0xbc, 0x88, 0xce, 0x39, 0xce, 0xe5, 0x45, 0xb4,
	0x72, 0x1c, 0xc2, 0x47, 0xdb, 0x6e, 0xd4, 0x17, 0x7e, 0x0e, 0x86, 0x7e, 0xc8, 0xb4, 0x8d, 0xaa,
	0xec, 0x4c, 0x17, 0xfc, 0x9d, 0x06, 0x96, 0x8a, 0x6f, 0xdd, 0x78, 0xa5, 0xad, 0xbc, 0xbd, 0x0a,
	0x9e, 0x67, 0x82, 0x86, 0x0d, 0x54, 0x9a, 0xd4, 0xcd, 0x6f, 0x67, 0xdb, 0x6b, 0x01, 0x04, 0xfe,
	0x00, 0x5c, 0xcf, 0xbb, 0xc4, 0xe3, 0xe5, 0x78, 0xb5, 0xb1, 0xae, 0x66, 0x0f, 0x67, 0x58, 0xf7,
	0x1f, 0x45, 0x58, 0x9e, 0x29, 0xd4, 0x3e, 0x1b, 0x6f, 0xe9, 0x56, 0x8c, 0xab, 0x19, 0x31, 0xf8,
	0x77, 0x0d, 0xdc, 0x57, 0xb8, 0x6e, 0xd3, 0x97, 0xca, 0x47, 0x68, 0x46, 0xf7, 0xa9, 0x60, 0x8b,
	0x37, 0xaf, 0xc9, 0xfd, 0xd9, 0xe8, 0x9c, 0x11, 0xe1, 0xf9, 0x63, 0xd1, 0x5d, 0x23, 0x3f, 0x69,
	0x50, 0xce, 0x1f, 0x13, 0x2c, 0xdb, 0x8c, 0x24, 0x4e, 0x56, 0x72, 0x9b, 0x59, 0xfe, 0x98, 0x0f,
	0x80, 0x7f, 0xd5, 0xc0, 0xbd, 0xa9, 0x17, 0x8d, 0xfc, 0x04, 0xa3, 0xda, 0x40, 0x65, 0xfd, 0xb8,
	0xc1, 0xb8, 0x0a, 0xbd, 0x98, 0xe8, 0xed, 0x56, 0x8c, 0x3b, 0x13, 0xe1, 0xf0, 0x3f, 0x1a, 0x78,
	0x38, 0xd3, 0x55, 0x26, 0x3f, 0x31, 0xa9, 0x36, 0x8e, 0xcb, 0xda, 0xbe, 0x37, 0xe4, 0x1d, 0x9d,
	0x1b, 0xe6, 0x0e, 0x23, 0x5f, 0x50, 0xbe, 0xda, 0xab, 0xaa, 0xc4, 0x2c, 0xa7, 0xcc, 0xbb, 0x50,
	0xe5, 0x67, 0x33, 0xca, 0x39, 0x25, 0x63, 0x18, 0xcb, 0x29, 0x1f, 0x65, 0x9a, 0x58, 0x4e, 0x99,
	0x15, 0x84, 0x7f, 0xcb, 0x49, 0x7e, 0xb2, 0xd7, 0xeb, 0xfa, 0x5d, 0x6e, 0x8f, 0x55, 0xd6, 0xad,
	0xa9, 0xf4, 0xbe, 0x3d, 0xb1, 0xbb, 0x5b, 0x31, 0x5e, 0x9a, 0x4c, 0x00, 0xff, 0xad, 0x81, 0x37,
	0x66, 0xb9, 0x45, 0xd6, 0x97, 0xb9, 0xf5, 0x51, 0xe9, 0xd4, 0xad, 0x19, 0xd3, 0xb6, 0x18, 0x6b,
	0xee, 0x30, 0x0a, 0xe5, 0xba, 0x15, 0xe3, 0x81, 0x22, 0x25, 0xfc, 0xaf, 0x06, 0xde, 0x9c, 0xf5,
	0x16, 0x5b, 0xbf, 0xc7, 0x07, 0xf7, 0xc3, 0xd2, 0x83, 0xdb, 0xe4, 0xd4, 0xc9, 0xb4, 0xb2, 0x78,
	0x80, 0x45, 0xb2, 0xdd, 0x8a, 0xf1, 0xfa, 0x0c, 0xd4, 0xf0, 0x0b, 0x50, 0x4d, 0x5f, 0xa8, 0xeb,
	0x2b, 0x7c, 0x14, 0x4d, 0xc5, 0x70, 0x28, 0xb0, 0x22, 0x7b, 0xa8, 0x35, 0x93, 0x4f, 0xdd, 0x8a,
	0x31, 0x9f, 0xea, 0x86, 0x03, 0x70, 0x39, 0x99, 0xe3, 0xe8, 0xf7, 0x67, 0x79, 0xb5, 0x64, 0xce,
	0x96, 0x48, 0x56, 0x6a, 0x6b, 0x99, 0x26, 0x56, 0x28, 0x0e, 0x46, 0x8f, 0x6c, 0x74, 0xe9, 0x2b,
	0x7b, 0xfd, 0xe5, 0x59, 0x46, 0x27, 0xb1, 0x72, 0x16, 0xd6, 0x92, 0x4f, 0x6c, 0x74, 0xa9, 0x6e,
	0xf8, 0x17, 0x96, 0x07, 0x4f, 0xb9, 0xe4, 0xd7, 0x5f, 0x99, 0x25, 0xa0, 0x0b, 0xb6, 0xe1, 0xfa,
	0xdc, 0x91, 0x5c, 0xa9, 0x32, 0xa1, 0xa0, 0x97, 0x05, 0xf4, 0x89, 0x70, 0x16, 0xef, 0xf2, 0xbe,
	0x22, 0xd0, 0x5f, 0x9d, 0x65, 0x52, 0x24, 0x43, 0x93, 0x11, 0xc8, 0x49, 0x79, 0x96, 0x69, 0x62,
	0xf1, 0x2e, 0x2b, 0x08, 0x7f, 0xa9, 0x81, 0xc5, 0x82, 0x6f, 0x08, 0xf4, 0x07, 0xb3, 0xa4, 0xbd,
	0x23, 0x92, 0x35, 0xc6, 0x11, 0x1f, 0x5d, 0xe4, 0xb5, 0xb2, 0x94, 0x37, 0x57, 0x1c, 0xfe, 0x4c,
	0x03, 0x37, 0xf3, 0x3f, 0x8a, 0xd0, 0x57, 0xb9, 0x31, 0x5b, 0xaa, 0xf9, 0x01, 0x83, 0xae, 0x4b,
	0x8a, 0x61, 0x76, 0x90, 0x6d, 0xec, 0x56, 0x8c, 0xeb, 0x79, 0xc2, 0x2c, 0x07, 0x5e, 0x2c, 0xf8,
	0x2e, 0x42, 0xff, 0xca, 0x2c, 0xa6, 0x48, 0x92, 0x0d, 0xa7, 0x87, 0x5b, 0xa7, 0x32, 0x8b, 0x8c,
	0xa7, 0x27, 0xd5, 0xc8, 0x4c, 0xc9, 0x13, 0xe6, 0xa6, 0x14, 0x7c, 0x5e, 0xa1, 0xbf, 0x36, 0x8b,
	0x29, 0x27, 0x79, 0x09, 0xf9, 0xf3, 0x9c, 0x46, 0x66, 0x4a, 0x9e, 0x30, 0xfc, 0x3e, 0xb8, 0x96,
	0xf3, 0x91, 0x86, 0xfe, 0xfa, 0x2c, 0x69, 0xaf, 0x24, 0xd8, 0x20, 0xc8, 0x4e, 0xbf, 0xd2, 0xa3,
	0x16, 0x96, 0xf6, 0x66, 0xc4, 0xe0, 0x1f, 0x34, 0xb0, 0x54, 0xfc, 0x89, 0x87, 0xfe, 0x06, 0x37,
	0xe2, 0xb3, 0xd9, 0xe2, 0xd8, 0x88, 0x26, 0x6d, 0x4b, 0xa6, 0xa3, 0x5b, 0x31, 0xf4, 0x22, 0x10,
	0xaf, 0x52, 0x8a, 0xbf, 0x1a, 0xd1, 0x1f, 0xce, 0x52, 0xa5, 0x08, 0x9e, 0x1d, 0x46, 0xd3, 0xe6,
	0x2c, 0xd2, 0x30, 0x23, 0xbf, 0x9d, 0x55, 0x29, 0x05, 0x10, 0x9e, 0xdd, 0x4e, 0xfd, 0xce, 0x43,
	0xaf, 0xcd, 0x12, 0x0c, 0x4f, 0x26, 0x9e, 0x0a, 0x3c, 0xc7, 0x93, 0x8f, 0x05, 0xee, 0x4c, 0x84,
	0xc3, 0x3f, 0x6a, 0xe0, 0xce, 0xc4, 0x2f, 0x5c, 0xf4, 0x3a, 0xb7, 0xf5, 0x73, 0x65, 0x5b, 0x47,
	0x35, 0xbe, 0x43, 0x7c, 0x71, 0xa4, 0x7b, 0x3a, 0xc0, 0xcc, 0xce, 0xfc, 0x9e, 0x6e, 0xc5, 0xb8,
	0x55, 0x08, 0x83, 0xff, 0xd2, 0xc0, 0x03, 0xc5, 0xaf, 0x7a, 0xf4, 0x37, 0xb9, 0xa5, 0x5e, 0x39,
	0x4b, 0x5b, 0x49, 0xc6, 0x91, 0x6f, 0xa7, 0xc9, 0x74, 0x2b, 0xc6, 0x7d, 0x05, 0xaa, 0xe1, 0xb5,
	0xde, 0xda, 0x4f, 0x35, 0x70, 0xdb, 0x22, 0x85, 0x46, 0xae, 0xcd, 0x89, 0x0b, 0xae, 0xed, 0x80,
	0x50, 0xb2, 0xad, 0x7d, 0xeb, 0x69, 0xdf, 0xa1, 0x07, 0xd1, 0x7e, 0xcd, 0x22, 0x5e, 0x7d, 0x08,
	0x79, 0x88, 0x9c, 0x3a, 0x3e, 0xa1, 0x38, 0xf0, 0x91, 0xfb, 0x90, 0x7f, 0x56, 0x13, 0xd6, 0xc3,
	0xc0, 0xaa, 0x7b, 0xc8, 0xf1, 0xc5, 0xff, 0x93, 0xa8, 0x17, 0x7c, 0x90, 0xf4, 0x3f, 0x4d, 0xfb,
	0xd3, 0x99, 0xb3, 0xcd, 0xbd, 0xdd, 0xfd, 0xf3, 0x5c, 0xee, 0x6b, 0xff, 0x0f, 0x00, 0x00, 0xff,
	0xff, 0xc2, 0x84, 0x6e, 0x14, 0x74, 0x33, 0x00, 0x00,
}
