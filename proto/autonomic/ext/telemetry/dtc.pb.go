/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2020 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autonomic/ext/telemetry/dtc.proto

package telemetry

import (
	fmt "fmt"
	//common "xk6-fabric/proto/autonomic/ext/common"
	common "xk6-fabric/proto/autonomic/ext/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DiagnosticTroubleCode_System int32

const (
	DiagnosticTroubleCode_BODY       DiagnosticTroubleCode_System = 0
	DiagnosticTroubleCode_CHASSIS    DiagnosticTroubleCode_System = 1
	DiagnosticTroubleCode_POWERTRAIN DiagnosticTroubleCode_System = 2
	DiagnosticTroubleCode_NETWORK    DiagnosticTroubleCode_System = 3
)

var DiagnosticTroubleCode_System_name = map[int32]string{
	0: "BODY",
	1: "CHASSIS",
	2: "POWERTRAIN",
	3: "NETWORK",
}

var DiagnosticTroubleCode_System_value = map[string]int32{
	"BODY":       0,
	"CHASSIS":    1,
	"POWERTRAIN": 2,
	"NETWORK":    3,
}

func (x DiagnosticTroubleCode_System) String() string {
	return proto.EnumName(DiagnosticTroubleCode_System_name, int32(x))
}

func (DiagnosticTroubleCode_System) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e2126d213d83450, []int{1, 0}
}

// Deprecated unless we plan to identify and support vehicles that
// are using the pre-2016 SAE standard
type DiagnosticTroubleCode_Subsystem int32 // Deprecated: Do not use.
const (
	DiagnosticTroubleCode_FUEL_AND_AIR_AUX      DiagnosticTroubleCode_Subsystem = 0
	DiagnosticTroubleCode_FUEL_AND_AIR          DiagnosticTroubleCode_Subsystem = 1
	DiagnosticTroubleCode_FUEL_AND_AIR_INJECTOR DiagnosticTroubleCode_Subsystem = 2
	DiagnosticTroubleCode_IGNITION              DiagnosticTroubleCode_Subsystem = 3
	DiagnosticTroubleCode_AUX_EMISSIONS         DiagnosticTroubleCode_Subsystem = 4
	DiagnosticTroubleCode_SPEED_AND_IDLE        DiagnosticTroubleCode_Subsystem = 5
	DiagnosticTroubleCode_COMPUTER_OUTPUT       DiagnosticTroubleCode_Subsystem = 6
	DiagnosticTroubleCode_TRANSMISSION          DiagnosticTroubleCode_Subsystem = 7
	DiagnosticTroubleCode_TRANSMISSION_X        DiagnosticTroubleCode_Subsystem = 8
)

var DiagnosticTroubleCode_Subsystem_name = map[int32]string{
	0: "FUEL_AND_AIR_AUX",
	1: "FUEL_AND_AIR",
	2: "FUEL_AND_AIR_INJECTOR",
	3: "IGNITION",
	4: "AUX_EMISSIONS",
	5: "SPEED_AND_IDLE",
	6: "COMPUTER_OUTPUT",
	7: "TRANSMISSION",
	8: "TRANSMISSION_X",
}

var DiagnosticTroubleCode_Subsystem_value = map[string]int32{
	"FUEL_AND_AIR_AUX":      0,
	"FUEL_AND_AIR":          1,
	"FUEL_AND_AIR_INJECTOR": 2,
	"IGNITION":              3,
	"AUX_EMISSIONS":         4,
	"SPEED_AND_IDLE":        5,
	"COMPUTER_OUTPUT":       6,
	"TRANSMISSION":          7,
	"TRANSMISSION_X":        8,
}

func (x DiagnosticTroubleCode_Subsystem) String() string {
	return proto.EnumName(DiagnosticTroubleCode_Subsystem_name, int32(x))
}

func (DiagnosticTroubleCode_Subsystem) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e2126d213d83450, []int{1, 1}
}

type DiagnosticTroubleCode_KnownFault int32

const (
	DiagnosticTroubleCode_UNKNOWN_FAULT DiagnosticTroubleCode_KnownFault = 0
)

var DiagnosticTroubleCode_KnownFault_name = map[int32]string{
	0: "UNKNOWN_FAULT",
}

var DiagnosticTroubleCode_KnownFault_value = map[string]int32{
	"UNKNOWN_FAULT": 0,
}

func (x DiagnosticTroubleCode_KnownFault) String() string {
	return proto.EnumName(DiagnosticTroubleCode_KnownFault_name, int32(x))
}

func (DiagnosticTroubleCode_KnownFault) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e2126d213d83450, []int{1, 2}
}

type OemData struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*OemData_IntData
	//	*OemData_StringData
	//	*OemData_DoubleData
	Data                 isOemData_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *OemData) Reset()         { *m = OemData{} }
func (m *OemData) String() string { return proto.CompactTextString(m) }
func (*OemData) ProtoMessage()    {}
func (*OemData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e2126d213d83450, []int{0}
}

func (m *OemData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OemData.Unmarshal(m, b)
}
func (m *OemData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OemData.Marshal(b, m, deterministic)
}
func (m *OemData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OemData.Merge(m, src)
}
func (m *OemData) XXX_Size() int {
	return xxx_messageInfo_OemData.Size(m)
}
func (m *OemData) XXX_DiscardUnknown() {
	xxx_messageInfo_OemData.DiscardUnknown(m)
}

var xxx_messageInfo_OemData proto.InternalMessageInfo

func (m *OemData) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type isOemData_Data interface {
	isOemData_Data()
}

type OemData_IntData struct {
	IntData int64 `protobuf:"varint,2,opt,name=int_data,json=intData,proto3,oneof"`
}

type OemData_StringData struct {
	StringData string `protobuf:"bytes,3,opt,name=string_data,json=stringData,proto3,oneof"`
}

type OemData_DoubleData struct {
	DoubleData float64 `protobuf:"fixed64,4,opt,name=double_data,json=doubleData,proto3,oneof"`
}

func (*OemData_IntData) isOemData_Data() {}

func (*OemData_StringData) isOemData_Data() {}

func (*OemData_DoubleData) isOemData_Data() {}

func (m *OemData) GetData() isOemData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *OemData) GetIntData() int64 {
	if x, ok := m.GetData().(*OemData_IntData); ok {
		return x.IntData
	}
	return 0
}

func (m *OemData) GetStringData() string {
	if x, ok := m.GetData().(*OemData_StringData); ok {
		return x.StringData
	}
	return ""
}

func (m *OemData) GetDoubleData() float64 {
	if x, ok := m.GetData().(*OemData_DoubleData); ok {
		return x.DoubleData
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OemData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OemData_IntData)(nil),
		(*OemData_StringData)(nil),
		(*OemData_DoubleData)(nil),
	}
}

type DiagnosticTroubleCode struct {
	System DiagnosticTroubleCode_System `protobuf:"varint,1,opt,name=system,proto3,enum=autonomic.ext.telemetry.DiagnosticTroubleCode_System" json:"system,omitempty"`
	// Subsystem byte, provided as parsed enum (if we are certain of its accuracy), or raw otherwise
	//
	// Types that are valid to be assigned to SubsystemByte:
	//	*DiagnosticTroubleCode_Subsystem_
	SubsystemByte isDiagnosticTroubleCode_SubsystemByte `protobuf_oneof:"subsystem_byte"`
	Sae           bool                                  `protobuf:"varint,3,opt,name=sae,proto3" json:"sae,omitempty"`
	// false if a manufacturer-specific code
	//
	// Types that are valid to be assigned to Fault:
	//	*DiagnosticTroubleCode_IntFault
	//	*DiagnosticTroubleCode_KnownFault_
	Fault isDiagnosticTroubleCode_Fault `protobuf_oneof:"fault"`
	// XXX - add Status byte - OEM specific, deprecated in favour of oem_data field
	Status int32 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"` // Deprecated: Do not use.
	// XXX - ECU reporting DTC - OEM specific identifier, deprecated in favour of oem_data field
	ReportingEcu string `protobuf:"bytes,7,opt,name=reporting_ecu,json=reportingEcu,proto3" json:"reporting_ecu,omitempty"` // Deprecated: Do not use.
	// DTC Failure Type - SAE standard
	SubfaultFailureType int32 `protobuf:"varint,8,opt,name=subfault_failure_type,json=subfaultFailureType,proto3" json:"subfault_failure_type,omitempty"`
	// DTC Raw Code Value
	RawValue     string `protobuf:"bytes,9,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
	IntSubsystem int32  `protobuf:"varint,10,opt,name=int_subsystem,json=intSubsystem,proto3" json:"int_subsystem,omitempty"`
	// oem specific data, opaque to au
	// An OEM Documentation Addendum is provided for information on how to populate these fields.
	OemData              []*OemData      `protobuf:"bytes,11,rep,name=oem_data,json=oemData,proto3" json:"oem_data,omitempty"`
	OemValues            *common.OemData `protobuf:"bytes,12,opt,name=oem_values,json=oemValues,proto3" json:"oem_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DiagnosticTroubleCode) Reset()         { *m = DiagnosticTroubleCode{} }
func (m *DiagnosticTroubleCode) String() string { return proto.CompactTextString(m) }
func (*DiagnosticTroubleCode) ProtoMessage()    {}
func (*DiagnosticTroubleCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e2126d213d83450, []int{1}
}

func (m *DiagnosticTroubleCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiagnosticTroubleCode.Unmarshal(m, b)
}
func (m *DiagnosticTroubleCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiagnosticTroubleCode.Marshal(b, m, deterministic)
}
func (m *DiagnosticTroubleCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagnosticTroubleCode.Merge(m, src)
}
func (m *DiagnosticTroubleCode) XXX_Size() int {
	return xxx_messageInfo_DiagnosticTroubleCode.Size(m)
}
func (m *DiagnosticTroubleCode) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagnosticTroubleCode.DiscardUnknown(m)
}

var xxx_messageInfo_DiagnosticTroubleCode proto.InternalMessageInfo

func (m *DiagnosticTroubleCode) GetSystem() DiagnosticTroubleCode_System {
	if m != nil {
		return m.System
	}
	return DiagnosticTroubleCode_BODY
}

type isDiagnosticTroubleCode_SubsystemByte interface {
	isDiagnosticTroubleCode_SubsystemByte()
}

type DiagnosticTroubleCode_Subsystem_ struct {
	Subsystem DiagnosticTroubleCode_Subsystem `protobuf:"varint,2,opt,name=subsystem,proto3,enum=autonomic.ext.telemetry.DiagnosticTroubleCode_Subsystem,oneof"`
}

func (*DiagnosticTroubleCode_Subsystem_) isDiagnosticTroubleCode_SubsystemByte() {}

func (m *DiagnosticTroubleCode) GetSubsystemByte() isDiagnosticTroubleCode_SubsystemByte {
	if m != nil {
		return m.SubsystemByte
	}
	return nil
}

// Deprecated: Do not use.
func (m *DiagnosticTroubleCode) GetSubsystem() DiagnosticTroubleCode_Subsystem {
	if x, ok := m.GetSubsystemByte().(*DiagnosticTroubleCode_Subsystem_); ok {
		return x.Subsystem
	}
	return DiagnosticTroubleCode_FUEL_AND_AIR_AUX
}

func (m *DiagnosticTroubleCode) GetSae() bool {
	if m != nil {
		return m.Sae
	}
	return false
}

type isDiagnosticTroubleCode_Fault interface {
	isDiagnosticTroubleCode_Fault()
}

type DiagnosticTroubleCode_IntFault struct {
	IntFault int32 `protobuf:"varint,4,opt,name=int_fault,json=intFault,proto3,oneof"`
}

type DiagnosticTroubleCode_KnownFault_ struct {
	KnownFault DiagnosticTroubleCode_KnownFault `protobuf:"varint,5,opt,name=known_fault,json=knownFault,proto3,enum=autonomic.ext.telemetry.DiagnosticTroubleCode_KnownFault,oneof"`
}

func (*DiagnosticTroubleCode_IntFault) isDiagnosticTroubleCode_Fault() {}

func (*DiagnosticTroubleCode_KnownFault_) isDiagnosticTroubleCode_Fault() {}

func (m *DiagnosticTroubleCode) GetFault() isDiagnosticTroubleCode_Fault {
	if m != nil {
		return m.Fault
	}
	return nil
}

func (m *DiagnosticTroubleCode) GetIntFault() int32 {
	if x, ok := m.GetFault().(*DiagnosticTroubleCode_IntFault); ok {
		return x.IntFault
	}
	return 0
}

func (m *DiagnosticTroubleCode) GetKnownFault() DiagnosticTroubleCode_KnownFault {
	if x, ok := m.GetFault().(*DiagnosticTroubleCode_KnownFault_); ok {
		return x.KnownFault
	}
	return DiagnosticTroubleCode_UNKNOWN_FAULT
}

// Deprecated: Do not use.
func (m *DiagnosticTroubleCode) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// Deprecated: Do not use.
func (m *DiagnosticTroubleCode) GetReportingEcu() string {
	if m != nil {
		return m.ReportingEcu
	}
	return ""
}

func (m *DiagnosticTroubleCode) GetSubfaultFailureType() int32 {
	if m != nil {
		return m.SubfaultFailureType
	}
	return 0
}

func (m *DiagnosticTroubleCode) GetRawValue() string {
	if m != nil {
		return m.RawValue
	}
	return ""
}

func (m *DiagnosticTroubleCode) GetIntSubsystem() int32 {
	if m != nil {
		return m.IntSubsystem
	}
	return 0
}

func (m *DiagnosticTroubleCode) GetOemData() []*OemData {
	if m != nil {
		return m.OemData
	}
	return nil
}

func (m *DiagnosticTroubleCode) GetOemValues() *common.OemData {
	if m != nil {
		return m.OemValues
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DiagnosticTroubleCode) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DiagnosticTroubleCode_Subsystem_)(nil),
		(*DiagnosticTroubleCode_IntFault)(nil),
		(*DiagnosticTroubleCode_KnownFault_)(nil),
	}
}

func init() {
	proto.RegisterEnum("autonomic.ext.telemetry.DiagnosticTroubleCode_System", DiagnosticTroubleCode_System_name, DiagnosticTroubleCode_System_value)
	proto.RegisterEnum("autonomic.ext.telemetry.DiagnosticTroubleCode_Subsystem", DiagnosticTroubleCode_Subsystem_name, DiagnosticTroubleCode_Subsystem_value)
	proto.RegisterEnum("autonomic.ext.telemetry.DiagnosticTroubleCode_KnownFault", DiagnosticTroubleCode_KnownFault_name, DiagnosticTroubleCode_KnownFault_value)
	proto.RegisterType((*OemData)(nil), "autonomic.ext.telemetry.oem_data")
	proto.RegisterType((*DiagnosticTroubleCode)(nil), "autonomic.ext.telemetry.DiagnosticTroubleCode")
}

func init() { proto.RegisterFile("autonomic/ext/telemetry/dtc.proto", fileDescriptor_9e2126d213d83450) }

var fileDescriptor_9e2126d213d83450 = []byte{
	// 761 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xce, 0x24, 0x6d, 0xe2, 0x9c, 0xa4, 0x65, 0x98, 0xa5, 0xc2, 0xb4, 0x42, 0xa4, 0x59, 0x21,
	0x72, 0xb3, 0xb1, 0x54, 0x84, 0x04, 0xd2, 0xde, 0x38, 0xb1, 0x43, 0x4c, 0x5b, 0x3b, 0x1a, 0xdb,
	0xb4, 0xa0, 0x95, 0x2c, 0xc7, 0x99, 0x2d, 0x56, 0x63, 0x3b, 0xb2, 0xc7, 0x74, 0x73, 0xcb, 0x0d,
	0xef, 0xc1, 0xa3, 0xf0, 0x06, 0xbc, 0x0d, 0x97, 0x68, 0xc6, 0xf9, 0xd9, 0x45, 0x9b, 0x8b, 0xde,
	0x79, 0xce, 0xf9, 0xbe, 0x6f, 0xce, 0x7c, 0xe7, 0xf8, 0xc0, 0x65, 0x58, 0xf2, 0x2c, 0xcd, 0x92,
	0x38, 0xd2, 0xd8, 0x3b, 0xae, 0x71, 0xb6, 0x64, 0x09, 0xe3, 0xf9, 0x5a, 0x5b, 0xf0, 0x68, 0xb8,
	0xca, 0x33, 0x9e, 0x91, 0xcf, 0x77, 0x90, 0x21, 0x7b, 0xc7, 0x87, 0x3b, 0xc8, 0xf9, 0xcb, 0x0f,
	0xb9, 0x51, 0x96, 0x24, 0x59, 0xaa, 0x65, 0x2c, 0x09, 0x16, 0x21, 0x0f, 0x2b, 0x76, 0xff, 0x4f,
	0x04, 0xca, 0x36, 0x44, 0x30, 0x34, 0x1e, 0xd9, 0x5a, 0x45, 0x3d, 0x34, 0x68, 0x53, 0xf1, 0x49,
	0x2e, 0x40, 0x89, 0x53, 0x2e, 0xb3, 0x6a, 0xbd, 0x87, 0x06, 0x8d, 0x69, 0x8d, 0xb6, 0xe2, 0x94,
	0x1b, 0x02, 0x7e, 0x09, 0x9d, 0x82, 0xe7, 0x71, 0xfa, 0x50, 0xe5, 0x1b, 0x82, 0x36, 0xad, 0x51,
	0xa8, 0x82, 0x5b, 0xc8, 0x22, 0x2b, 0xe7, 0x4b, 0x56, 0x41, 0x8e, 0x7a, 0x68, 0x80, 0x04, 0xa4,
	0x0a, 0x0a, 0xc8, 0xa8, 0x09, 0x47, 0x22, 0xd7, 0xff, 0xa7, 0x05, 0x67, 0x46, 0x1c, 0x3e, 0xa4,
	0x59, 0xc1, 0xe3, 0xc8, 0xcb, 0x25, 0x62, 0x9c, 0x2d, 0x18, 0xb9, 0x85, 0x66, 0xb1, 0x2e, 0x38,
	0x4b, 0x64, 0x65, 0xa7, 0x57, 0xdf, 0x0d, 0x0f, 0x3c, 0x79, 0xf8, 0x51, 0xfe, 0xd0, 0x95, 0x64,
	0xba, 0x11, 0x21, 0x6f, 0xa0, 0x5d, 0x94, 0xf3, 0x8d, 0x62, 0x5d, 0x2a, 0x7e, 0xff, 0x5c, 0xc5,
	0x2d, 0x7f, 0x54, 0x57, 0xc5, 0x7b, 0xf6, 0x82, 0xc2, 0xc3, 0x22, 0x64, 0xd2, 0x0c, 0x85, 0x8a,
	0x4f, 0xf2, 0x25, 0xb4, 0x85, 0x87, 0x6f, 0xc3, 0x72, 0xc9, 0xa5, 0x03, 0xc7, 0x53, 0x44, 0x85,
	0xad, 0x13, 0x11, 0x21, 0x6f, 0xa0, 0xf3, 0x98, 0x66, 0x4f, 0xe9, 0x06, 0x70, 0x2c, 0x0b, 0xfa,
	0xe1, 0x99, 0x05, 0x5d, 0x0b, 0x05, 0xa9, 0x37, 0x45, 0x14, 0x1e, 0x77, 0x27, 0x72, 0x0e, 0xcd,
	0x82, 0x87, 0xbc, 0x2c, 0xd4, 0xa6, 0xb8, 0x59, 0xd4, 0x4b, 0x37, 0x11, 0xf2, 0x0d, 0x9c, 0xe4,
	0x6c, 0x95, 0xe5, 0x5c, 0xb4, 0x90, 0x45, 0xa5, 0xda, 0x12, 0x1d, 0x94, 0x90, 0xee, 0x2e, 0x61,
	0x46, 0x25, 0xb9, 0x82, 0xb3, 0xa2, 0x9c, 0xcb, 0xfa, 0x82, 0xb7, 0x61, 0xbc, 0x2c, 0x73, 0x16,
	0xf0, 0xf5, 0x8a, 0xa9, 0x8a, 0xd0, 0xa4, 0x2f, 0xb6, 0xc9, 0x49, 0x95, 0xf3, 0xd6, 0x2b, 0x46,
	0x2e, 0xa0, 0x9d, 0x87, 0x4f, 0xc1, 0xef, 0xe1, 0xb2, 0x64, 0x6a, 0x5b, 0x4e, 0x94, 0x92, 0x87,
	0x4f, 0x3f, 0x8b, 0x33, 0x79, 0x09, 0x27, 0xc2, 0x92, 0x7d, 0x1b, 0x40, 0x0a, 0x75, 0xe3, 0x94,
	0xef, 0xac, 0x25, 0xaf, 0xf7, 0x93, 0xa9, 0x76, 0x7a, 0x8d, 0x41, 0xe7, 0xea, 0xf2, 0xa0, 0x2b,
	0x5b, 0x20, 0x6d, 0x65, 0x2c, 0x91, 0x93, 0x67, 0x00, 0x88, 0xa0, 0xbc, 0xbf, 0x50, 0xbb, 0x3d,
	0x34, 0xe8, 0x5c, 0x7d, 0xfd, 0x3f, 0x7e, 0xf5, 0x4b, 0x08, 0xb2, 0xfc, 0x23, 0x9c, 0x8a, 0x4a,
	0xdb, 0x19, 0x4b, 0x64, 0x9d, 0x45, 0xff, 0x35, 0x34, 0xab, 0xe9, 0x21, 0x0a, 0x1c, 0x8d, 0x1c,
	0xe3, 0x17, 0x5c, 0x23, 0x1d, 0x68, 0x8d, 0xa7, 0xba, 0xeb, 0x5a, 0x2e, 0x46, 0xe4, 0x14, 0x60,
	0xe6, 0xdc, 0x99, 0xd4, 0xa3, 0xba, 0x65, 0xe3, 0xba, 0x48, 0xda, 0xa6, 0x77, 0xe7, 0xd0, 0x6b,
	0xdc, 0xe8, 0xff, 0x8d, 0xa0, 0xbd, 0x7f, 0xcf, 0x67, 0x80, 0x27, 0xbe, 0x79, 0x13, 0xe8, 0xb6,
	0x11, 0xe8, 0x16, 0x0d, 0x74, 0xff, 0x1e, 0xd7, 0x08, 0x86, 0xee, 0xfb, 0x51, 0x8c, 0xc8, 0x17,
	0x70, 0xf6, 0x01, 0xce, 0xb2, 0x7f, 0x32, 0xc7, 0x9e, 0x43, 0x71, 0x9d, 0x74, 0x41, 0xb1, 0x7e,
	0xb4, 0x2d, 0xcf, 0x72, 0x6c, 0xdc, 0x20, 0x9f, 0xc2, 0x89, 0xee, 0xdf, 0x07, 0xe6, 0xad, 0xe5,
	0xba, 0x96, 0x63, 0xbb, 0xf8, 0x88, 0x10, 0x38, 0x75, 0x67, 0xa6, 0x69, 0x48, 0xb2, 0x65, 0xdc,
	0x98, 0xf8, 0x98, 0xbc, 0x80, 0x4f, 0xc6, 0xce, 0xed, 0xcc, 0xf7, 0x4c, 0x1a, 0x38, 0xbe, 0x37,
	0xf3, 0x3d, 0xdc, 0x14, 0xd7, 0x7a, 0x54, 0xb7, 0xdd, 0x0d, 0x17, 0xb7, 0x04, 0xf5, 0xfd, 0x48,
	0x70, 0x8f, 0x95, 0xf3, 0xba, 0x8a, 0xfa, 0x5f, 0x01, 0xec, 0xa7, 0x4b, 0xdc, 0xe9, 0xdb, 0xd7,
	0xb6, 0x73, 0x67, 0x07, 0x13, 0xdd, 0xbf, 0xf1, 0x70, 0x6d, 0x84, 0xe1, 0x74, 0xd7, 0xc8, 0x60,
	0xbe, 0xe6, 0x6c, 0xd4, 0x82, 0x63, 0x39, 0x0f, 0xa3, 0x3f, 0x10, 0x5c, 0x44, 0x59, 0x72, 0xa8,
	0x6d, 0x23, 0xc5, 0xe0, 0xd1, 0x4c, 0xec, 0xa1, 0x19, 0xfa, 0xd5, 0x7e, 0x88, 0xf9, 0x6f, 0xe5,
	0x5c, 0x34, 0x45, 0xdb, 0xe1, 0x5f, 0x85, 0xb1, 0x58, 0x5e, 0x2c, 0x4f, 0xc3, 0xe5, 0x2b, 0xb9,
	0xb1, 0x0a, 0xad, 0xc8, 0x23, 0x2d, 0x09, 0xe3, 0x54, 0x93, 0x67, 0xed, 0xc0, 0x86, 0xfc, 0x17,
	0xa1, 0xbf, 0xea, 0x0d, 0xdd, 0xf7, 0xe6, 0x4d, 0x89, 0xfb, 0xf6, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x26, 0x25, 0xfc, 0xce, 0x4c, 0x05, 0x00, 0x00,
}
