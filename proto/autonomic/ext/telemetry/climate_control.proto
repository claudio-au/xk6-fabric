/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2019 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */

syntax = "proto3";

package autonomic.ext.telemetry;

option go_package = "xk6-fabric/proto/autonomic/ext/telemetry";
option java_package = "com.autonomic.ext.telemetry";
option java_outer_classname = "ClimateControlProto";
option java_multiple_files = true;

option cc_enable_arenas = true;

option objc_class_prefix = "AUT";

import "autonomic/ext/telemetry/enumerations/offon_status.proto";
import "autonomic/ext/telemetry/tag.proto";

message AirFlow {
    enum AirVentDistribution {
        UNKNOWN_AIR_VENT = 0;
        FLOOR_AIR_VENT = 1;
        INSTRUMENT_PANEL_AIR_VENT = 2;
        DEFROST_AIR_VENT = 3;
    }

    enum AirCirculationStatus {
        UNKNOWN_AIR_CIRCULATION = 0;
        FRESH_INTAKE = 1;
        RECIRCULATE = 2;
    }

    double fan_speed = 1; // Fan speed represented as a percentage where 0 is off and 100 is max.
    repeated AirVentDistribution active_vents = 2; // All vents that have active air flow
    AirCirculationStatus air_circulation_status = 3; // Where the air in the vents is coming from
}

message CabinTemperatureSetting {

    oneof temperature_control {
        double measured_temperature_setting = 1; // Temperature setting in degrees C
        double relative_temperature_setting = 2; // Temperature setting from max cooling (-100%) to max heating (100%)
    }

    autonomic.ext.telemetry.tag.Tag unit_tag = 3;
}

message ClimateControl {
    enum AirConditionerStatus {
        UNKNOWN_AIR_CONDITIONER_STATUS = 0;
        OFF = 1; // Air conditioner is off
        ON = 2; // Air conditioner is on
    }

    enum SystemControlMode {
        UNKNOWN_SYSTEM_CONTROL_MODE = 0;
        MANUAL_SYSTEM_CONTROL_MODE = 1; // Climate control output is manually configured
        AUTOMATIC_SYSTEM_CONTROL_MODE = 2; // Climate control output is automatically configured
    }

    // Climate Control System Status
    autonomic.ext.telemetry.enumerations.offOnStatus.OffOnStatus system_status = 1;

    // Flow of air from climate control systems
    AirFlow air_flow = 2;

    // Active cabin temperature setting
    CabinTemperatureSetting cabin_temperature_setting = 3;

    // Air conditioner status
    AirConditionerStatus air_conditioner_status = 4;

    SystemControlMode system_control_mode = 5;
}
