/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2017 - 2018 Autonomic Incorporated - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 * 
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 * 
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
syntax = "proto3";

package autonomic.ext.deployment;

option go_package = "xk6-fabric/proto/autonomic/ext/deployment";
option java_package = "com.autonomic.ext.deployment";
option java_outer_classname = "DeviceDeploymentProto";
option java_multiple_files = true;

option cc_enable_arenas = true;

option objc_class_prefix = "AUT";

message ArtifactReference {
    string uri = 1;
    string type = 2;
}

// This service defines APIs which the Au platform will invoke in order to manage device configurations
service DeviceDeployment {
    rpc RegisterDeploymentListener(RegisterDeploymentListenerRequest) returns (stream DeviceDeploymentRequestEnvelope) {}
}

// Request to register a PID as a device willing to fulfill deployment requests
message RegisterDeploymentListenerRequest {
    // TODO: vin and esn should be extracted from certificate, this should be eventually empty
    string vin = 1;
}

// A request that a device reconfigure itself with the specified TargetBundle
message DeviceDeploymentRequest {
    bytes correlation_id = 1;

    // The most common use case here is that a request contains exactly one artifact,
    // which represents a controltech manifest.
    repeated ArtifactReference artifacts = 2;

    // Deprecated: use oem_correlation_id in the CommandTrigger message.
    bytes oem_correlation_id = 3 [deprecated = true];
}

message DeviceDeploymentRequestEnvelope {
    oneof request {
        DeviceDeploymentRequest deployment_request = 1;
        bytes encrypted_request = 2;
    }
}
