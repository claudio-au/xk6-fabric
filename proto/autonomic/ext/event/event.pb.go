/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2020 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autonomic/ext/event/event.proto

package event

import (
	fmt "fmt"
	devicepairing "xk6-fabric/proto/autonomic/ext/command/devicepairing"
	errors "xk6-fabric/proto/autonomic/ext/command/errors"
	wifi "xk6-fabric/proto/autonomic/ext/command/wifi"
	common "xk6-fabric/proto/autonomic/ext/common"
	state "xk6-fabric/proto/autonomic/ext/event/state"
	telemetry "xk6-fabric/proto/autonomic/ext/telemetry"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GeofenceEvent_Type int32

const (
	GeofenceEvent_UNSET GeofenceEvent_Type = 0
	GeofenceEvent_ENTER GeofenceEvent_Type = 1
	GeofenceEvent_EXIT  GeofenceEvent_Type = 2
)

var GeofenceEvent_Type_name = map[int32]string{
	0: "UNSET",
	1: "ENTER",
	2: "EXIT",
}

var GeofenceEvent_Type_value = map[string]int32{
	"UNSET": 0,
	"ENTER": 1,
	"EXIT":  2,
}

func (x GeofenceEvent_Type) String() string {
	return proto.EnumName(GeofenceEvent_Type_name, int32(x))
}

func (GeofenceEvent_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8cfff88bdb599f73, []int{5, 0}
}

type GeofenceEvent_TriggerType int32

const (
	GeofenceEvent_UNSET_TRIGGER_TYPE GeofenceEvent_TriggerType = 0
	GeofenceEvent_GEOFENCE_OPERATION GeofenceEvent_TriggerType = 1
	GeofenceEvent_VEHICLE_MOVEMENT   GeofenceEvent_TriggerType = 2
)

var GeofenceEvent_TriggerType_name = map[int32]string{
	0: "UNSET_TRIGGER_TYPE",
	1: "GEOFENCE_OPERATION",
	2: "VEHICLE_MOVEMENT",
}

var GeofenceEvent_TriggerType_value = map[string]int32{
	"UNSET_TRIGGER_TYPE": 0,
	"GEOFENCE_OPERATION": 1,
	"VEHICLE_MOVEMENT":   2,
}

func (x GeofenceEvent_TriggerType) String() string {
	return proto.EnumName(GeofenceEvent_TriggerType_name, int32(x))
}

func (GeofenceEvent_TriggerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8cfff88bdb599f73, []int{5, 1}
}

type Event struct {
	// Unique identifier for the event - i.e. aui:edge:vehicle:event:<identifier>
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The correlation id is a 128-bit v4 UUID.
	//
	// The correlation id allows related messages to be connected.
	// The meaning of the correlation id is specific to the scenario of
	// event: for deployments, it is the deployment id; for control it
	// is the command id.
	//
	// When a device receives a command trigger from the cloud, it shall
	// parse the correlationId from the command and set the field
	// below as part of any events emitted in response to the handling
	// of the command.
	//
	// Events for scenarios that do not require correlation must not set
	// the correlation id and services should ignore the correlation id
	// on such events.
	CorrelationId string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// Au service generating the information - aui:mqs, aui:gfs, aui:feed,
	// aui:deploy, aui:bytestream, aui:edge:vehicle:<vin>, etc
	Source    string               `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Type-specific event attributes or declare an Error (understood by Au)
	Payload *any.Any `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	// Additional information about the event (opaque to Au).
	//
	// Types that are valid to be assigned to AdditionalData:
	//	*Event_StringData
	//	*Event_BytesData
	//	*Event_TypedData
	AdditionalData isEvent_AdditionalData `protobuf_oneof:"additional_data"`
	// Unique identifier set by the customer(opaque to Au)
	OemCorrelationId string `protobuf:"bytes,9,opt,name=oem_correlation_id,json=oemCorrelationId,proto3" json:"oem_correlation_id,omitempty"`
	// Should be used sparingly to include additional context about an event
	Tags []*telemetry.Tag `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	// Additional information about the event (opaque to Au)
	OemData *common.OemData `protobuf:"bytes,11,opt,name=oem_data,json=oemData,proto3" json:"oem_data,omitempty"`
	// Contains any and all cloud-specific contextual information that may be needed for simple
	// observability or command tracking purposes (understood by Au).
	MetadataTags         map[string]string `protobuf:"bytes,12,rep,name=metadata_tags,json=metadataTags,proto3" json:"metadata_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cfff88bdb599f73, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *Event) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Event) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Event) GetPayload() *any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

type isEvent_AdditionalData interface {
	isEvent_AdditionalData()
}

type Event_StringData struct {
	StringData string `protobuf:"bytes,6,opt,name=string_data,json=stringData,proto3,oneof"`
}

type Event_BytesData struct {
	BytesData []byte `protobuf:"bytes,7,opt,name=bytes_data,json=bytesData,proto3,oneof"`
}

type Event_TypedData struct {
	TypedData *any.Any `protobuf:"bytes,8,opt,name=typed_data,json=typedData,proto3,oneof"`
}

func (*Event_StringData) isEvent_AdditionalData() {}

func (*Event_BytesData) isEvent_AdditionalData() {}

func (*Event_TypedData) isEvent_AdditionalData() {}

func (m *Event) GetAdditionalData() isEvent_AdditionalData {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

func (m *Event) GetStringData() string {
	if x, ok := m.GetAdditionalData().(*Event_StringData); ok {
		return x.StringData
	}
	return ""
}

func (m *Event) GetBytesData() []byte {
	if x, ok := m.GetAdditionalData().(*Event_BytesData); ok {
		return x.BytesData
	}
	return nil
}

func (m *Event) GetTypedData() *any.Any {
	if x, ok := m.GetAdditionalData().(*Event_TypedData); ok {
		return x.TypedData
	}
	return nil
}

func (m *Event) GetOemCorrelationId() string {
	if m != nil {
		return m.OemCorrelationId
	}
	return ""
}

func (m *Event) GetTags() []*telemetry.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Event) GetOemData() *common.OemData {
	if m != nil {
		return m.OemData
	}
	return nil
}

func (m *Event) GetMetadataTags() map[string]string {
	if m != nil {
		return m.MetadataTags
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_StringData)(nil),
		(*Event_BytesData)(nil),
		(*Event_TypedData)(nil),
	}
}

// The ErrorEvent allows assigning a type of Well Known Event Error (see autonomic.ext.event.error.Error),
// the source of the Error, and attach the original event payload if available or possible to include.
type ErrorEvent struct {
	// Well known error name
	WkErrorName Error `protobuf:"varint,1,opt,name=wk_error_name,json=wkErrorName,proto3,enum=autonomic.ext.event.Error" json:"wk_error_name,omitempty"`
	// Custom message to expand on Error
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Capture the source of the event (see: ErrorSource enum.)
	Source ErrorSource `protobuf:"varint,3,opt,name=source,proto3,enum=autonomic.ext.event.ErrorSource" json:"source,omitempty"`
	// // Capture (if available) the original event payload
	Payload              *any.Any `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorEvent) Reset()         { *m = ErrorEvent{} }
func (m *ErrorEvent) String() string { return proto.CompactTextString(m) }
func (*ErrorEvent) ProtoMessage()    {}
func (*ErrorEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cfff88bdb599f73, []int{1}
}

func (m *ErrorEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorEvent.Unmarshal(m, b)
}
func (m *ErrorEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorEvent.Marshal(b, m, deterministic)
}
func (m *ErrorEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorEvent.Merge(m, src)
}
func (m *ErrorEvent) XXX_Size() int {
	return xxx_messageInfo_ErrorEvent.Size(m)
}
func (m *ErrorEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorEvent proto.InternalMessageInfo

func (m *ErrorEvent) GetWkErrorName() Error {
	if m != nil {
		return m.WkErrorName
	}
	return Error_UNKNOWN
}

func (m *ErrorEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ErrorEvent) GetSource() ErrorSource {
	if m != nil {
		return m.Source
	}
	return ErrorSource_ERROR_SOURCE_UNKNOWN
}

func (m *ErrorEvent) GetPayload() *any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

type StateTransition struct {
	// name of the FSM emitting the transition
	//
	// Types that are valid to be assigned to FsmName:
	//	*StateTransition_StringFsmName
	//	*StateTransition_WkFsmName
	FsmName isStateTransition_FsmName `protobuf_oneof:"fsm_name"`
	// FSM state before transition
	//
	// Types that are valid to be assigned to FromState:
	//	*StateTransition_StringFromState
	//	*StateTransition_DeprecatedDeploymentFromState
	//	*StateTransition_VinDiscoveryFromState
	//	*StateTransition_DeviceWakeupFromState
	//	*StateTransition_ModuleDiscoveryFromState
	//	*StateTransition_DeviceConfigResetFromState
	//	*StateTransition_DeviceDiagnosticFromState
	//	*StateTransition_KeyRotationFromState
	//	*StateTransition_DeploymentFromState
	//	*StateTransition_ConfigurationUpdateFromState
	//	*StateTransition_HmiDisplayFromState
	//	*StateTransition_TokenRefreshFromState
	//	*StateTransition_ExecutePendingUpdatesFromState
	//	*StateTransition_WifiConfigFromState
	//	*StateTransition_OnDemandStatusUpdateFromState
	//	*StateTransition_WifiStatusFromState
	//	*StateTransition_ReportWifiUsageFromState
	//	*StateTransition_CommandCancellationFromState
	//	*StateTransition_VehicleClaimValidationFromState
	//	*StateTransition_RetrieveDevicePairingCodeFromState
	//	*StateTransition_ChangeConfigProfileFromState
	//	*StateTransition_ConfigureTelemetryEmissionFromState
	//	*StateTransition_UserAuthConfirmationFromState
	//	*StateTransition_AntiTheftFromState
	//	*StateTransition_HmiApplicationMessageFromState
	//	*StateTransition_CommandPreclusionFromState
	//	*StateTransition_FirmwareUpgradeCommandPreclusionFromState
	//	*StateTransition_DeepSleepCommandPreclusionFromState
	//	*StateTransition_CarrierRegistrationCommandPreclusionFromState
	//	*StateTransition_TemperatureThresholdCommandPreclusionFromState
	//	*StateTransition_ActuationFromState
	//	*StateTransition_LockFromState
	//	*StateTransition_UnlockFromState
	//	*StateTransition_RemoteStartFromState
	//	*StateTransition_CancelRemoteStartFromState
	//	*StateTransition_StartTelemetryCollectionFromState
	//	*StateTransition_CancelTelemetryCollectionFromState
	//	*StateTransition_VehicleCueFromState
	//	*StateTransition_PanicCueFromState
	FromState isStateTransition_FromState `protobuf_oneof:"from_state"`
	// FSM state after transition
	//
	// Types that are valid to be assigned to ToState:
	//	*StateTransition_StringToState
	//	*StateTransition_DeprecatedDeploymentToState
	//	*StateTransition_VinDiscoveryToState
	//	*StateTransition_DeviceWakeupToState
	//	*StateTransition_ModuleDiscoveryToState
	//	*StateTransition_DeviceConfigResetToState
	//	*StateTransition_DeviceDiagnosticToState
	//	*StateTransition_KeyRotationToState
	//	*StateTransition_DeploymentToState
	//	*StateTransition_ConfigurationUpdateToState
	//	*StateTransition_HmiDisplayToState
	//	*StateTransition_TokenRefreshToState
	//	*StateTransition_ExecutePendingUpdatesToState
	//	*StateTransition_WifiConfigToState
	//	*StateTransition_OnDemandStatusUpdateToState
	//	*StateTransition_WifiStatusToState
	//	*StateTransition_ReportWifiUsageToState
	//	*StateTransition_CommandCancellationToState
	//	*StateTransition_VehicleClaimValidationToState
	//	*StateTransition_RetrieveDevicePairingCodeToState
	//	*StateTransition_ChangeConfigProfileToState
	//	*StateTransition_ConfigureTelemetryEmissionToState
	//	*StateTransition_UserAuthConfirmationToState
	//	*StateTransition_AntiTheftToState
	//	*StateTransition_HmiApplicationMessageToState
	//	*StateTransition_CommandPreclusionToState
	//	*StateTransition_FirmwareUpgradeCommandPreclusionToState
	//	*StateTransition_DeepSleepCommandPreclusionToState
	//	*StateTransition_CarrierRegistrationCommandPreclusionToState
	//	*StateTransition_TemperatureThresholdCommandPreclusionToState
	//	*StateTransition_ActuationToState
	//	*StateTransition_LockToState
	//	*StateTransition_UnlockToState
	//	*StateTransition_RemoteStartToState
	//	*StateTransition_CancelRemoteStartToState
	//	*StateTransition_StartTelemetryCollectionToState
	//	*StateTransition_CancelTelemetryCollectionToState
	//	*StateTransition_VehicleCueToState
	//	*StateTransition_PanicCueToState
	ToState isStateTransition_ToState `protobuf_oneof:"to_state"`
	// The event that caused the transition
	//
	// Types that are valid to be assigned to Trigger:
	//	*StateTransition_StringTrigger
	//	*StateTransition_DeprecatedDeploymentTrigger
	//	*StateTransition_VinDiscoveryTrigger
	//	*StateTransition_DeviceWakeupTrigger
	//	*StateTransition_ModuleDiscoveryTrigger
	//	*StateTransition_DeviceConfigResetTrigger
	//	*StateTransition_DeviceDiagnosticTrigger
	//	*StateTransition_KeyRotationTrigger
	//	*StateTransition_DeploymentTrigger
	//	*StateTransition_ConfigurationUpdateTrigger
	//	*StateTransition_HmiDisplayTrigger
	//	*StateTransition_TokenRefreshTrigger
	//	*StateTransition_ExecutePendingUpdatesTrigger
	//	*StateTransition_WifiConfigTrigger
	//	*StateTransition_OnDemandStatusUpdateTrigger
	//	*StateTransition_WifiStatusTrigger
	//	*StateTransition_ReportWifiUsageTrigger
	//	*StateTransition_CommandCancellationTrigger
	//	*StateTransition_VehicleClaimValidationTrigger
	//	*StateTransition_RetrieveDevicePairingCodeTrigger
	//	*StateTransition_ChangeConfigProfileTrigger
	//	*StateTransition_ConfigureTelemetryEmissionTrigger
	//	*StateTransition_UserAuthConfirmationTrigger
	//	*StateTransition_AntiTheftTrigger
	//	*StateTransition_HmiApplicationMessageTrigger
	//	*StateTransition_CommandPreclusionTrigger
	//	*StateTransition_FirmwareUpgradeCommandPreclusionTrigger
	//	*StateTransition_DeepSleepCommandPreclusionTrigger
	//	*StateTransition_CarrierRegistrationCommandPreclusionTrigger
	//	*StateTransition_TemperatureThresholdCommandPreclusionTrigger
	//	*StateTransition_ActuationTrigger
	//	*StateTransition_LockTrigger
	//	*StateTransition_UnlockTrigger
	//	*StateTransition_RemoteStartTrigger
	//	*StateTransition_CancelRemoteStartTrigger
	//	*StateTransition_StartTelemetryCollectionTrigger
	//	*StateTransition_CancelTelemetryCollectionTrigger
	//	*StateTransition_VehicleCueTrigger
	//	*StateTransition_PanicCueTrigger
	Trigger isStateTransition_Trigger `protobuf_oneof:"trigger"`
	Data    *StateTransitionData      `protobuf:"bytes,1001,opt,name=data,proto3" json:"data,omitempty"`
	// Optional descriptive information about the transition
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// Metrics associated with the state transition. For example, this is
	// where information on download progress for a deployment artifact
	// would be communicated.
	Metrics              []*telemetry.Metric `protobuf:"bytes,6,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *StateTransition) Reset()         { *m = StateTransition{} }
func (m *StateTransition) String() string { return proto.CompactTextString(m) }
func (*StateTransition) ProtoMessage()    {}
func (*StateTransition) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cfff88bdb599f73, []int{2}
}

func (m *StateTransition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateTransition.Unmarshal(m, b)
}
func (m *StateTransition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateTransition.Marshal(b, m, deterministic)
}
func (m *StateTransition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateTransition.Merge(m, src)
}
func (m *StateTransition) XXX_Size() int {
	return xxx_messageInfo_StateTransition.Size(m)
}
func (m *StateTransition) XXX_DiscardUnknown() {
	xxx_messageInfo_StateTransition.DiscardUnknown(m)
}

var xxx_messageInfo_StateTransition proto.InternalMessageInfo

type isStateTransition_FsmName interface {
	isStateTransition_FsmName()
}

type StateTransition_StringFsmName struct {
	StringFsmName string `protobuf:"bytes,1,opt,name=string_fsm_name,json=stringFsmName,proto3,oneof"`
}

type StateTransition_WkFsmName struct {
	WkFsmName WellKnownFiniteStateMachine `protobuf:"varint,7,opt,name=wk_fsm_name,json=wkFsmName,proto3,enum=autonomic.ext.event.WellKnownFiniteStateMachine,oneof"`
}

func (*StateTransition_StringFsmName) isStateTransition_FsmName() {}

func (*StateTransition_WkFsmName) isStateTransition_FsmName() {}

func (m *StateTransition) GetFsmName() isStateTransition_FsmName {
	if m != nil {
		return m.FsmName
	}
	return nil
}

func (m *StateTransition) GetStringFsmName() string {
	if x, ok := m.GetFsmName().(*StateTransition_StringFsmName); ok {
		return x.StringFsmName
	}
	return ""
}

func (m *StateTransition) GetWkFsmName() WellKnownFiniteStateMachine {
	if x, ok := m.GetFsmName().(*StateTransition_WkFsmName); ok {
		return x.WkFsmName
	}
	return WellKnownFiniteStateMachine_UNKNOWN_FSM
}

type isStateTransition_FromState interface {
	isStateTransition_FromState()
}

type StateTransition_StringFromState struct {
	StringFromState string `protobuf:"bytes,2,opt,name=string_from_state,json=stringFromState,proto3,oneof"`
}

type StateTransition_DeprecatedDeploymentFromState struct {
	DeprecatedDeploymentFromState WellKnownDeploymentState `protobuf:"varint,8,opt,name=deprecated_deployment_from_state,json=deprecatedDeploymentFromState,proto3,enum=autonomic.ext.event.WellKnownDeploymentState,oneof"`
}

type StateTransition_VinDiscoveryFromState struct {
	VinDiscoveryFromState state.WellKnownVinDiscoveryState `protobuf:"varint,11,opt,name=vin_discovery_from_state,json=vinDiscoveryFromState,proto3,enum=autonomic.ext.event.state.vindiscovery.WellKnownVinDiscoveryState,oneof"`
}

type StateTransition_DeviceWakeupFromState struct {
	DeviceWakeupFromState state.WellKnownDeviceWakeupState `protobuf:"varint,14,opt,name=device_wakeup_from_state,json=deviceWakeupFromState,proto3,enum=autonomic.ext.event.state.devicewakeup.WellKnownDeviceWakeupState,oneof"`
}

type StateTransition_ModuleDiscoveryFromState struct {
	ModuleDiscoveryFromState state.WellKnownModuleDiscoveryState `protobuf:"varint,17,opt,name=module_discovery_from_state,json=moduleDiscoveryFromState,proto3,enum=autonomic.ext.event.state.modulediscovery.WellKnownModuleDiscoveryState,oneof"`
}

type StateTransition_DeviceConfigResetFromState struct {
	DeviceConfigResetFromState state.WellKnownDeviceConfigResetState `protobuf:"varint,20,opt,name=device_config_reset_from_state,json=deviceConfigResetFromState,proto3,enum=autonomic.ext.event.state.deviceconfigreset.WellKnownDeviceConfigResetState,oneof"`
}

type StateTransition_DeviceDiagnosticFromState struct {
	DeviceDiagnosticFromState state.WellKnownDeviceDiagnosticState `protobuf:"varint,23,opt,name=device_diagnostic_from_state,json=deviceDiagnosticFromState,proto3,enum=autonomic.ext.event.state.devicediagnostic.WellKnownDeviceDiagnosticState,oneof"`
}

type StateTransition_KeyRotationFromState struct {
	KeyRotationFromState state.WellKnownKeyRotationState `protobuf:"varint,26,opt,name=key_rotation_from_state,json=keyRotationFromState,proto3,enum=autonomic.ext.event.state.keyrotation.WellKnownKeyRotationState,oneof"`
}

type StateTransition_DeploymentFromState struct {
	DeploymentFromState state.WellKnownDeploymentState `protobuf:"varint,29,opt,name=deployment_from_state,json=deploymentFromState,proto3,enum=autonomic.ext.event.state.deployment.WellKnownDeploymentState,oneof"`
}

type StateTransition_ConfigurationUpdateFromState struct {
	ConfigurationUpdateFromState state.WellKnownConfigurationUpdateState `protobuf:"varint,44,opt,name=configuration_update_from_state,json=configurationUpdateFromState,proto3,enum=autonomic.ext.event.state.configurationupdate.WellKnownConfigurationUpdateState,oneof"`
}

type StateTransition_HmiDisplayFromState struct {
	HmiDisplayFromState state.WellKnownHMIDisplayState `protobuf:"varint,47,opt,name=hmi_display_from_state,json=hmiDisplayFromState,proto3,enum=autonomic.ext.event.state.hmidisplay.WellKnownHMIDisplayState,oneof"`
}

type StateTransition_TokenRefreshFromState struct {
	TokenRefreshFromState state.WellKnownTokenRefreshState `protobuf:"varint,50,opt,name=token_refresh_from_state,json=tokenRefreshFromState,proto3,enum=autonomic.ext.event.state.tokenrefresh.WellKnownTokenRefreshState,oneof"`
}

type StateTransition_ExecutePendingUpdatesFromState struct {
	ExecutePendingUpdatesFromState state.WellKnownExecutePendingUpdatesState `protobuf:"varint,53,opt,name=execute_pending_updates_from_state,json=executePendingUpdatesFromState,proto3,enum=autonomic.ext.event.state.executependingupdates.WellKnownExecutePendingUpdatesState,oneof"`
}

type StateTransition_WifiConfigFromState struct {
	WifiConfigFromState state.WellKnownWifiConfigState `protobuf:"varint,56,opt,name=wifi_config_from_state,json=wifiConfigFromState,proto3,enum=autonomic.ext.event.state.wificonfig.WellKnownWifiConfigState,oneof"`
}

type StateTransition_OnDemandStatusUpdateFromState struct {
	OnDemandStatusUpdateFromState state.WellKnownOnDemandStatusUpdateState `protobuf:"varint,59,opt,name=on_demand_status_update_from_state,json=onDemandStatusUpdateFromState,proto3,enum=autonomic.ext.event.state.ondemandstatusupdate.WellKnownOnDemandStatusUpdateState,oneof"`
}

type StateTransition_WifiStatusFromState struct {
	WifiStatusFromState state.WellKnownWifiStatusState `protobuf:"varint,62,opt,name=wifi_status_from_state,json=wifiStatusFromState,proto3,enum=autonomic.ext.event.state.wifistatus.WellKnownWifiStatusState,oneof"`
}

type StateTransition_ReportWifiUsageFromState struct {
	ReportWifiUsageFromState state.WellKnownReportWifiUsageState `protobuf:"varint,65,opt,name=report_wifi_usage_from_state,json=reportWifiUsageFromState,proto3,enum=autonomic.ext.event.state.reportwifiusage.WellKnownReportWifiUsageState,oneof"`
}

type StateTransition_CommandCancellationFromState struct {
	CommandCancellationFromState state.WellKnownCommandCancellationState `protobuf:"varint,68,opt,name=command_cancellation_from_state,json=commandCancellationFromState,proto3,enum=autonomic.ext.event.state.cancellation.WellKnownCommandCancellationState,oneof"`
}

type StateTransition_VehicleClaimValidationFromState struct {
	VehicleClaimValidationFromState state.WellKnownVehicleClaimValidationState `protobuf:"varint,71,opt,name=vehicle_claim_validation_from_state,json=vehicleClaimValidationFromState,proto3,enum=autonomic.ext.event.state.vehicleclaimvalidation.WellKnownVehicleClaimValidationState,oneof"`
}

type StateTransition_RetrieveDevicePairingCodeFromState struct {
	RetrieveDevicePairingCodeFromState state.WellKnownRetrieveDevicePairingCodeState `protobuf:"varint,74,opt,name=retrieve_device_pairing_code_from_state,json=retrieveDevicePairingCodeFromState,proto3,enum=autonomic.ext.event.state.retrievedevicepairingcode.WellKnownRetrieveDevicePairingCodeState,oneof"`
}

type StateTransition_ChangeConfigProfileFromState struct {
	ChangeConfigProfileFromState state.WellKnownChangeConfigProfileState `protobuf:"varint,77,opt,name=change_config_profile_from_state,json=changeConfigProfileFromState,proto3,enum=autonomic.ext.event.state.changeconfigprofile.WellKnownChangeConfigProfileState,oneof"`
}

type StateTransition_ConfigureTelemetryEmissionFromState struct {
	ConfigureTelemetryEmissionFromState state.WellKnownConfigureTelemetryEmissionState `protobuf:"varint,80,opt,name=configure_telemetry_emission_from_state,json=configureTelemetryEmissionFromState,proto3,enum=autonomic.ext.event.state.configuretelemetryemission.WellKnownConfigureTelemetryEmissionState,oneof"`
}

type StateTransition_UserAuthConfirmationFromState struct {
	UserAuthConfirmationFromState state.WellKnownUserAuthConfirmationState `protobuf:"varint,83,opt,name=user_auth_confirmation_from_state,json=userAuthConfirmationFromState,proto3,enum=autonomic.ext.event.state.userauthconfirmation.WellKnownUserAuthConfirmationState,oneof"`
}

type StateTransition_AntiTheftFromState struct {
	AntiTheftFromState state.WellKnownAntiTheftState `protobuf:"varint,86,opt,name=anti_theft_from_state,json=antiTheftFromState,proto3,enum=autonomic.ext.event.state.antitheft.WellKnownAntiTheftState,oneof"`
}

type StateTransition_HmiApplicationMessageFromState struct {
	HmiApplicationMessageFromState state.WellKnownHMIApplicationMessageState `protobuf:"varint,89,opt,name=hmi_application_message_from_state,json=hmiApplicationMessageFromState,proto3,enum=autonomic.ext.event.state.hmiapplicationmessage.WellKnownHMIApplicationMessageState,oneof"`
}

type StateTransition_CommandPreclusionFromState struct {
	CommandPreclusionFromState state.WellKnownCommandPreclusionState `protobuf:"varint,92,opt,name=command_preclusion_from_state,json=commandPreclusionFromState,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownCommandPreclusionState,oneof"`
}

type StateTransition_FirmwareUpgradeCommandPreclusionFromState struct {
	FirmwareUpgradeCommandPreclusionFromState state.WellKnownFirmwareUpgradeCommandPreclusionState `protobuf:"varint,95,opt,name=firmware_upgrade_command_preclusion_from_state,json=firmwareUpgradeCommandPreclusionFromState,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownFirmwareUpgradeCommandPreclusionState,oneof"`
}

type StateTransition_DeepSleepCommandPreclusionFromState struct {
	DeepSleepCommandPreclusionFromState state.WellKnownDeepSleepCommandPreclusionState `protobuf:"varint,98,opt,name=deep_sleep_command_preclusion_from_state,json=deepSleepCommandPreclusionFromState,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownDeepSleepCommandPreclusionState,oneof"`
}

type StateTransition_CarrierRegistrationCommandPreclusionFromState struct {
	CarrierRegistrationCommandPreclusionFromState state.WellKnownCarrierRegistrationCommandPreclusionState `protobuf:"varint,101,opt,name=carrier_registration_command_preclusion_from_state,json=carrierRegistrationCommandPreclusionFromState,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownCarrierRegistrationCommandPreclusionState,oneof"`
}

type StateTransition_TemperatureThresholdCommandPreclusionFromState struct {
	TemperatureThresholdCommandPreclusionFromState state.WellKnownTemperatureThresholdCommandPreclusionState `protobuf:"varint,104,opt,name=temperature_threshold_command_preclusion_from_state,json=temperatureThresholdCommandPreclusionFromState,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownTemperatureThresholdCommandPreclusionState,oneof"`
}

type StateTransition_ActuationFromState struct {
	ActuationFromState state.WellKnownActuationState `protobuf:"varint,119,opt,name=actuation_from_state,json=actuationFromState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_LockFromState struct {
	LockFromState state.WellKnownActuationState `protobuf:"varint,32,opt,name=lock_from_state,json=lockFromState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_UnlockFromState struct {
	UnlockFromState state.WellKnownActuationState `protobuf:"varint,35,opt,name=unlock_from_state,json=unlockFromState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_RemoteStartFromState struct {
	RemoteStartFromState state.WellKnownActuationState `protobuf:"varint,38,opt,name=remote_start_from_state,json=remoteStartFromState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_CancelRemoteStartFromState struct {
	CancelRemoteStartFromState state.WellKnownActuationState `protobuf:"varint,41,opt,name=cancel_remote_start_from_state,json=cancelRemoteStartFromState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_StartTelemetryCollectionFromState struct {
	StartTelemetryCollectionFromState state.WellKnownActuationState `protobuf:"varint,107,opt,name=start_telemetry_collection_from_state,json=startTelemetryCollectionFromState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_CancelTelemetryCollectionFromState struct {
	CancelTelemetryCollectionFromState state.WellKnownActuationState `protobuf:"varint,110,opt,name=cancel_telemetry_collection_from_state,json=cancelTelemetryCollectionFromState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_VehicleCueFromState struct {
	VehicleCueFromState state.WellKnownActuationState `protobuf:"varint,113,opt,name=vehicle_cue_from_state,json=vehicleCueFromState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_PanicCueFromState struct {
	PanicCueFromState state.WellKnownActuationState `protobuf:"varint,116,opt,name=panic_cue_from_state,json=panicCueFromState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

func (*StateTransition_StringFromState) isStateTransition_FromState() {}

func (*StateTransition_DeprecatedDeploymentFromState) isStateTransition_FromState() {}

func (*StateTransition_VinDiscoveryFromState) isStateTransition_FromState() {}

func (*StateTransition_DeviceWakeupFromState) isStateTransition_FromState() {}

func (*StateTransition_ModuleDiscoveryFromState) isStateTransition_FromState() {}

func (*StateTransition_DeviceConfigResetFromState) isStateTransition_FromState() {}

func (*StateTransition_DeviceDiagnosticFromState) isStateTransition_FromState() {}

func (*StateTransition_KeyRotationFromState) isStateTransition_FromState() {}

func (*StateTransition_DeploymentFromState) isStateTransition_FromState() {}

func (*StateTransition_ConfigurationUpdateFromState) isStateTransition_FromState() {}

func (*StateTransition_HmiDisplayFromState) isStateTransition_FromState() {}

func (*StateTransition_TokenRefreshFromState) isStateTransition_FromState() {}

func (*StateTransition_ExecutePendingUpdatesFromState) isStateTransition_FromState() {}

func (*StateTransition_WifiConfigFromState) isStateTransition_FromState() {}

func (*StateTransition_OnDemandStatusUpdateFromState) isStateTransition_FromState() {}

func (*StateTransition_WifiStatusFromState) isStateTransition_FromState() {}

func (*StateTransition_ReportWifiUsageFromState) isStateTransition_FromState() {}

func (*StateTransition_CommandCancellationFromState) isStateTransition_FromState() {}

func (*StateTransition_VehicleClaimValidationFromState) isStateTransition_FromState() {}

func (*StateTransition_RetrieveDevicePairingCodeFromState) isStateTransition_FromState() {}

func (*StateTransition_ChangeConfigProfileFromState) isStateTransition_FromState() {}

func (*StateTransition_ConfigureTelemetryEmissionFromState) isStateTransition_FromState() {}

func (*StateTransition_UserAuthConfirmationFromState) isStateTransition_FromState() {}

func (*StateTransition_AntiTheftFromState) isStateTransition_FromState() {}

func (*StateTransition_HmiApplicationMessageFromState) isStateTransition_FromState() {}

func (*StateTransition_CommandPreclusionFromState) isStateTransition_FromState() {}

func (*StateTransition_FirmwareUpgradeCommandPreclusionFromState) isStateTransition_FromState() {}

func (*StateTransition_DeepSleepCommandPreclusionFromState) isStateTransition_FromState() {}

func (*StateTransition_CarrierRegistrationCommandPreclusionFromState) isStateTransition_FromState() {}

func (*StateTransition_TemperatureThresholdCommandPreclusionFromState) isStateTransition_FromState() {}

func (*StateTransition_ActuationFromState) isStateTransition_FromState() {}

func (*StateTransition_LockFromState) isStateTransition_FromState() {}

func (*StateTransition_UnlockFromState) isStateTransition_FromState() {}

func (*StateTransition_RemoteStartFromState) isStateTransition_FromState() {}

func (*StateTransition_CancelRemoteStartFromState) isStateTransition_FromState() {}

func (*StateTransition_StartTelemetryCollectionFromState) isStateTransition_FromState() {}

func (*StateTransition_CancelTelemetryCollectionFromState) isStateTransition_FromState() {}

func (*StateTransition_VehicleCueFromState) isStateTransition_FromState() {}

func (*StateTransition_PanicCueFromState) isStateTransition_FromState() {}

func (m *StateTransition) GetFromState() isStateTransition_FromState {
	if m != nil {
		return m.FromState
	}
	return nil
}

func (m *StateTransition) GetStringFromState() string {
	if x, ok := m.GetFromState().(*StateTransition_StringFromState); ok {
		return x.StringFromState
	}
	return ""
}

// Deprecated: Do not use.
func (m *StateTransition) GetDeprecatedDeploymentFromState() WellKnownDeploymentState {
	if x, ok := m.GetFromState().(*StateTransition_DeprecatedDeploymentFromState); ok {
		return x.DeprecatedDeploymentFromState
	}
	return WellKnownDeploymentState_UNKNOWN_DEPLOYMENT_STATE
}

func (m *StateTransition) GetVinDiscoveryFromState() state.WellKnownVinDiscoveryState {
	if x, ok := m.GetFromState().(*StateTransition_VinDiscoveryFromState); ok {
		return x.VinDiscoveryFromState
	}
	return state.WellKnownVinDiscoveryState_UNKNOWN_STATE
}

func (m *StateTransition) GetDeviceWakeupFromState() state.WellKnownDeviceWakeupState {
	if x, ok := m.GetFromState().(*StateTransition_DeviceWakeupFromState); ok {
		return x.DeviceWakeupFromState
	}
	return state.WellKnownDeviceWakeupState_UNKNOWN_STATE
}

func (m *StateTransition) GetModuleDiscoveryFromState() state.WellKnownModuleDiscoveryState {
	if x, ok := m.GetFromState().(*StateTransition_ModuleDiscoveryFromState); ok {
		return x.ModuleDiscoveryFromState
	}
	return state.WellKnownModuleDiscoveryState_UNKNOWN_STATE
}

func (m *StateTransition) GetDeviceConfigResetFromState() state.WellKnownDeviceConfigResetState {
	if x, ok := m.GetFromState().(*StateTransition_DeviceConfigResetFromState); ok {
		return x.DeviceConfigResetFromState
	}
	return state.WellKnownDeviceConfigResetState_UNKNOWN_STATE
}

func (m *StateTransition) GetDeviceDiagnosticFromState() state.WellKnownDeviceDiagnosticState {
	if x, ok := m.GetFromState().(*StateTransition_DeviceDiagnosticFromState); ok {
		return x.DeviceDiagnosticFromState
	}
	return state.WellKnownDeviceDiagnosticState_UNKNOWN_STATE
}

func (m *StateTransition) GetKeyRotationFromState() state.WellKnownKeyRotationState {
	if x, ok := m.GetFromState().(*StateTransition_KeyRotationFromState); ok {
		return x.KeyRotationFromState
	}
	return state.WellKnownKeyRotationState_UNKNOWN_STATE
}

func (m *StateTransition) GetDeploymentFromState() state.WellKnownDeploymentState {
	if x, ok := m.GetFromState().(*StateTransition_DeploymentFromState); ok {
		return x.DeploymentFromState
	}
	return state.WellKnownDeploymentState_UNKNOWN_STATE
}

func (m *StateTransition) GetConfigurationUpdateFromState() state.WellKnownConfigurationUpdateState {
	if x, ok := m.GetFromState().(*StateTransition_ConfigurationUpdateFromState); ok {
		return x.ConfigurationUpdateFromState
	}
	return state.WellKnownConfigurationUpdateState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetHmiDisplayFromState() state.WellKnownHMIDisplayState {
	if x, ok := m.GetFromState().(*StateTransition_HmiDisplayFromState); ok {
		return x.HmiDisplayFromState
	}
	return state.WellKnownHMIDisplayState_UNKNOWN_STATE
}

func (m *StateTransition) GetTokenRefreshFromState() state.WellKnownTokenRefreshState {
	if x, ok := m.GetFromState().(*StateTransition_TokenRefreshFromState); ok {
		return x.TokenRefreshFromState
	}
	return state.WellKnownTokenRefreshState_UNKNOWN_STATE
}

func (m *StateTransition) GetExecutePendingUpdatesFromState() state.WellKnownExecutePendingUpdatesState {
	if x, ok := m.GetFromState().(*StateTransition_ExecutePendingUpdatesFromState); ok {
		return x.ExecutePendingUpdatesFromState
	}
	return state.WellKnownExecutePendingUpdatesState_UNKNOWN_STATE
}

func (m *StateTransition) GetWifiConfigFromState() state.WellKnownWifiConfigState {
	if x, ok := m.GetFromState().(*StateTransition_WifiConfigFromState); ok {
		return x.WifiConfigFromState
	}
	return state.WellKnownWifiConfigState_UNKNOWN_STATE
}

func (m *StateTransition) GetOnDemandStatusUpdateFromState() state.WellKnownOnDemandStatusUpdateState {
	if x, ok := m.GetFromState().(*StateTransition_OnDemandStatusUpdateFromState); ok {
		return x.OnDemandStatusUpdateFromState
	}
	return state.WellKnownOnDemandStatusUpdateState_UNKNOWN_STATE
}

func (m *StateTransition) GetWifiStatusFromState() state.WellKnownWifiStatusState {
	if x, ok := m.GetFromState().(*StateTransition_WifiStatusFromState); ok {
		return x.WifiStatusFromState
	}
	return state.WellKnownWifiStatusState_UNKNOWN_STATE
}

func (m *StateTransition) GetReportWifiUsageFromState() state.WellKnownReportWifiUsageState {
	if x, ok := m.GetFromState().(*StateTransition_ReportWifiUsageFromState); ok {
		return x.ReportWifiUsageFromState
	}
	return state.WellKnownReportWifiUsageState_UNKNOWN_STATE
}

func (m *StateTransition) GetCommandCancellationFromState() state.WellKnownCommandCancellationState {
	if x, ok := m.GetFromState().(*StateTransition_CommandCancellationFromState); ok {
		return x.CommandCancellationFromState
	}
	return state.WellKnownCommandCancellationState_UNKNOWN_STATE
}

func (m *StateTransition) GetVehicleClaimValidationFromState() state.WellKnownVehicleClaimValidationState {
	if x, ok := m.GetFromState().(*StateTransition_VehicleClaimValidationFromState); ok {
		return x.VehicleClaimValidationFromState
	}
	return state.WellKnownVehicleClaimValidationState_UNKNOWN_STATE
}

func (m *StateTransition) GetRetrieveDevicePairingCodeFromState() state.WellKnownRetrieveDevicePairingCodeState {
	if x, ok := m.GetFromState().(*StateTransition_RetrieveDevicePairingCodeFromState); ok {
		return x.RetrieveDevicePairingCodeFromState
	}
	return state.WellKnownRetrieveDevicePairingCodeState_UNKNOWN_STATE
}

func (m *StateTransition) GetChangeConfigProfileFromState() state.WellKnownChangeConfigProfileState {
	if x, ok := m.GetFromState().(*StateTransition_ChangeConfigProfileFromState); ok {
		return x.ChangeConfigProfileFromState
	}
	return state.WellKnownChangeConfigProfileState_UNKNOWN_STATE
}

func (m *StateTransition) GetConfigureTelemetryEmissionFromState() state.WellKnownConfigureTelemetryEmissionState {
	if x, ok := m.GetFromState().(*StateTransition_ConfigureTelemetryEmissionFromState); ok {
		return x.ConfigureTelemetryEmissionFromState
	}
	return state.WellKnownConfigureTelemetryEmissionState_UNKNOWN_STATE
}

func (m *StateTransition) GetUserAuthConfirmationFromState() state.WellKnownUserAuthConfirmationState {
	if x, ok := m.GetFromState().(*StateTransition_UserAuthConfirmationFromState); ok {
		return x.UserAuthConfirmationFromState
	}
	return state.WellKnownUserAuthConfirmationState_UNKNOWN_STATE
}

func (m *StateTransition) GetAntiTheftFromState() state.WellKnownAntiTheftState {
	if x, ok := m.GetFromState().(*StateTransition_AntiTheftFromState); ok {
		return x.AntiTheftFromState
	}
	return state.WellKnownAntiTheftState_UNKNOWN_STATE
}

func (m *StateTransition) GetHmiApplicationMessageFromState() state.WellKnownHMIApplicationMessageState {
	if x, ok := m.GetFromState().(*StateTransition_HmiApplicationMessageFromState); ok {
		return x.HmiApplicationMessageFromState
	}
	return state.WellKnownHMIApplicationMessageState_UNKNOWN_STATE
}

func (m *StateTransition) GetCommandPreclusionFromState() state.WellKnownCommandPreclusionState {
	if x, ok := m.GetFromState().(*StateTransition_CommandPreclusionFromState); ok {
		return x.CommandPreclusionFromState
	}
	return state.WellKnownCommandPreclusionState_UNKNOWN_STATE
}

func (m *StateTransition) GetFirmwareUpgradeCommandPreclusionFromState() state.WellKnownFirmwareUpgradeCommandPreclusionState {
	if x, ok := m.GetFromState().(*StateTransition_FirmwareUpgradeCommandPreclusionFromState); ok {
		return x.FirmwareUpgradeCommandPreclusionFromState
	}
	return state.WellKnownFirmwareUpgradeCommandPreclusionState_UNKNOWN_FIRMWARE_UPDATE_COMMAND_PRECLUSION_STATE
}

func (m *StateTransition) GetDeepSleepCommandPreclusionFromState() state.WellKnownDeepSleepCommandPreclusionState {
	if x, ok := m.GetFromState().(*StateTransition_DeepSleepCommandPreclusionFromState); ok {
		return x.DeepSleepCommandPreclusionFromState
	}
	return state.WellKnownDeepSleepCommandPreclusionState_UNKNOWN_DEEP_SLEEP_COMMAND_PRECLUSION_STATE
}

func (m *StateTransition) GetCarrierRegistrationCommandPreclusionFromState() state.WellKnownCarrierRegistrationCommandPreclusionState {
	if x, ok := m.GetFromState().(*StateTransition_CarrierRegistrationCommandPreclusionFromState); ok {
		return x.CarrierRegistrationCommandPreclusionFromState
	}
	return state.WellKnownCarrierRegistrationCommandPreclusionState_UNKNOWN_CARRIER_REGISTRATION_COMMAND_PRECLUSION_STATE
}

func (m *StateTransition) GetTemperatureThresholdCommandPreclusionFromState() state.WellKnownTemperatureThresholdCommandPreclusionState {
	if x, ok := m.GetFromState().(*StateTransition_TemperatureThresholdCommandPreclusionFromState); ok {
		return x.TemperatureThresholdCommandPreclusionFromState
	}
	return state.WellKnownTemperatureThresholdCommandPreclusionState_UNKNOWN_TEMPERATURE_THRESHOLD_COMMAND_PRECLUSION_STATE
}

func (m *StateTransition) GetActuationFromState() state.WellKnownActuationState {
	if x, ok := m.GetFromState().(*StateTransition_ActuationFromState); ok {
		return x.ActuationFromState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetLockFromState() state.WellKnownActuationState {
	if x, ok := m.GetFromState().(*StateTransition_LockFromState); ok {
		return x.LockFromState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetUnlockFromState() state.WellKnownActuationState {
	if x, ok := m.GetFromState().(*StateTransition_UnlockFromState); ok {
		return x.UnlockFromState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetRemoteStartFromState() state.WellKnownActuationState {
	if x, ok := m.GetFromState().(*StateTransition_RemoteStartFromState); ok {
		return x.RemoteStartFromState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetCancelRemoteStartFromState() state.WellKnownActuationState {
	if x, ok := m.GetFromState().(*StateTransition_CancelRemoteStartFromState); ok {
		return x.CancelRemoteStartFromState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetStartTelemetryCollectionFromState() state.WellKnownActuationState {
	if x, ok := m.GetFromState().(*StateTransition_StartTelemetryCollectionFromState); ok {
		return x.StartTelemetryCollectionFromState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetCancelTelemetryCollectionFromState() state.WellKnownActuationState {
	if x, ok := m.GetFromState().(*StateTransition_CancelTelemetryCollectionFromState); ok {
		return x.CancelTelemetryCollectionFromState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetVehicleCueFromState() state.WellKnownActuationState {
	if x, ok := m.GetFromState().(*StateTransition_VehicleCueFromState); ok {
		return x.VehicleCueFromState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetPanicCueFromState() state.WellKnownActuationState {
	if x, ok := m.GetFromState().(*StateTransition_PanicCueFromState); ok {
		return x.PanicCueFromState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

type isStateTransition_ToState interface {
	isStateTransition_ToState()
}

type StateTransition_StringToState struct {
	StringToState string `protobuf:"bytes,3,opt,name=string_to_state,json=stringToState,proto3,oneof"`
}

type StateTransition_DeprecatedDeploymentToState struct {
	DeprecatedDeploymentToState WellKnownDeploymentState `protobuf:"varint,9,opt,name=deprecated_deployment_to_state,json=deprecatedDeploymentToState,proto3,enum=autonomic.ext.event.WellKnownDeploymentState,oneof"`
}

type StateTransition_VinDiscoveryToState struct {
	VinDiscoveryToState state.WellKnownVinDiscoveryState `protobuf:"varint,12,opt,name=vin_discovery_to_state,json=vinDiscoveryToState,proto3,enum=autonomic.ext.event.state.vindiscovery.WellKnownVinDiscoveryState,oneof"`
}

type StateTransition_DeviceWakeupToState struct {
	DeviceWakeupToState state.WellKnownDeviceWakeupState `protobuf:"varint,15,opt,name=device_wakeup_to_state,json=deviceWakeupToState,proto3,enum=autonomic.ext.event.state.devicewakeup.WellKnownDeviceWakeupState,oneof"`
}

type StateTransition_ModuleDiscoveryToState struct {
	ModuleDiscoveryToState state.WellKnownModuleDiscoveryState `protobuf:"varint,18,opt,name=module_discovery_to_state,json=moduleDiscoveryToState,proto3,enum=autonomic.ext.event.state.modulediscovery.WellKnownModuleDiscoveryState,oneof"`
}

type StateTransition_DeviceConfigResetToState struct {
	DeviceConfigResetToState state.WellKnownDeviceConfigResetState `protobuf:"varint,21,opt,name=device_config_reset_to_state,json=deviceConfigResetToState,proto3,enum=autonomic.ext.event.state.deviceconfigreset.WellKnownDeviceConfigResetState,oneof"`
}

type StateTransition_DeviceDiagnosticToState struct {
	DeviceDiagnosticToState state.WellKnownDeviceDiagnosticState `protobuf:"varint,24,opt,name=device_diagnostic_to_state,json=deviceDiagnosticToState,proto3,enum=autonomic.ext.event.state.devicediagnostic.WellKnownDeviceDiagnosticState,oneof"`
}

type StateTransition_KeyRotationToState struct {
	KeyRotationToState state.WellKnownKeyRotationState `protobuf:"varint,27,opt,name=key_rotation_to_state,json=keyRotationToState,proto3,enum=autonomic.ext.event.state.keyrotation.WellKnownKeyRotationState,oneof"`
}

type StateTransition_DeploymentToState struct {
	DeploymentToState state.WellKnownDeploymentState `protobuf:"varint,30,opt,name=deployment_to_state,json=deploymentToState,proto3,enum=autonomic.ext.event.state.deployment.WellKnownDeploymentState,oneof"`
}

type StateTransition_ConfigurationUpdateToState struct {
	ConfigurationUpdateToState state.WellKnownConfigurationUpdateState `protobuf:"varint,45,opt,name=configuration_update_to_state,json=configurationUpdateToState,proto3,enum=autonomic.ext.event.state.configurationupdate.WellKnownConfigurationUpdateState,oneof"`
}

type StateTransition_HmiDisplayToState struct {
	HmiDisplayToState state.WellKnownHMIDisplayState `protobuf:"varint,48,opt,name=hmi_display_to_state,json=hmiDisplayToState,proto3,enum=autonomic.ext.event.state.hmidisplay.WellKnownHMIDisplayState,oneof"`
}

type StateTransition_TokenRefreshToState struct {
	TokenRefreshToState state.WellKnownTokenRefreshState `protobuf:"varint,51,opt,name=token_refresh_to_state,json=tokenRefreshToState,proto3,enum=autonomic.ext.event.state.tokenrefresh.WellKnownTokenRefreshState,oneof"`
}

type StateTransition_ExecutePendingUpdatesToState struct {
	ExecutePendingUpdatesToState state.WellKnownExecutePendingUpdatesState `protobuf:"varint,54,opt,name=execute_pending_updates_to_state,json=executePendingUpdatesToState,proto3,enum=autonomic.ext.event.state.executependingupdates.WellKnownExecutePendingUpdatesState,oneof"`
}

type StateTransition_WifiConfigToState struct {
	WifiConfigToState state.WellKnownWifiConfigState `protobuf:"varint,57,opt,name=wifi_config_to_state,json=wifiConfigToState,proto3,enum=autonomic.ext.event.state.wificonfig.WellKnownWifiConfigState,oneof"`
}

type StateTransition_OnDemandStatusUpdateToState struct {
	OnDemandStatusUpdateToState state.WellKnownOnDemandStatusUpdateState `protobuf:"varint,60,opt,name=on_demand_status_update_to_state,json=onDemandStatusUpdateToState,proto3,enum=autonomic.ext.event.state.ondemandstatusupdate.WellKnownOnDemandStatusUpdateState,oneof"`
}

type StateTransition_WifiStatusToState struct {
	WifiStatusToState state.WellKnownWifiStatusState `protobuf:"varint,63,opt,name=wifi_status_to_state,json=wifiStatusToState,proto3,enum=autonomic.ext.event.state.wifistatus.WellKnownWifiStatusState,oneof"`
}

type StateTransition_ReportWifiUsageToState struct {
	ReportWifiUsageToState state.WellKnownReportWifiUsageState `protobuf:"varint,66,opt,name=report_wifi_usage_to_state,json=reportWifiUsageToState,proto3,enum=autonomic.ext.event.state.reportwifiusage.WellKnownReportWifiUsageState,oneof"`
}

type StateTransition_CommandCancellationToState struct {
	CommandCancellationToState state.WellKnownCommandCancellationState `protobuf:"varint,69,opt,name=command_cancellation_to_state,json=commandCancellationToState,proto3,enum=autonomic.ext.event.state.cancellation.WellKnownCommandCancellationState,oneof"`
}

type StateTransition_VehicleClaimValidationToState struct {
	VehicleClaimValidationToState state.WellKnownVehicleClaimValidationState `protobuf:"varint,72,opt,name=vehicle_claim_validation_to_state,json=vehicleClaimValidationToState,proto3,enum=autonomic.ext.event.state.vehicleclaimvalidation.WellKnownVehicleClaimValidationState,oneof"`
}

type StateTransition_RetrieveDevicePairingCodeToState struct {
	RetrieveDevicePairingCodeToState state.WellKnownRetrieveDevicePairingCodeState `protobuf:"varint,75,opt,name=retrieve_device_pairing_code_to_state,json=retrieveDevicePairingCodeToState,proto3,enum=autonomic.ext.event.state.retrievedevicepairingcode.WellKnownRetrieveDevicePairingCodeState,oneof"`
}

type StateTransition_ChangeConfigProfileToState struct {
	ChangeConfigProfileToState state.WellKnownChangeConfigProfileState `protobuf:"varint,78,opt,name=change_config_profile_to_state,json=changeConfigProfileToState,proto3,enum=autonomic.ext.event.state.changeconfigprofile.WellKnownChangeConfigProfileState,oneof"`
}

type StateTransition_ConfigureTelemetryEmissionToState struct {
	ConfigureTelemetryEmissionToState state.WellKnownConfigureTelemetryEmissionState `protobuf:"varint,81,opt,name=configure_telemetry_emission_to_state,json=configureTelemetryEmissionToState,proto3,enum=autonomic.ext.event.state.configuretelemetryemission.WellKnownConfigureTelemetryEmissionState,oneof"`
}

type StateTransition_UserAuthConfirmationToState struct {
	UserAuthConfirmationToState state.WellKnownUserAuthConfirmationState `protobuf:"varint,84,opt,name=user_auth_confirmation_to_state,json=userAuthConfirmationToState,proto3,enum=autonomic.ext.event.state.userauthconfirmation.WellKnownUserAuthConfirmationState,oneof"`
}

type StateTransition_AntiTheftToState struct {
	AntiTheftToState state.WellKnownAntiTheftState `protobuf:"varint,87,opt,name=anti_theft_to_state,json=antiTheftToState,proto3,enum=autonomic.ext.event.state.antitheft.WellKnownAntiTheftState,oneof"`
}

type StateTransition_HmiApplicationMessageToState struct {
	HmiApplicationMessageToState state.WellKnownHMIApplicationMessageState `protobuf:"varint,90,opt,name=hmi_application_message_to_state,json=hmiApplicationMessageToState,proto3,enum=autonomic.ext.event.state.hmiapplicationmessage.WellKnownHMIApplicationMessageState,oneof"`
}

type StateTransition_CommandPreclusionToState struct {
	CommandPreclusionToState state.WellKnownCommandPreclusionState `protobuf:"varint,93,opt,name=command_preclusion_to_state,json=commandPreclusionToState,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownCommandPreclusionState,oneof"`
}

type StateTransition_FirmwareUpgradeCommandPreclusionToState struct {
	FirmwareUpgradeCommandPreclusionToState state.WellKnownFirmwareUpgradeCommandPreclusionState `protobuf:"varint,96,opt,name=firmware_upgrade_command_preclusion_to_state,json=firmwareUpgradeCommandPreclusionToState,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownFirmwareUpgradeCommandPreclusionState,oneof"`
}

type StateTransition_DeepSleepCommandPreclusionToState struct {
	DeepSleepCommandPreclusionToState state.WellKnownDeepSleepCommandPreclusionState `protobuf:"varint,99,opt,name=deep_sleep_command_preclusion_to_state,json=deepSleepCommandPreclusionToState,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownDeepSleepCommandPreclusionState,oneof"`
}

type StateTransition_CarrierRegistrationCommandPreclusionToState struct {
	CarrierRegistrationCommandPreclusionToState state.WellKnownCarrierRegistrationCommandPreclusionState `protobuf:"varint,102,opt,name=carrier_registration_command_preclusion_to_state,json=carrierRegistrationCommandPreclusionToState,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownCarrierRegistrationCommandPreclusionState,oneof"`
}

type StateTransition_TemperatureThresholdCommandPreclusionToState struct {
	TemperatureThresholdCommandPreclusionToState state.WellKnownTemperatureThresholdCommandPreclusionState `protobuf:"varint,105,opt,name=temperature_threshold_command_preclusion_to_state,json=temperatureThresholdCommandPreclusionToState,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownTemperatureThresholdCommandPreclusionState,oneof"`
}

type StateTransition_ActuationToState struct {
	ActuationToState state.WellKnownActuationState `protobuf:"varint,120,opt,name=actuation_to_state,json=actuationToState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_LockToState struct {
	LockToState state.WellKnownActuationState `protobuf:"varint,33,opt,name=lock_to_state,json=lockToState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_UnlockToState struct {
	UnlockToState state.WellKnownActuationState `protobuf:"varint,36,opt,name=unlock_to_state,json=unlockToState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_RemoteStartToState struct {
	RemoteStartToState state.WellKnownActuationState `protobuf:"varint,39,opt,name=remote_start_to_state,json=remoteStartToState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_CancelRemoteStartToState struct {
	CancelRemoteStartToState state.WellKnownActuationState `protobuf:"varint,42,opt,name=cancel_remote_start_to_state,json=cancelRemoteStartToState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_StartTelemetryCollectionToState struct {
	StartTelemetryCollectionToState state.WellKnownActuationState `protobuf:"varint,108,opt,name=start_telemetry_collection_to_state,json=startTelemetryCollectionToState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_CancelTelemetryCollectionToState struct {
	CancelTelemetryCollectionToState state.WellKnownActuationState `protobuf:"varint,111,opt,name=cancel_telemetry_collection_to_state,json=cancelTelemetryCollectionToState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_VehicleCueToState struct {
	VehicleCueToState state.WellKnownActuationState `protobuf:"varint,114,opt,name=vehicle_cue_to_state,json=vehicleCueToState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

type StateTransition_PanicCueToState struct {
	PanicCueToState state.WellKnownActuationState `protobuf:"varint,117,opt,name=panic_cue_to_state,json=panicCueToState,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationState,oneof"`
}

func (*StateTransition_StringToState) isStateTransition_ToState() {}

func (*StateTransition_DeprecatedDeploymentToState) isStateTransition_ToState() {}

func (*StateTransition_VinDiscoveryToState) isStateTransition_ToState() {}

func (*StateTransition_DeviceWakeupToState) isStateTransition_ToState() {}

func (*StateTransition_ModuleDiscoveryToState) isStateTransition_ToState() {}

func (*StateTransition_DeviceConfigResetToState) isStateTransition_ToState() {}

func (*StateTransition_DeviceDiagnosticToState) isStateTransition_ToState() {}

func (*StateTransition_KeyRotationToState) isStateTransition_ToState() {}

func (*StateTransition_DeploymentToState) isStateTransition_ToState() {}

func (*StateTransition_ConfigurationUpdateToState) isStateTransition_ToState() {}

func (*StateTransition_HmiDisplayToState) isStateTransition_ToState() {}

func (*StateTransition_TokenRefreshToState) isStateTransition_ToState() {}

func (*StateTransition_ExecutePendingUpdatesToState) isStateTransition_ToState() {}

func (*StateTransition_WifiConfigToState) isStateTransition_ToState() {}

func (*StateTransition_OnDemandStatusUpdateToState) isStateTransition_ToState() {}

func (*StateTransition_WifiStatusToState) isStateTransition_ToState() {}

func (*StateTransition_ReportWifiUsageToState) isStateTransition_ToState() {}

func (*StateTransition_CommandCancellationToState) isStateTransition_ToState() {}

func (*StateTransition_VehicleClaimValidationToState) isStateTransition_ToState() {}

func (*StateTransition_RetrieveDevicePairingCodeToState) isStateTransition_ToState() {}

func (*StateTransition_ChangeConfigProfileToState) isStateTransition_ToState() {}

func (*StateTransition_ConfigureTelemetryEmissionToState) isStateTransition_ToState() {}

func (*StateTransition_UserAuthConfirmationToState) isStateTransition_ToState() {}

func (*StateTransition_AntiTheftToState) isStateTransition_ToState() {}

func (*StateTransition_HmiApplicationMessageToState) isStateTransition_ToState() {}

func (*StateTransition_CommandPreclusionToState) isStateTransition_ToState() {}

func (*StateTransition_FirmwareUpgradeCommandPreclusionToState) isStateTransition_ToState() {}

func (*StateTransition_DeepSleepCommandPreclusionToState) isStateTransition_ToState() {}

func (*StateTransition_CarrierRegistrationCommandPreclusionToState) isStateTransition_ToState() {}

func (*StateTransition_TemperatureThresholdCommandPreclusionToState) isStateTransition_ToState() {}

func (*StateTransition_ActuationToState) isStateTransition_ToState() {}

func (*StateTransition_LockToState) isStateTransition_ToState() {}

func (*StateTransition_UnlockToState) isStateTransition_ToState() {}

func (*StateTransition_RemoteStartToState) isStateTransition_ToState() {}

func (*StateTransition_CancelRemoteStartToState) isStateTransition_ToState() {}

func (*StateTransition_StartTelemetryCollectionToState) isStateTransition_ToState() {}

func (*StateTransition_CancelTelemetryCollectionToState) isStateTransition_ToState() {}

func (*StateTransition_VehicleCueToState) isStateTransition_ToState() {}

func (*StateTransition_PanicCueToState) isStateTransition_ToState() {}

func (m *StateTransition) GetToState() isStateTransition_ToState {
	if m != nil {
		return m.ToState
	}
	return nil
}

func (m *StateTransition) GetStringToState() string {
	if x, ok := m.GetToState().(*StateTransition_StringToState); ok {
		return x.StringToState
	}
	return ""
}

// Deprecated: Do not use.
func (m *StateTransition) GetDeprecatedDeploymentToState() WellKnownDeploymentState {
	if x, ok := m.GetToState().(*StateTransition_DeprecatedDeploymentToState); ok {
		return x.DeprecatedDeploymentToState
	}
	return WellKnownDeploymentState_UNKNOWN_DEPLOYMENT_STATE
}

func (m *StateTransition) GetVinDiscoveryToState() state.WellKnownVinDiscoveryState {
	if x, ok := m.GetToState().(*StateTransition_VinDiscoveryToState); ok {
		return x.VinDiscoveryToState
	}
	return state.WellKnownVinDiscoveryState_UNKNOWN_STATE
}

func (m *StateTransition) GetDeviceWakeupToState() state.WellKnownDeviceWakeupState {
	if x, ok := m.GetToState().(*StateTransition_DeviceWakeupToState); ok {
		return x.DeviceWakeupToState
	}
	return state.WellKnownDeviceWakeupState_UNKNOWN_STATE
}

func (m *StateTransition) GetModuleDiscoveryToState() state.WellKnownModuleDiscoveryState {
	if x, ok := m.GetToState().(*StateTransition_ModuleDiscoveryToState); ok {
		return x.ModuleDiscoveryToState
	}
	return state.WellKnownModuleDiscoveryState_UNKNOWN_STATE
}

func (m *StateTransition) GetDeviceConfigResetToState() state.WellKnownDeviceConfigResetState {
	if x, ok := m.GetToState().(*StateTransition_DeviceConfigResetToState); ok {
		return x.DeviceConfigResetToState
	}
	return state.WellKnownDeviceConfigResetState_UNKNOWN_STATE
}

func (m *StateTransition) GetDeviceDiagnosticToState() state.WellKnownDeviceDiagnosticState {
	if x, ok := m.GetToState().(*StateTransition_DeviceDiagnosticToState); ok {
		return x.DeviceDiagnosticToState
	}
	return state.WellKnownDeviceDiagnosticState_UNKNOWN_STATE
}

func (m *StateTransition) GetKeyRotationToState() state.WellKnownKeyRotationState {
	if x, ok := m.GetToState().(*StateTransition_KeyRotationToState); ok {
		return x.KeyRotationToState
	}
	return state.WellKnownKeyRotationState_UNKNOWN_STATE
}

func (m *StateTransition) GetDeploymentToState() state.WellKnownDeploymentState {
	if x, ok := m.GetToState().(*StateTransition_DeploymentToState); ok {
		return x.DeploymentToState
	}
	return state.WellKnownDeploymentState_UNKNOWN_STATE
}

func (m *StateTransition) GetConfigurationUpdateToState() state.WellKnownConfigurationUpdateState {
	if x, ok := m.GetToState().(*StateTransition_ConfigurationUpdateToState); ok {
		return x.ConfigurationUpdateToState
	}
	return state.WellKnownConfigurationUpdateState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetHmiDisplayToState() state.WellKnownHMIDisplayState {
	if x, ok := m.GetToState().(*StateTransition_HmiDisplayToState); ok {
		return x.HmiDisplayToState
	}
	return state.WellKnownHMIDisplayState_UNKNOWN_STATE
}

func (m *StateTransition) GetTokenRefreshToState() state.WellKnownTokenRefreshState {
	if x, ok := m.GetToState().(*StateTransition_TokenRefreshToState); ok {
		return x.TokenRefreshToState
	}
	return state.WellKnownTokenRefreshState_UNKNOWN_STATE
}

func (m *StateTransition) GetExecutePendingUpdatesToState() state.WellKnownExecutePendingUpdatesState {
	if x, ok := m.GetToState().(*StateTransition_ExecutePendingUpdatesToState); ok {
		return x.ExecutePendingUpdatesToState
	}
	return state.WellKnownExecutePendingUpdatesState_UNKNOWN_STATE
}

func (m *StateTransition) GetWifiConfigToState() state.WellKnownWifiConfigState {
	if x, ok := m.GetToState().(*StateTransition_WifiConfigToState); ok {
		return x.WifiConfigToState
	}
	return state.WellKnownWifiConfigState_UNKNOWN_STATE
}

func (m *StateTransition) GetOnDemandStatusUpdateToState() state.WellKnownOnDemandStatusUpdateState {
	if x, ok := m.GetToState().(*StateTransition_OnDemandStatusUpdateToState); ok {
		return x.OnDemandStatusUpdateToState
	}
	return state.WellKnownOnDemandStatusUpdateState_UNKNOWN_STATE
}

func (m *StateTransition) GetWifiStatusToState() state.WellKnownWifiStatusState {
	if x, ok := m.GetToState().(*StateTransition_WifiStatusToState); ok {
		return x.WifiStatusToState
	}
	return state.WellKnownWifiStatusState_UNKNOWN_STATE
}

func (m *StateTransition) GetReportWifiUsageToState() state.WellKnownReportWifiUsageState {
	if x, ok := m.GetToState().(*StateTransition_ReportWifiUsageToState); ok {
		return x.ReportWifiUsageToState
	}
	return state.WellKnownReportWifiUsageState_UNKNOWN_STATE
}

func (m *StateTransition) GetCommandCancellationToState() state.WellKnownCommandCancellationState {
	if x, ok := m.GetToState().(*StateTransition_CommandCancellationToState); ok {
		return x.CommandCancellationToState
	}
	return state.WellKnownCommandCancellationState_UNKNOWN_STATE
}

func (m *StateTransition) GetVehicleClaimValidationToState() state.WellKnownVehicleClaimValidationState {
	if x, ok := m.GetToState().(*StateTransition_VehicleClaimValidationToState); ok {
		return x.VehicleClaimValidationToState
	}
	return state.WellKnownVehicleClaimValidationState_UNKNOWN_STATE
}

func (m *StateTransition) GetRetrieveDevicePairingCodeToState() state.WellKnownRetrieveDevicePairingCodeState {
	if x, ok := m.GetToState().(*StateTransition_RetrieveDevicePairingCodeToState); ok {
		return x.RetrieveDevicePairingCodeToState
	}
	return state.WellKnownRetrieveDevicePairingCodeState_UNKNOWN_STATE
}

func (m *StateTransition) GetChangeConfigProfileToState() state.WellKnownChangeConfigProfileState {
	if x, ok := m.GetToState().(*StateTransition_ChangeConfigProfileToState); ok {
		return x.ChangeConfigProfileToState
	}
	return state.WellKnownChangeConfigProfileState_UNKNOWN_STATE
}

func (m *StateTransition) GetConfigureTelemetryEmissionToState() state.WellKnownConfigureTelemetryEmissionState {
	if x, ok := m.GetToState().(*StateTransition_ConfigureTelemetryEmissionToState); ok {
		return x.ConfigureTelemetryEmissionToState
	}
	return state.WellKnownConfigureTelemetryEmissionState_UNKNOWN_STATE
}

func (m *StateTransition) GetUserAuthConfirmationToState() state.WellKnownUserAuthConfirmationState {
	if x, ok := m.GetToState().(*StateTransition_UserAuthConfirmationToState); ok {
		return x.UserAuthConfirmationToState
	}
	return state.WellKnownUserAuthConfirmationState_UNKNOWN_STATE
}

func (m *StateTransition) GetAntiTheftToState() state.WellKnownAntiTheftState {
	if x, ok := m.GetToState().(*StateTransition_AntiTheftToState); ok {
		return x.AntiTheftToState
	}
	return state.WellKnownAntiTheftState_UNKNOWN_STATE
}

func (m *StateTransition) GetHmiApplicationMessageToState() state.WellKnownHMIApplicationMessageState {
	if x, ok := m.GetToState().(*StateTransition_HmiApplicationMessageToState); ok {
		return x.HmiApplicationMessageToState
	}
	return state.WellKnownHMIApplicationMessageState_UNKNOWN_STATE
}

func (m *StateTransition) GetCommandPreclusionToState() state.WellKnownCommandPreclusionState {
	if x, ok := m.GetToState().(*StateTransition_CommandPreclusionToState); ok {
		return x.CommandPreclusionToState
	}
	return state.WellKnownCommandPreclusionState_UNKNOWN_STATE
}

func (m *StateTransition) GetFirmwareUpgradeCommandPreclusionToState() state.WellKnownFirmwareUpgradeCommandPreclusionState {
	if x, ok := m.GetToState().(*StateTransition_FirmwareUpgradeCommandPreclusionToState); ok {
		return x.FirmwareUpgradeCommandPreclusionToState
	}
	return state.WellKnownFirmwareUpgradeCommandPreclusionState_UNKNOWN_FIRMWARE_UPDATE_COMMAND_PRECLUSION_STATE
}

func (m *StateTransition) GetDeepSleepCommandPreclusionToState() state.WellKnownDeepSleepCommandPreclusionState {
	if x, ok := m.GetToState().(*StateTransition_DeepSleepCommandPreclusionToState); ok {
		return x.DeepSleepCommandPreclusionToState
	}
	return state.WellKnownDeepSleepCommandPreclusionState_UNKNOWN_DEEP_SLEEP_COMMAND_PRECLUSION_STATE
}

func (m *StateTransition) GetCarrierRegistrationCommandPreclusionToState() state.WellKnownCarrierRegistrationCommandPreclusionState {
	if x, ok := m.GetToState().(*StateTransition_CarrierRegistrationCommandPreclusionToState); ok {
		return x.CarrierRegistrationCommandPreclusionToState
	}
	return state.WellKnownCarrierRegistrationCommandPreclusionState_UNKNOWN_CARRIER_REGISTRATION_COMMAND_PRECLUSION_STATE
}

func (m *StateTransition) GetTemperatureThresholdCommandPreclusionToState() state.WellKnownTemperatureThresholdCommandPreclusionState {
	if x, ok := m.GetToState().(*StateTransition_TemperatureThresholdCommandPreclusionToState); ok {
		return x.TemperatureThresholdCommandPreclusionToState
	}
	return state.WellKnownTemperatureThresholdCommandPreclusionState_UNKNOWN_TEMPERATURE_THRESHOLD_COMMAND_PRECLUSION_STATE
}

func (m *StateTransition) GetActuationToState() state.WellKnownActuationState {
	if x, ok := m.GetToState().(*StateTransition_ActuationToState); ok {
		return x.ActuationToState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetLockToState() state.WellKnownActuationState {
	if x, ok := m.GetToState().(*StateTransition_LockToState); ok {
		return x.LockToState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetUnlockToState() state.WellKnownActuationState {
	if x, ok := m.GetToState().(*StateTransition_UnlockToState); ok {
		return x.UnlockToState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetRemoteStartToState() state.WellKnownActuationState {
	if x, ok := m.GetToState().(*StateTransition_RemoteStartToState); ok {
		return x.RemoteStartToState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetCancelRemoteStartToState() state.WellKnownActuationState {
	if x, ok := m.GetToState().(*StateTransition_CancelRemoteStartToState); ok {
		return x.CancelRemoteStartToState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetStartTelemetryCollectionToState() state.WellKnownActuationState {
	if x, ok := m.GetToState().(*StateTransition_StartTelemetryCollectionToState); ok {
		return x.StartTelemetryCollectionToState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetCancelTelemetryCollectionToState() state.WellKnownActuationState {
	if x, ok := m.GetToState().(*StateTransition_CancelTelemetryCollectionToState); ok {
		return x.CancelTelemetryCollectionToState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetVehicleCueToState() state.WellKnownActuationState {
	if x, ok := m.GetToState().(*StateTransition_VehicleCueToState); ok {
		return x.VehicleCueToState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

// Deprecated: Do not use.
func (m *StateTransition) GetPanicCueToState() state.WellKnownActuationState {
	if x, ok := m.GetToState().(*StateTransition_PanicCueToState); ok {
		return x.PanicCueToState
	}
	return state.WellKnownActuationState_UNKNOWN_STATE
}

type isStateTransition_Trigger interface {
	isStateTransition_Trigger()
}

type StateTransition_StringTrigger struct {
	StringTrigger string `protobuf:"bytes,4,opt,name=string_trigger,json=stringTrigger,proto3,oneof"`
}

type StateTransition_DeprecatedDeploymentTrigger struct {
	DeprecatedDeploymentTrigger WellKnownDeploymentTransitionTrigger `protobuf:"varint,10,opt,name=deprecated_deployment_trigger,json=deprecatedDeploymentTrigger,proto3,enum=autonomic.ext.event.WellKnownDeploymentTransitionTrigger,oneof"`
}

type StateTransition_VinDiscoveryTrigger struct {
	VinDiscoveryTrigger state.WellKnownVinDiscoveryTransitionTrigger `protobuf:"varint,13,opt,name=vin_discovery_trigger,json=vinDiscoveryTrigger,proto3,enum=autonomic.ext.event.state.vindiscovery.WellKnownVinDiscoveryTransitionTrigger,oneof"`
}

type StateTransition_DeviceWakeupTrigger struct {
	DeviceWakeupTrigger state.WellKnownDeviceWakeupTransitionTrigger `protobuf:"varint,16,opt,name=device_wakeup_trigger,json=deviceWakeupTrigger,proto3,enum=autonomic.ext.event.state.devicewakeup.WellKnownDeviceWakeupTransitionTrigger,oneof"`
}

type StateTransition_ModuleDiscoveryTrigger struct {
	ModuleDiscoveryTrigger state.WellKnownModuleDiscoveryTransitionTrigger `protobuf:"varint,19,opt,name=module_discovery_trigger,json=moduleDiscoveryTrigger,proto3,enum=autonomic.ext.event.state.modulediscovery.WellKnownModuleDiscoveryTransitionTrigger,oneof"`
}

type StateTransition_DeviceConfigResetTrigger struct {
	DeviceConfigResetTrigger state.WellKnownDeviceConfigResetTransitionTrigger `protobuf:"varint,22,opt,name=device_config_reset_trigger,json=deviceConfigResetTrigger,proto3,enum=autonomic.ext.event.state.deviceconfigreset.WellKnownDeviceConfigResetTransitionTrigger,oneof"`
}

type StateTransition_DeviceDiagnosticTrigger struct {
	DeviceDiagnosticTrigger state.WellKnownDeviceDiagnosticTransitionTrigger `protobuf:"varint,25,opt,name=device_diagnostic_trigger,json=deviceDiagnosticTrigger,proto3,enum=autonomic.ext.event.state.devicediagnostic.WellKnownDeviceDiagnosticTransitionTrigger,oneof"`
}

type StateTransition_KeyRotationTrigger struct {
	KeyRotationTrigger state.WellKnownKeyRotationTransitionTrigger `protobuf:"varint,28,opt,name=key_rotation_trigger,json=keyRotationTrigger,proto3,enum=autonomic.ext.event.state.keyrotation.WellKnownKeyRotationTransitionTrigger,oneof"`
}

type StateTransition_DeploymentTrigger struct {
	DeploymentTrigger state.WellKnownDeploymentTransitionTrigger `protobuf:"varint,31,opt,name=deployment_trigger,json=deploymentTrigger,proto3,enum=autonomic.ext.event.state.deployment.WellKnownDeploymentTransitionTrigger,oneof"`
}

type StateTransition_ConfigurationUpdateTrigger struct {
	ConfigurationUpdateTrigger state.WellKnownConfigurationUpdateTransitionTrigger `protobuf:"varint,46,opt,name=configuration_update_trigger,json=configurationUpdateTrigger,proto3,enum=autonomic.ext.event.state.configurationupdate.WellKnownConfigurationUpdateTransitionTrigger,oneof"`
}

type StateTransition_HmiDisplayTrigger struct {
	HmiDisplayTrigger state.WellKnownHMIDisplayTransitionTrigger `protobuf:"varint,49,opt,name=hmi_display_trigger,json=hmiDisplayTrigger,proto3,enum=autonomic.ext.event.state.hmidisplay.WellKnownHMIDisplayTransitionTrigger,oneof"`
}

type StateTransition_TokenRefreshTrigger struct {
	TokenRefreshTrigger state.WellKnownTokenRefreshTransitionTrigger `protobuf:"varint,52,opt,name=token_refresh_trigger,json=tokenRefreshTrigger,proto3,enum=autonomic.ext.event.state.tokenrefresh.WellKnownTokenRefreshTransitionTrigger,oneof"`
}

type StateTransition_ExecutePendingUpdatesTrigger struct {
	ExecutePendingUpdatesTrigger state.WellKnownExecutePendingUpdatesTransitionTrigger `protobuf:"varint,55,opt,name=execute_pending_updates_trigger,json=executePendingUpdatesTrigger,proto3,enum=autonomic.ext.event.state.executependingupdates.WellKnownExecutePendingUpdatesTransitionTrigger,oneof"`
}

type StateTransition_WifiConfigTrigger struct {
	WifiConfigTrigger state.WellKnownWifiConfigTransitionTrigger `protobuf:"varint,58,opt,name=wifi_config_trigger,json=wifiConfigTrigger,proto3,enum=autonomic.ext.event.state.wificonfig.WellKnownWifiConfigTransitionTrigger,oneof"`
}

type StateTransition_OnDemandStatusUpdateTrigger struct {
	OnDemandStatusUpdateTrigger state.WellKnownOnDemandStatusUpdateTransitionTrigger `protobuf:"varint,61,opt,name=on_demand_status_update_trigger,json=onDemandStatusUpdateTrigger,proto3,enum=autonomic.ext.event.state.ondemandstatusupdate.WellKnownOnDemandStatusUpdateTransitionTrigger,oneof"`
}

type StateTransition_WifiStatusTrigger struct {
	WifiStatusTrigger state.WellKnownWifiStatusTransitionTrigger `protobuf:"varint,64,opt,name=wifi_status_trigger,json=wifiStatusTrigger,proto3,enum=autonomic.ext.event.state.wifistatus.WellKnownWifiStatusTransitionTrigger,oneof"`
}

type StateTransition_ReportWifiUsageTrigger struct {
	ReportWifiUsageTrigger state.WellKnownReportWifiUsageTransitionTrigger `protobuf:"varint,67,opt,name=report_wifi_usage_trigger,json=reportWifiUsageTrigger,proto3,enum=autonomic.ext.event.state.reportwifiusage.WellKnownReportWifiUsageTransitionTrigger,oneof"`
}

type StateTransition_CommandCancellationTrigger struct {
	CommandCancellationTrigger state.WellKnownCommandCancellationTransitionTrigger `protobuf:"varint,70,opt,name=command_cancellation_trigger,json=commandCancellationTrigger,proto3,enum=autonomic.ext.event.state.cancellation.WellKnownCommandCancellationTransitionTrigger,oneof"`
}

type StateTransition_VehicleClaimValidationTrigger struct {
	VehicleClaimValidationTrigger state.WellKnownVehicleClaimValidationTransitionTrigger `protobuf:"varint,73,opt,name=vehicle_claim_validation_trigger,json=vehicleClaimValidationTrigger,proto3,enum=autonomic.ext.event.state.vehicleclaimvalidation.WellKnownVehicleClaimValidationTransitionTrigger,oneof"`
}

type StateTransition_RetrieveDevicePairingCodeTrigger struct {
	RetrieveDevicePairingCodeTrigger state.WellKnownRetrieveDevicePairingCodeTransitionTrigger `protobuf:"varint,76,opt,name=retrieve_device_pairing_code_trigger,json=retrieveDevicePairingCodeTrigger,proto3,enum=autonomic.ext.event.state.retrievedevicepairingcode.WellKnownRetrieveDevicePairingCodeTransitionTrigger,oneof"`
}

type StateTransition_ChangeConfigProfileTrigger struct {
	ChangeConfigProfileTrigger state.WellKnownChangeConfigProfileTransitionTrigger `protobuf:"varint,79,opt,name=change_config_profile_trigger,json=changeConfigProfileTrigger,proto3,enum=autonomic.ext.event.state.changeconfigprofile.WellKnownChangeConfigProfileTransitionTrigger,oneof"`
}

type StateTransition_ConfigureTelemetryEmissionTrigger struct {
	ConfigureTelemetryEmissionTrigger state.WellKnownConfigureTelemetryEmissionTrigger `protobuf:"varint,82,opt,name=configure_telemetry_emission_trigger,json=configureTelemetryEmissionTrigger,proto3,enum=autonomic.ext.event.state.configuretelemetryemission.WellKnownConfigureTelemetryEmissionTrigger,oneof"`
}

type StateTransition_UserAuthConfirmationTrigger struct {
	UserAuthConfirmationTrigger state.WellKnownUserAuthConfirmationTrigger `protobuf:"varint,85,opt,name=user_auth_confirmation_trigger,json=userAuthConfirmationTrigger,proto3,enum=autonomic.ext.event.state.userauthconfirmation.WellKnownUserAuthConfirmationTrigger,oneof"`
}

type StateTransition_AntiTheftTrigger struct {
	AntiTheftTrigger state.WellKnownAntiTheftTransitionTrigger `protobuf:"varint,88,opt,name=anti_theft_trigger,json=antiTheftTrigger,proto3,enum=autonomic.ext.event.state.antitheft.WellKnownAntiTheftTransitionTrigger,oneof"`
}

type StateTransition_HmiApplicationMessageTrigger struct {
	HmiApplicationMessageTrigger state.WellKnownHMIApplicationMessageTransitionTrigger `protobuf:"varint,91,opt,name=hmi_application_message_trigger,json=hmiApplicationMessageTrigger,proto3,enum=autonomic.ext.event.state.hmiapplicationmessage.WellKnownHMIApplicationMessageTransitionTrigger,oneof"`
}

type StateTransition_CommandPreclusionTrigger struct {
	CommandPreclusionTrigger state.WellKnownCommandPreclusionStateTransitionTrigger `protobuf:"varint,94,opt,name=command_preclusion_trigger,json=commandPreclusionTrigger,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownCommandPreclusionStateTransitionTrigger,oneof"`
}

type StateTransition_FirmwareUpgradeCommandPreclusionTrigger struct {
	FirmwareUpgradeCommandPreclusionTrigger state.WellKnownFirmwareUpgradeCommandPreclusionStateTransitionTrigger `protobuf:"varint,97,opt,name=firmware_upgrade_command_preclusion_trigger,json=firmwareUpgradeCommandPreclusionTrigger,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownFirmwareUpgradeCommandPreclusionStateTransitionTrigger,oneof"`
}

type StateTransition_DeepSleepCommandPreclusionTrigger struct {
	DeepSleepCommandPreclusionTrigger state.WellKnownDeepSleepCommandPreclusionStateTransitionTrigger `protobuf:"varint,100,opt,name=deep_sleep_command_preclusion_trigger,json=deepSleepCommandPreclusionTrigger,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownDeepSleepCommandPreclusionStateTransitionTrigger,oneof"`
}

type StateTransition_CarrierRegistrationCommandPreclusionTrigger struct {
	CarrierRegistrationCommandPreclusionTrigger state.WellKnownCarrierRegistrationCommandPreclusionStateTransitionTrigger `protobuf:"varint,103,opt,name=carrier_registration_command_preclusion_trigger,json=carrierRegistrationCommandPreclusionTrigger,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownCarrierRegistrationCommandPreclusionStateTransitionTrigger,oneof"`
}

type StateTransition_TemperatureThresholdCommandPreclusionTrigger struct {
	TemperatureThresholdCommandPreclusionTrigger state.WellKnownTemperatureThresholdCommandPreclusionStateTransitionTrigger `protobuf:"varint,106,opt,name=temperature_threshold_command_preclusion_trigger,json=temperatureThresholdCommandPreclusionTrigger,proto3,enum=autonomic.ext.event.state.commandpreclusionstate.WellKnownTemperatureThresholdCommandPreclusionStateTransitionTrigger,oneof"`
}

type StateTransition_ActuationTrigger struct {
	ActuationTrigger state.WellKnownActuationTransitionTrigger `protobuf:"varint,121,opt,name=actuation_trigger,json=actuationTrigger,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationTransitionTrigger,oneof"`
}

type StateTransition_LockTrigger struct {
	LockTrigger state.WellKnownActuationTransitionTrigger `protobuf:"varint,34,opt,name=lock_trigger,json=lockTrigger,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationTransitionTrigger,oneof"`
}

type StateTransition_UnlockTrigger struct {
	UnlockTrigger state.WellKnownActuationTransitionTrigger `protobuf:"varint,37,opt,name=unlock_trigger,json=unlockTrigger,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationTransitionTrigger,oneof"`
}

type StateTransition_RemoteStartTrigger struct {
	RemoteStartTrigger state.WellKnownActuationTransitionTrigger `protobuf:"varint,40,opt,name=remote_start_trigger,json=remoteStartTrigger,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationTransitionTrigger,oneof"`
}

type StateTransition_CancelRemoteStartTrigger struct {
	CancelRemoteStartTrigger state.WellKnownActuationTransitionTrigger `protobuf:"varint,43,opt,name=cancel_remote_start_trigger,json=cancelRemoteStartTrigger,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationTransitionTrigger,oneof"`
}

type StateTransition_StartTelemetryCollectionTrigger struct {
	StartTelemetryCollectionTrigger state.WellKnownActuationTransitionTrigger `protobuf:"varint,109,opt,name=start_telemetry_collection_trigger,json=startTelemetryCollectionTrigger,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationTransitionTrigger,oneof"`
}

type StateTransition_CancelTelemetryCollectionTrigger struct {
	CancelTelemetryCollectionTrigger state.WellKnownActuationTransitionTrigger `protobuf:"varint,112,opt,name=cancel_telemetry_collection_trigger,json=cancelTelemetryCollectionTrigger,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationTransitionTrigger,oneof"`
}

type StateTransition_VehicleCueTrigger struct {
	VehicleCueTrigger state.WellKnownActuationTransitionTrigger `protobuf:"varint,115,opt,name=vehicle_cue_trigger,json=vehicleCueTrigger,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationTransitionTrigger,oneof"`
}

type StateTransition_PanicCueTrigger struct {
	PanicCueTrigger state.WellKnownActuationTransitionTrigger `protobuf:"varint,118,opt,name=panic_cue_trigger,json=panicCueTrigger,proto3,enum=autonomic.ext.event.state.actuation.WellKnownActuationTransitionTrigger,oneof"`
}

func (*StateTransition_StringTrigger) isStateTransition_Trigger() {}

func (*StateTransition_DeprecatedDeploymentTrigger) isStateTransition_Trigger() {}

func (*StateTransition_VinDiscoveryTrigger) isStateTransition_Trigger() {}

func (*StateTransition_DeviceWakeupTrigger) isStateTransition_Trigger() {}

func (*StateTransition_ModuleDiscoveryTrigger) isStateTransition_Trigger() {}

func (*StateTransition_DeviceConfigResetTrigger) isStateTransition_Trigger() {}

func (*StateTransition_DeviceDiagnosticTrigger) isStateTransition_Trigger() {}

func (*StateTransition_KeyRotationTrigger) isStateTransition_Trigger() {}

func (*StateTransition_DeploymentTrigger) isStateTransition_Trigger() {}

func (*StateTransition_ConfigurationUpdateTrigger) isStateTransition_Trigger() {}

func (*StateTransition_HmiDisplayTrigger) isStateTransition_Trigger() {}

func (*StateTransition_TokenRefreshTrigger) isStateTransition_Trigger() {}

func (*StateTransition_ExecutePendingUpdatesTrigger) isStateTransition_Trigger() {}

func (*StateTransition_WifiConfigTrigger) isStateTransition_Trigger() {}

func (*StateTransition_OnDemandStatusUpdateTrigger) isStateTransition_Trigger() {}

func (*StateTransition_WifiStatusTrigger) isStateTransition_Trigger() {}

func (*StateTransition_ReportWifiUsageTrigger) isStateTransition_Trigger() {}

func (*StateTransition_CommandCancellationTrigger) isStateTransition_Trigger() {}

func (*StateTransition_VehicleClaimValidationTrigger) isStateTransition_Trigger() {}

func (*StateTransition_RetrieveDevicePairingCodeTrigger) isStateTransition_Trigger() {}

func (*StateTransition_ChangeConfigProfileTrigger) isStateTransition_Trigger() {}

func (*StateTransition_ConfigureTelemetryEmissionTrigger) isStateTransition_Trigger() {}

func (*StateTransition_UserAuthConfirmationTrigger) isStateTransition_Trigger() {}

func (*StateTransition_AntiTheftTrigger) isStateTransition_Trigger() {}

func (*StateTransition_HmiApplicationMessageTrigger) isStateTransition_Trigger() {}

func (*StateTransition_CommandPreclusionTrigger) isStateTransition_Trigger() {}

func (*StateTransition_FirmwareUpgradeCommandPreclusionTrigger) isStateTransition_Trigger() {}

func (*StateTransition_DeepSleepCommandPreclusionTrigger) isStateTransition_Trigger() {}

func (*StateTransition_CarrierRegistrationCommandPreclusionTrigger) isStateTransition_Trigger() {}

func (*StateTransition_TemperatureThresholdCommandPreclusionTrigger) isStateTransition_Trigger() {}

func (*StateTransition_ActuationTrigger) isStateTransition_Trigger() {}

func (*StateTransition_LockTrigger) isStateTransition_Trigger() {}

func (*StateTransition_UnlockTrigger) isStateTransition_Trigger() {}

func (*StateTransition_RemoteStartTrigger) isStateTransition_Trigger() {}

func (*StateTransition_CancelRemoteStartTrigger) isStateTransition_Trigger() {}

func (*StateTransition_StartTelemetryCollectionTrigger) isStateTransition_Trigger() {}

func (*StateTransition_CancelTelemetryCollectionTrigger) isStateTransition_Trigger() {}

func (*StateTransition_VehicleCueTrigger) isStateTransition_Trigger() {}

func (*StateTransition_PanicCueTrigger) isStateTransition_Trigger() {}

func (m *StateTransition) GetTrigger() isStateTransition_Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *StateTransition) GetStringTrigger() string {
	if x, ok := m.GetTrigger().(*StateTransition_StringTrigger); ok {
		return x.StringTrigger
	}
	return ""
}

// Deprecated: Do not use.
func (m *StateTransition) GetDeprecatedDeploymentTrigger() WellKnownDeploymentTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_DeprecatedDeploymentTrigger); ok {
		return x.DeprecatedDeploymentTrigger
	}
	return WellKnownDeploymentTransitionTrigger_UNKNOWN_DEPLOYMENT_TRIGGER
}

func (m *StateTransition) GetVinDiscoveryTrigger() state.WellKnownVinDiscoveryTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_VinDiscoveryTrigger); ok {
		return x.VinDiscoveryTrigger
	}
	return state.WellKnownVinDiscoveryTransitionTrigger_UNKNOWN_TRIGGER
}

func (m *StateTransition) GetDeviceWakeupTrigger() state.WellKnownDeviceWakeupTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_DeviceWakeupTrigger); ok {
		return x.DeviceWakeupTrigger
	}
	return state.WellKnownDeviceWakeupTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetModuleDiscoveryTrigger() state.WellKnownModuleDiscoveryTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_ModuleDiscoveryTrigger); ok {
		return x.ModuleDiscoveryTrigger
	}
	return state.WellKnownModuleDiscoveryTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetDeviceConfigResetTrigger() state.WellKnownDeviceConfigResetTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_DeviceConfigResetTrigger); ok {
		return x.DeviceConfigResetTrigger
	}
	return state.WellKnownDeviceConfigResetTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetDeviceDiagnosticTrigger() state.WellKnownDeviceDiagnosticTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_DeviceDiagnosticTrigger); ok {
		return x.DeviceDiagnosticTrigger
	}
	return state.WellKnownDeviceDiagnosticTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetKeyRotationTrigger() state.WellKnownKeyRotationTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_KeyRotationTrigger); ok {
		return x.KeyRotationTrigger
	}
	return state.WellKnownKeyRotationTransitionTrigger_UNKNOWN_TRIGGER
}

func (m *StateTransition) GetDeploymentTrigger() state.WellKnownDeploymentTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_DeploymentTrigger); ok {
		return x.DeploymentTrigger
	}
	return state.WellKnownDeploymentTransitionTrigger_UNKNOWN_TRIGGER
}

func (m *StateTransition) GetConfigurationUpdateTrigger() state.WellKnownConfigurationUpdateTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_ConfigurationUpdateTrigger); ok {
		return x.ConfigurationUpdateTrigger
	}
	return state.WellKnownConfigurationUpdateTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

// Deprecated: Do not use.
func (m *StateTransition) GetHmiDisplayTrigger() state.WellKnownHMIDisplayTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_HmiDisplayTrigger); ok {
		return x.HmiDisplayTrigger
	}
	return state.WellKnownHMIDisplayTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetTokenRefreshTrigger() state.WellKnownTokenRefreshTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_TokenRefreshTrigger); ok {
		return x.TokenRefreshTrigger
	}
	return state.WellKnownTokenRefreshTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetExecutePendingUpdatesTrigger() state.WellKnownExecutePendingUpdatesTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_ExecutePendingUpdatesTrigger); ok {
		return x.ExecutePendingUpdatesTrigger
	}
	return state.WellKnownExecutePendingUpdatesTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetWifiConfigTrigger() state.WellKnownWifiConfigTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_WifiConfigTrigger); ok {
		return x.WifiConfigTrigger
	}
	return state.WellKnownWifiConfigTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetOnDemandStatusUpdateTrigger() state.WellKnownOnDemandStatusUpdateTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_OnDemandStatusUpdateTrigger); ok {
		return x.OnDemandStatusUpdateTrigger
	}
	return state.WellKnownOnDemandStatusUpdateTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetWifiStatusTrigger() state.WellKnownWifiStatusTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_WifiStatusTrigger); ok {
		return x.WifiStatusTrigger
	}
	return state.WellKnownWifiStatusTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetReportWifiUsageTrigger() state.WellKnownReportWifiUsageTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_ReportWifiUsageTrigger); ok {
		return x.ReportWifiUsageTrigger
	}
	return state.WellKnownReportWifiUsageTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetCommandCancellationTrigger() state.WellKnownCommandCancellationTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_CommandCancellationTrigger); ok {
		return x.CommandCancellationTrigger
	}
	return state.WellKnownCommandCancellationTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetVehicleClaimValidationTrigger() state.WellKnownVehicleClaimValidationTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_VehicleClaimValidationTrigger); ok {
		return x.VehicleClaimValidationTrigger
	}
	return state.WellKnownVehicleClaimValidationTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetRetrieveDevicePairingCodeTrigger() state.WellKnownRetrieveDevicePairingCodeTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_RetrieveDevicePairingCodeTrigger); ok {
		return x.RetrieveDevicePairingCodeTrigger
	}
	return state.WellKnownRetrieveDevicePairingCodeTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetChangeConfigProfileTrigger() state.WellKnownChangeConfigProfileTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_ChangeConfigProfileTrigger); ok {
		return x.ChangeConfigProfileTrigger
	}
	return state.WellKnownChangeConfigProfileTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetConfigureTelemetryEmissionTrigger() state.WellKnownConfigureTelemetryEmissionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_ConfigureTelemetryEmissionTrigger); ok {
		return x.ConfigureTelemetryEmissionTrigger
	}
	return state.WellKnownConfigureTelemetryEmissionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetUserAuthConfirmationTrigger() state.WellKnownUserAuthConfirmationTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_UserAuthConfirmationTrigger); ok {
		return x.UserAuthConfirmationTrigger
	}
	return state.WellKnownUserAuthConfirmationTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetAntiTheftTrigger() state.WellKnownAntiTheftTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_AntiTheftTrigger); ok {
		return x.AntiTheftTrigger
	}
	return state.WellKnownAntiTheftTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetHmiApplicationMessageTrigger() state.WellKnownHMIApplicationMessageTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_HmiApplicationMessageTrigger); ok {
		return x.HmiApplicationMessageTrigger
	}
	return state.WellKnownHMIApplicationMessageTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetCommandPreclusionTrigger() state.WellKnownCommandPreclusionStateTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_CommandPreclusionTrigger); ok {
		return x.CommandPreclusionTrigger
	}
	return state.WellKnownCommandPreclusionStateTransitionTrigger_UNKNOWN_TRANSITION
}

func (m *StateTransition) GetFirmwareUpgradeCommandPreclusionTrigger() state.WellKnownFirmwareUpgradeCommandPreclusionStateTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_FirmwareUpgradeCommandPreclusionTrigger); ok {
		return x.FirmwareUpgradeCommandPreclusionTrigger
	}
	return state.WellKnownFirmwareUpgradeCommandPreclusionStateTransitionTrigger_UNKNOWN_FIRMWARE_UPDATE_COMMAND_PRECLUSION_TRANSITION
}

func (m *StateTransition) GetDeepSleepCommandPreclusionTrigger() state.WellKnownDeepSleepCommandPreclusionStateTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_DeepSleepCommandPreclusionTrigger); ok {
		return x.DeepSleepCommandPreclusionTrigger
	}
	return state.WellKnownDeepSleepCommandPreclusionStateTransitionTrigger_UNKNOWN_DEEP_SLEEP_COMMAND_PRECLUSION_TRANSITION
}

func (m *StateTransition) GetCarrierRegistrationCommandPreclusionTrigger() state.WellKnownCarrierRegistrationCommandPreclusionStateTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_CarrierRegistrationCommandPreclusionTrigger); ok {
		return x.CarrierRegistrationCommandPreclusionTrigger
	}
	return state.WellKnownCarrierRegistrationCommandPreclusionStateTransitionTrigger_UNKNOWN_CARRIER_REGISTRATION_COMMAND_PRECLUSION_TRANSITION
}

func (m *StateTransition) GetTemperatureThresholdCommandPreclusionTrigger() state.WellKnownTemperatureThresholdCommandPreclusionStateTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_TemperatureThresholdCommandPreclusionTrigger); ok {
		return x.TemperatureThresholdCommandPreclusionTrigger
	}
	return state.WellKnownTemperatureThresholdCommandPreclusionStateTransitionTrigger_UNKNOWN_TEMPERATURE_THRESHOLD_COMMAND_PRECLUSION_TRANSITION
}

func (m *StateTransition) GetActuationTrigger() state.WellKnownActuationTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_ActuationTrigger); ok {
		return x.ActuationTrigger
	}
	return state.WellKnownActuationTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

// Deprecated: Do not use.
func (m *StateTransition) GetLockTrigger() state.WellKnownActuationTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_LockTrigger); ok {
		return x.LockTrigger
	}
	return state.WellKnownActuationTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

// Deprecated: Do not use.
func (m *StateTransition) GetUnlockTrigger() state.WellKnownActuationTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_UnlockTrigger); ok {
		return x.UnlockTrigger
	}
	return state.WellKnownActuationTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

// Deprecated: Do not use.
func (m *StateTransition) GetRemoteStartTrigger() state.WellKnownActuationTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_RemoteStartTrigger); ok {
		return x.RemoteStartTrigger
	}
	return state.WellKnownActuationTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

// Deprecated: Do not use.
func (m *StateTransition) GetCancelRemoteStartTrigger() state.WellKnownActuationTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_CancelRemoteStartTrigger); ok {
		return x.CancelRemoteStartTrigger
	}
	return state.WellKnownActuationTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

// Deprecated: Do not use.
func (m *StateTransition) GetStartTelemetryCollectionTrigger() state.WellKnownActuationTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_StartTelemetryCollectionTrigger); ok {
		return x.StartTelemetryCollectionTrigger
	}
	return state.WellKnownActuationTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

// Deprecated: Do not use.
func (m *StateTransition) GetCancelTelemetryCollectionTrigger() state.WellKnownActuationTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_CancelTelemetryCollectionTrigger); ok {
		return x.CancelTelemetryCollectionTrigger
	}
	return state.WellKnownActuationTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

// Deprecated: Do not use.
func (m *StateTransition) GetVehicleCueTrigger() state.WellKnownActuationTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_VehicleCueTrigger); ok {
		return x.VehicleCueTrigger
	}
	return state.WellKnownActuationTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

// Deprecated: Do not use.
func (m *StateTransition) GetPanicCueTrigger() state.WellKnownActuationTransitionTrigger {
	if x, ok := m.GetTrigger().(*StateTransition_PanicCueTrigger); ok {
		return x.PanicCueTrigger
	}
	return state.WellKnownActuationTransitionTrigger_UNKNOWN_TRANSITION_TRIGGER
}

func (m *StateTransition) GetData() *StateTransitionData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *StateTransition) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StateTransition) GetMetrics() []*telemetry.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StateTransition) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StateTransition_StringFsmName)(nil),
		(*StateTransition_WkFsmName)(nil),
		(*StateTransition_StringFromState)(nil),
		(*StateTransition_DeprecatedDeploymentFromState)(nil),
		(*StateTransition_VinDiscoveryFromState)(nil),
		(*StateTransition_DeviceWakeupFromState)(nil),
		(*StateTransition_ModuleDiscoveryFromState)(nil),
		(*StateTransition_DeviceConfigResetFromState)(nil),
		(*StateTransition_DeviceDiagnosticFromState)(nil),
		(*StateTransition_KeyRotationFromState)(nil),
		(*StateTransition_DeploymentFromState)(nil),
		(*StateTransition_ConfigurationUpdateFromState)(nil),
		(*StateTransition_HmiDisplayFromState)(nil),
		(*StateTransition_TokenRefreshFromState)(nil),
		(*StateTransition_ExecutePendingUpdatesFromState)(nil),
		(*StateTransition_WifiConfigFromState)(nil),
		(*StateTransition_OnDemandStatusUpdateFromState)(nil),
		(*StateTransition_WifiStatusFromState)(nil),
		(*StateTransition_ReportWifiUsageFromState)(nil),
		(*StateTransition_CommandCancellationFromState)(nil),
		(*StateTransition_VehicleClaimValidationFromState)(nil),
		(*StateTransition_RetrieveDevicePairingCodeFromState)(nil),
		(*StateTransition_ChangeConfigProfileFromState)(nil),
		(*StateTransition_ConfigureTelemetryEmissionFromState)(nil),
		(*StateTransition_UserAuthConfirmationFromState)(nil),
		(*StateTransition_AntiTheftFromState)(nil),
		(*StateTransition_HmiApplicationMessageFromState)(nil),
		(*StateTransition_CommandPreclusionFromState)(nil),
		(*StateTransition_FirmwareUpgradeCommandPreclusionFromState)(nil),
		(*StateTransition_DeepSleepCommandPreclusionFromState)(nil),
		(*StateTransition_CarrierRegistrationCommandPreclusionFromState)(nil),
		(*StateTransition_TemperatureThresholdCommandPreclusionFromState)(nil),
		(*StateTransition_ActuationFromState)(nil),
		(*StateTransition_LockFromState)(nil),
		(*StateTransition_UnlockFromState)(nil),
		(*StateTransition_RemoteStartFromState)(nil),
		(*StateTransition_CancelRemoteStartFromState)(nil),
		(*StateTransition_StartTelemetryCollectionFromState)(nil),
		(*StateTransition_CancelTelemetryCollectionFromState)(nil),
		(*StateTransition_VehicleCueFromState)(nil),
		(*StateTransition_PanicCueFromState)(nil),
		(*StateTransition_StringToState)(nil),
		(*StateTransition_DeprecatedDeploymentToState)(nil),
		(*StateTransition_VinDiscoveryToState)(nil),
		(*StateTransition_DeviceWakeupToState)(nil),
		(*StateTransition_ModuleDiscoveryToState)(nil),
		(*StateTransition_DeviceConfigResetToState)(nil),
		(*StateTransition_DeviceDiagnosticToState)(nil),
		(*StateTransition_KeyRotationToState)(nil),
		(*StateTransition_DeploymentToState)(nil),
		(*StateTransition_ConfigurationUpdateToState)(nil),
		(*StateTransition_HmiDisplayToState)(nil),
		(*StateTransition_TokenRefreshToState)(nil),
		(*StateTransition_ExecutePendingUpdatesToState)(nil),
		(*StateTransition_WifiConfigToState)(nil),
		(*StateTransition_OnDemandStatusUpdateToState)(nil),
		(*StateTransition_WifiStatusToState)(nil),
		(*StateTransition_ReportWifiUsageToState)(nil),
		(*StateTransition_CommandCancellationToState)(nil),
		(*StateTransition_VehicleClaimValidationToState)(nil),
		(*StateTransition_RetrieveDevicePairingCodeToState)(nil),
		(*StateTransition_ChangeConfigProfileToState)(nil),
		(*StateTransition_ConfigureTelemetryEmissionToState)(nil),
		(*StateTransition_UserAuthConfirmationToState)(nil),
		(*StateTransition_AntiTheftToState)(nil),
		(*StateTransition_HmiApplicationMessageToState)(nil),
		(*StateTransition_CommandPreclusionToState)(nil),
		(*StateTransition_FirmwareUpgradeCommandPreclusionToState)(nil),
		(*StateTransition_DeepSleepCommandPreclusionToState)(nil),
		(*StateTransition_CarrierRegistrationCommandPreclusionToState)(nil),
		(*StateTransition_TemperatureThresholdCommandPreclusionToState)(nil),
		(*StateTransition_ActuationToState)(nil),
		(*StateTransition_LockToState)(nil),
		(*StateTransition_UnlockToState)(nil),
		(*StateTransition_RemoteStartToState)(nil),
		(*StateTransition_CancelRemoteStartToState)(nil),
		(*StateTransition_StartTelemetryCollectionToState)(nil),
		(*StateTransition_CancelTelemetryCollectionToState)(nil),
		(*StateTransition_VehicleCueToState)(nil),
		(*StateTransition_PanicCueToState)(nil),
		(*StateTransition_StringTrigger)(nil),
		(*StateTransition_DeprecatedDeploymentTrigger)(nil),
		(*StateTransition_VinDiscoveryTrigger)(nil),
		(*StateTransition_DeviceWakeupTrigger)(nil),
		(*StateTransition_ModuleDiscoveryTrigger)(nil),
		(*StateTransition_DeviceConfigResetTrigger)(nil),
		(*StateTransition_DeviceDiagnosticTrigger)(nil),
		(*StateTransition_KeyRotationTrigger)(nil),
		(*StateTransition_DeploymentTrigger)(nil),
		(*StateTransition_ConfigurationUpdateTrigger)(nil),
		(*StateTransition_HmiDisplayTrigger)(nil),
		(*StateTransition_TokenRefreshTrigger)(nil),
		(*StateTransition_ExecutePendingUpdatesTrigger)(nil),
		(*StateTransition_WifiConfigTrigger)(nil),
		(*StateTransition_OnDemandStatusUpdateTrigger)(nil),
		(*StateTransition_WifiStatusTrigger)(nil),
		(*StateTransition_ReportWifiUsageTrigger)(nil),
		(*StateTransition_CommandCancellationTrigger)(nil),
		(*StateTransition_VehicleClaimValidationTrigger)(nil),
		(*StateTransition_RetrieveDevicePairingCodeTrigger)(nil),
		(*StateTransition_ChangeConfigProfileTrigger)(nil),
		(*StateTransition_ConfigureTelemetryEmissionTrigger)(nil),
		(*StateTransition_UserAuthConfirmationTrigger)(nil),
		(*StateTransition_AntiTheftTrigger)(nil),
		(*StateTransition_HmiApplicationMessageTrigger)(nil),
		(*StateTransition_CommandPreclusionTrigger)(nil),
		(*StateTransition_FirmwareUpgradeCommandPreclusionTrigger)(nil),
		(*StateTransition_DeepSleepCommandPreclusionTrigger)(nil),
		(*StateTransition_CarrierRegistrationCommandPreclusionTrigger)(nil),
		(*StateTransition_TemperatureThresholdCommandPreclusionTrigger)(nil),
		(*StateTransition_ActuationTrigger)(nil),
		(*StateTransition_LockTrigger)(nil),
		(*StateTransition_UnlockTrigger)(nil),
		(*StateTransition_RemoteStartTrigger)(nil),
		(*StateTransition_CancelRemoteStartTrigger)(nil),
		(*StateTransition_StartTelemetryCollectionTrigger)(nil),
		(*StateTransition_CancelTelemetryCollectionTrigger)(nil),
		(*StateTransition_VehicleCueTrigger)(nil),
		(*StateTransition_PanicCueTrigger)(nil),
	}
}

// The execution of an individual event trigger
type EventCondition struct {
	// The specific trigger that has been executed
	//
	// Types that are valid to be assigned to ConditionName:
	//	*EventCondition_Condition
	//	*EventCondition_StringLabel
	ConditionName isEventCondition_ConditionName `protobuf_oneof:"condition_name"`
	// This field contains the _required_ metric or metrics that trigger the event condition.
	Metric               *telemetry.Metric   `protobuf:"bytes,2,opt,name=metric,proto3" json:"metric,omitempty"` // Deprecated: Do not use.
	RequiredMetrics      []*telemetry.Metric `protobuf:"bytes,4,rep,name=required_metrics,json=requiredMetrics,proto3" json:"required_metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *EventCondition) Reset()         { *m = EventCondition{} }
func (m *EventCondition) String() string { return proto.CompactTextString(m) }
func (*EventCondition) ProtoMessage()    {}
func (*EventCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cfff88bdb599f73, []int{3}
}

func (m *EventCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventCondition.Unmarshal(m, b)
}
func (m *EventCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventCondition.Marshal(b, m, deterministic)
}
func (m *EventCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCondition.Merge(m, src)
}
func (m *EventCondition) XXX_Size() int {
	return xxx_messageInfo_EventCondition.Size(m)
}
func (m *EventCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCondition.DiscardUnknown(m)
}

var xxx_messageInfo_EventCondition proto.InternalMessageInfo

type isEventCondition_ConditionName interface {
	isEventCondition_ConditionName()
}

type EventCondition_Condition struct {
	Condition WellKnownEventCondition `protobuf:"varint,1,opt,name=condition,proto3,enum=autonomic.ext.event.WellKnownEventCondition,oneof"`
}

type EventCondition_StringLabel struct {
	StringLabel string `protobuf:"bytes,3,opt,name=string_label,json=stringLabel,proto3,oneof"`
}

func (*EventCondition_Condition) isEventCondition_ConditionName() {}

func (*EventCondition_StringLabel) isEventCondition_ConditionName() {}

func (m *EventCondition) GetConditionName() isEventCondition_ConditionName {
	if m != nil {
		return m.ConditionName
	}
	return nil
}

func (m *EventCondition) GetCondition() WellKnownEventCondition {
	if x, ok := m.GetConditionName().(*EventCondition_Condition); ok {
		return x.Condition
	}
	return WellKnownEventCondition_UNKNOWN_EVENT
}

func (m *EventCondition) GetStringLabel() string {
	if x, ok := m.GetConditionName().(*EventCondition_StringLabel); ok {
		return x.StringLabel
	}
	return ""
}

// Deprecated: Do not use.
func (m *EventCondition) GetMetric() *telemetry.Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *EventCondition) GetRequiredMetrics() []*telemetry.Metric {
	if m != nil {
		return m.RequiredMetrics
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EventCondition) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EventCondition_Condition)(nil),
		(*EventCondition_StringLabel)(nil),
	}
}

// An on-vehicle event which occurred due to the execution of one or more conditions
type TriggeredEvent struct {
	// One or more conditions which resulted in this event
	Conditions []*EventCondition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Types that are valid to be assigned to Label:
	//	*TriggeredEvent_WellKnownLabel
	//	*TriggeredEvent_StringLabel
	Label isTriggeredEvent_Label `protobuf_oneof:"label"`
	// Supplementary metrics that are not required, but are specified by the OEM
	// to the device manufacturer as contextually relevant.
	// Metrics that directly trigger the event should not be set here,
	// as they belong in the `required_metrics` field on the EventCondition.
	Metrics              []*telemetry.Metric `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TriggeredEvent) Reset()         { *m = TriggeredEvent{} }
func (m *TriggeredEvent) String() string { return proto.CompactTextString(m) }
func (*TriggeredEvent) ProtoMessage()    {}
func (*TriggeredEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cfff88bdb599f73, []int{4}
}

func (m *TriggeredEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriggeredEvent.Unmarshal(m, b)
}
func (m *TriggeredEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriggeredEvent.Marshal(b, m, deterministic)
}
func (m *TriggeredEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggeredEvent.Merge(m, src)
}
func (m *TriggeredEvent) XXX_Size() int {
	return xxx_messageInfo_TriggeredEvent.Size(m)
}
func (m *TriggeredEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggeredEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TriggeredEvent proto.InternalMessageInfo

func (m *TriggeredEvent) GetConditions() []*EventCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type isTriggeredEvent_Label interface {
	isTriggeredEvent_Label()
}

type TriggeredEvent_WellKnownLabel struct {
	WellKnownLabel WellKnownEvent `protobuf:"varint,2,opt,name=well_known_label,json=wellKnownLabel,proto3,enum=autonomic.ext.event.WellKnownEvent,oneof"`
}

type TriggeredEvent_StringLabel struct {
	StringLabel string `protobuf:"bytes,3,opt,name=string_label,json=stringLabel,proto3,oneof"`
}

func (*TriggeredEvent_WellKnownLabel) isTriggeredEvent_Label() {}

func (*TriggeredEvent_StringLabel) isTriggeredEvent_Label() {}

func (m *TriggeredEvent) GetLabel() isTriggeredEvent_Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *TriggeredEvent) GetWellKnownLabel() WellKnownEvent {
	if x, ok := m.GetLabel().(*TriggeredEvent_WellKnownLabel); ok {
		return x.WellKnownLabel
	}
	return WellKnownEvent_UNKNOWN_WKE_LABEL
}

func (m *TriggeredEvent) GetStringLabel() string {
	if x, ok := m.GetLabel().(*TriggeredEvent_StringLabel); ok {
		return x.StringLabel
	}
	return ""
}

func (m *TriggeredEvent) GetMetrics() []*telemetry.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TriggeredEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TriggeredEvent_WellKnownLabel)(nil),
		(*TriggeredEvent_StringLabel)(nil),
	}
}

type GeofenceEvent struct {
	Geofence             *Geofence                 `protobuf:"bytes,1,opt,name=geofence,proto3" json:"geofence,omitempty"`
	Position             *telemetry.Position       `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Type                 GeofenceEvent_Type        `protobuf:"varint,3,opt,name=type,proto3,enum=autonomic.ext.event.GeofenceEvent_Type" json:"type,omitempty"`
	TriggeredBy          GeofenceEvent_TriggerType `protobuf:"varint,4,opt,name=triggered_by,json=triggeredBy,proto3,enum=autonomic.ext.event.GeofenceEvent_TriggerType" json:"triggered_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GeofenceEvent) Reset()         { *m = GeofenceEvent{} }
func (m *GeofenceEvent) String() string { return proto.CompactTextString(m) }
func (*GeofenceEvent) ProtoMessage()    {}
func (*GeofenceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cfff88bdb599f73, []int{5}
}

func (m *GeofenceEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeofenceEvent.Unmarshal(m, b)
}
func (m *GeofenceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeofenceEvent.Marshal(b, m, deterministic)
}
func (m *GeofenceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeofenceEvent.Merge(m, src)
}
func (m *GeofenceEvent) XXX_Size() int {
	return xxx_messageInfo_GeofenceEvent.Size(m)
}
func (m *GeofenceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GeofenceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GeofenceEvent proto.InternalMessageInfo

func (m *GeofenceEvent) GetGeofence() *Geofence {
	if m != nil {
		return m.Geofence
	}
	return nil
}

func (m *GeofenceEvent) GetPosition() *telemetry.Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *GeofenceEvent) GetType() GeofenceEvent_Type {
	if m != nil {
		return m.Type
	}
	return GeofenceEvent_UNSET
}

func (m *GeofenceEvent) GetTriggeredBy() GeofenceEvent_TriggerType {
	if m != nil {
		return m.TriggeredBy
	}
	return GeofenceEvent_UNSET_TRIGGER_TYPE
}

type StateTransitionData struct {
	// Types that are valid to be assigned to Data:
	//	*StateTransitionData_ApSettings
	//	*StateTransitionData_PairingCodeSetting
	//	*StateTransitionData_WifiStatusSettings
	//	*StateTransitionData_CommandErrorData
	//	*StateTransitionData_CommandPreclusionCauses
	Data                 isStateTransitionData_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *StateTransitionData) Reset()         { *m = StateTransitionData{} }
func (m *StateTransitionData) String() string { return proto.CompactTextString(m) }
func (*StateTransitionData) ProtoMessage()    {}
func (*StateTransitionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cfff88bdb599f73, []int{6}
}

func (m *StateTransitionData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateTransitionData.Unmarshal(m, b)
}
func (m *StateTransitionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateTransitionData.Marshal(b, m, deterministic)
}
func (m *StateTransitionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateTransitionData.Merge(m, src)
}
func (m *StateTransitionData) XXX_Size() int {
	return xxx_messageInfo_StateTransitionData.Size(m)
}
func (m *StateTransitionData) XXX_DiscardUnknown() {
	xxx_messageInfo_StateTransitionData.DiscardUnknown(m)
}

var xxx_messageInfo_StateTransitionData proto.InternalMessageInfo

type isStateTransitionData_Data interface {
	isStateTransitionData_Data()
}

type StateTransitionData_ApSettings struct {
	ApSettings *wifi.AccessPointSettings `protobuf:"bytes,1,opt,name=ap_settings,json=apSettings,proto3,oneof"`
}

type StateTransitionData_PairingCodeSetting struct {
	PairingCodeSetting *devicepairing.PairingCodeSetting `protobuf:"bytes,2,opt,name=pairing_code_setting,json=pairingCodeSetting,proto3,oneof"`
}

type StateTransitionData_WifiStatusSettings struct {
	WifiStatusSettings *wifi.WifiStatusSettings `protobuf:"bytes,3,opt,name=wifi_status_settings,json=wifiStatusSettings,proto3,oneof"`
}

type StateTransitionData_CommandErrorData struct {
	CommandErrorData *errors.CommandErrorData `protobuf:"bytes,4,opt,name=command_error_data,json=commandErrorData,proto3,oneof"`
}

type StateTransitionData_CommandPreclusionCauses struct {
	CommandPreclusionCauses *state.CommandPreclusionData `protobuf:"bytes,5,opt,name=command_preclusion_causes,json=commandPreclusionCauses,proto3,oneof"`
}

func (*StateTransitionData_ApSettings) isStateTransitionData_Data() {}

func (*StateTransitionData_PairingCodeSetting) isStateTransitionData_Data() {}

func (*StateTransitionData_WifiStatusSettings) isStateTransitionData_Data() {}

func (*StateTransitionData_CommandErrorData) isStateTransitionData_Data() {}

func (*StateTransitionData_CommandPreclusionCauses) isStateTransitionData_Data() {}

func (m *StateTransitionData) GetData() isStateTransitionData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// Deprecated: Do not use.
func (m *StateTransitionData) GetApSettings() *wifi.AccessPointSettings {
	if x, ok := m.GetData().(*StateTransitionData_ApSettings); ok {
		return x.ApSettings
	}
	return nil
}

func (m *StateTransitionData) GetPairingCodeSetting() *devicepairing.PairingCodeSetting {
	if x, ok := m.GetData().(*StateTransitionData_PairingCodeSetting); ok {
		return x.PairingCodeSetting
	}
	return nil
}

func (m *StateTransitionData) GetWifiStatusSettings() *wifi.WifiStatusSettings {
	if x, ok := m.GetData().(*StateTransitionData_WifiStatusSettings); ok {
		return x.WifiStatusSettings
	}
	return nil
}

func (m *StateTransitionData) GetCommandErrorData() *errors.CommandErrorData {
	if x, ok := m.GetData().(*StateTransitionData_CommandErrorData); ok {
		return x.CommandErrorData
	}
	return nil
}

func (m *StateTransitionData) GetCommandPreclusionCauses() *state.CommandPreclusionData {
	if x, ok := m.GetData().(*StateTransitionData_CommandPreclusionCauses); ok {
		return x.CommandPreclusionCauses
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StateTransitionData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StateTransitionData_ApSettings)(nil),
		(*StateTransitionData_PairingCodeSetting)(nil),
		(*StateTransitionData_WifiStatusSettings)(nil),
		(*StateTransitionData_CommandErrorData)(nil),
		(*StateTransitionData_CommandPreclusionCauses)(nil),
	}
}

func init() {
	proto.RegisterEnum("autonomic.ext.event.GeofenceEvent_Type", GeofenceEvent_Type_name, GeofenceEvent_Type_value)
	proto.RegisterEnum("autonomic.ext.event.GeofenceEvent_TriggerType", GeofenceEvent_TriggerType_name, GeofenceEvent_TriggerType_value)
	proto.RegisterType((*Event)(nil), "autonomic.ext.event.Event")
	proto.RegisterMapType((map[string]string)(nil), "autonomic.ext.event.Event.MetadataTagsEntry")
	proto.RegisterType((*ErrorEvent)(nil), "autonomic.ext.event.ErrorEvent")
	proto.RegisterType((*StateTransition)(nil), "autonomic.ext.event.StateTransition")
	proto.RegisterType((*EventCondition)(nil), "autonomic.ext.event.EventCondition")
	proto.RegisterType((*TriggeredEvent)(nil), "autonomic.ext.event.TriggeredEvent")
	proto.RegisterType((*GeofenceEvent)(nil), "autonomic.ext.event.GeofenceEvent")
	proto.RegisterType((*StateTransitionData)(nil), "autonomic.ext.event.StateTransitionData")
}

func init() { proto.RegisterFile("autonomic/ext/event/event.proto", fileDescriptor_8cfff88bdb599f73) }

var fileDescriptor_8cfff88bdb599f73 = []byte{
	// 4371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x9c, 0xdb, 0x6f, 0x1c, 0x47,
	0x7a, 0xf6, 0x59, 0xad, 0x23, 0x5f, 0x4a, 0x14, 0xd9, 0xa4, 0xe8, 0x11, 0x25, 0x8a, 0x27, 0xeb,
	0xe0, 0xb5, 0x34, 0x94, 0x65, 0x7b, 0x2d, 0xaf, 0x0f, 0x6b, 0x91, 0x1a, 0x89, 0xb2, 0x45, 0x89,
	0x6e, 0x8e, 0x64, 0xaf, 0xbf, 0xfd, 0xdc, 0xdb, 0xec, 0x2e, 0x0e, 0xdb, 0x9c, 0xee, 0x1e, 0x75,
	0xf7, 0x90, 0x9a, 0xc4, 0x09, 0x82, 0x1c, 0x8c, 0x6c, 0x80, 0x4d, 0x36, 0x8b, 0x8d, 0x81, 0xdd,
	0x45, 0x9c, 0xc4, 0x17, 0x0b, 0xe4, 0x22, 0x09, 0x90, 0x05, 0x72, 0x91, 0x9b, 0x20, 0x17, 0xb9,
	0x0c, 0xb0, 0x0b, 0xec, 0x6d, 0x80, 0xdc, 0xe6, 0x3f, 0xc8, 0x65, 0xd0, 0x75, 0xea, 0xea, 0x99,
	0xea, 0xee, 0x91, 0x35, 0xa3, 0x1b, 0x81, 0x53, 0xf5, 0x56, 0x3d, 0x4f, 0x1d, 0xba, 0xaa, 0xfa,
	0x37, 0xa3, 0x82, 0x79, 0xab, 0x1d, 0x07, 0x7e, 0xe0, 0xb9, 0xf6, 0x0a, 0x7e, 0x12, 0xaf, 0xe0,
	0x7d, 0xec, 0xb3, 0x7f, 0xab, 0xad, 0x30, 0x88, 0x03, 0x7d, 0x4a, 0x04, 0x54, 0xf1, 0x93, 0xb8,
	0x4a, 0xb2, 0x66, 0xcf, 0x34, 0x82, 0xa0, 0xd1, 0xc4, 0x2b, 0x24, 0x64, 0xbb, 0xbd, 0xb3, 0x62,
	0xf9, 0x1d, 0x1a, 0x3f, 0x3b, 0xdf, 0x9d, 0x15, 0xbb, 0x1e, 0x8e, 0x62, 0xcb, 0x6b, 0xb1, 0x80,
	0xe5, 0xac, 0xa2, 0x1d, 0x78, 0x5e, 0xe0, 0xaf, 0x04, 0xd8, 0x33, 0x1d, 0x2b, 0xb6, 0x58, 0xd0,
	0x8b, 0xd9, 0xa0, 0x18, 0x37, 0xb1, 0x87, 0xe3, 0xb0, 0xb3, 0x92, 0xfc, 0xeb, 0xda, 0x2c, 0xea,
	0x62, 0x5e, 0x54, 0x2b, 0x88, 0xdc, 0xd8, 0x0d, 0x7c, 0x16, 0xb7, 0x98, 0x17, 0x17, 0x5b, 0x0d,
	0x16, 0xb2, 0xa2, 0xea, 0x87, 0x03, 0xdc, 0x6c, 0x9a, 0x7b, 0x7e, 0x70, 0xe0, 0x9b, 0x76, 0xe0,
	0x3b, 0xa4, 0xca, 0x88, 0x15, 0x78, 0xb9, 0xa4, 0x00, 0x49, 0xe8, 0x37, 0x38, 0x8a, 0xad, 0x18,
	0xf3, 0xe0, 0x6f, 0xa9, 0x82, 0x49, 0xc4, 0x8a, 0x83, 0x5b, 0xcd, 0xa0, 0xe3, 0x89, 0xd1, 0x99,
	0xbd, 0x92, 0x1f, 0xbb, 0x87, 0x3b, 0x66, 0x18, 0xc4, 0x96, 0xd4, 0x0f, 0x57, 0x8b, 0x6a, 0xde,
	0x77, 0x6d, 0x6c, 0x1e, 0x58, 0x7b, 0xb8, 0xdd, 0x2a, 0x0f, 0xdf, 0x77, 0x7d, 0xd3, 0x71, 0x23,
	0x3b, 0xd8, 0xc7, 0x21, 0x1f, 0xf9, 0x6b, 0xf9, 0xe1, 0x5e, 0xe0, 0xb4, 0x9b, 0xb8, 0xa7, 0xc4,
	0xab, 0xa5, 0x7e, 0xec, 0xc0, 0xdf, 0x71, 0x1b, 0x66, 0x88, 0x23, 0xcc, 0x9b, 0xfc, 0x4a, 0x69,
	0x21, 0xc7, 0xb5, 0x1a, 0x7e, 0x10, 0xc5, 0x62, 0x9e, 0xbc, 0x94, 0x5f, 0xc4, 0xb2, 0xe3, 0xb6,
	0xdc, 0x45, 0x05, 0x9d, 0x6f, 0xf9, 0xb1, 0x6b, 0xc6, 0xbb, 0x78, 0x87, 0x3b, 0x79, 0x3d, 0x3f,
	0xd6, 0xde, 0xb5, 0xfc, 0x86, 0xb0, 0xdf, 0x0a, 0x83, 0x1d, 0xb7, 0x89, 0x59, 0xb1, 0xd7, 0x0a,
	0x8a, 0x05, 0x9e, 0x67, 0xf9, 0x8e, 0x69, 0x5b, 0xbe, 0x8d, 0x9b, 0x4d, 0xd9, 0xd8, 0x8d, 0xf2,
	0x52, 0xad, 0x10, 0xdb, 0xcd, 0x76, 0xe4, 0x06, 0x6c, 0x42, 0xb1, 0x92, 0x6f, 0x17, 0x95, 0x4c,
	0xfc, 0xb5, 0x43, 0x6c, 0x8a, 0x67, 0xc2, 0xc4, 0x9e, 0x1b, 0x45, 0xa9, 0xee, 0x6b, 0xe5, 0xa5,
	0x89, 0x4d, 0xb3, 0xdd, 0x72, 0x52, 0xcd, 0x37, 0xf2, 0x4b, 0xe1, 0x27, 0xd8, 0x6e, 0xc7, 0xd8,
	0x6c, 0x61, 0xdf, 0x71, 0xfd, 0x06, 0x2b, 0x57, 0xf8, 0xa4, 0xd0, 0x82, 0xbb, 0x9e, 0x9b, 0xcc,
	0xa0, 0x56, 0xd3, 0xea, 0x14, 0x3d, 0xb4, 0x69, 0xb0, 0xd5, 0x6a, 0x35, 0x5d, 0x5b, 0xee, 0xc4,
	0x02, 0x5b, 0x81, 0x6f, 0x3a, 0x98, 0x74, 0x63, 0xf2, 0xb9, 0x1d, 0x65, 0xdb, 0x53, 0x30, 0xe9,
	0x42, 0xdc, 0x0a, 0xc2, 0xd8, 0x3c, 0x70, 0x77, 0x5c, 0xb3, 0x1d, 0x59, 0x8d, 0x3e, 0xba, 0x3d,
	0x4c, 0x16, 0x31, 0xbc, 0x8f, 0x4d, 0x36, 0x61, 0x5b, 0x96, 0x1b, 0x26, 0x5d, 0x61, 0x07, 0x0e,
	0x2e, 0x7f, 0xf6, 0xe2, 0x60, 0x0f, 0xfb, 0x66, 0x88, 0x77, 0x42, 0x1c, 0xed, 0xb2, 0xf0, 0x6f,
	0xe7, 0x87, 0xb7, 0x23, 0x1c, 0x9a, 0x56, 0x3b, 0xde, 0xa5, 0xb3, 0x31, 0xf4, 0xfa, 0x9c, 0x55,
	0xfb, 0x78, 0xd7, 0xb5, 0x9b, 0xd8, 0xb4, 0x9b, 0x96, 0xeb, 0x99, 0xfb, 0x56, 0xd3, 0x75, 0xe4,
	0x92, 0x05, 0x03, 0x45, 0xba, 0x82, 0x4e, 0x8e, 0x3e, 0x83, 0x69, 0x97, 0xb3, 0xe0, 0x25, 0x55,
	0x70, 0x03, 0x07, 0x3b, 0xd8, 0xb7, 0x79, 0xf7, 0xa8, 0xb7, 0xad, 0x30, 0x0c, 0x42, 0xf5, 0xb3,
	0xc9, 0x1e, 0x11, 0x1a, 0x12, 0x89, 0x27, 0x86, 0x7c, 0x94, 0xf7, 0x9d, 0x0b, 0xea, 0x62, 0x89,
	0x49, 0xf2, 0x0f, 0x0b, 0x7b, 0x47, 0x1d, 0x46, 0x87, 0x93, 0x8d, 0xe6, 0x4a, 0xee, 0xe0, 0x2e,
	0xfd, 0xe9, 0x11, 0x38, 0x52, 0x4b, 0x2c, 0xeb, 0xe3, 0xa0, 0xb9, 0x4e, 0x05, 0x2d, 0xa0, 0xcb,
	0xa3, 0x86, 0xe6, 0x3a, 0xfa, 0x05, 0x18, 0xb7, 0x83, 0x30, 0xc4, 0xf4, 0xd1, 0x37, 0x5d, 0xa7,
	0xa2, 0x91, 0xbc, 0x93, 0x52, 0xea, 0x5d, 0x47, 0x9f, 0x81, 0xa3, 0x51, 0xd0, 0x0e, 0x6d, 0x5c,
	0x39, 0x44, 0xb2, 0xd9, 0x27, 0xfd, 0x06, 0x8c, 0x8a, 0xed, 0xb6, 0x72, 0x78, 0x01, 0x5d, 0x1e,
	0xbb, 0x3e, 0x5b, 0xa5, 0x1b, 0x72, 0x95, 0x6f, 0xc8, 0xd5, 0x3a, 0x8f, 0x30, 0xd2, 0x60, 0xbd,
	0x0a, 0xc7, 0x5a, 0x56, 0xa7, 0x19, 0x58, 0x4e, 0xe5, 0x08, 0x29, 0x37, 0xdd, 0x53, 0xee, 0xa6,
	0xdf, 0x31, 0x78, 0x90, 0xbe, 0x08, 0x63, 0x51, 0x4c, 0xda, 0x95, 0xf4, 0x5e, 0xe5, 0x68, 0x62,
	0x63, 0x7d, 0xc4, 0x00, 0x9a, 0x78, 0xcb, 0x8a, 0x2d, 0x7d, 0x1e, 0x60, 0xbb, 0x13, 0xe3, 0x88,
	0x46, 0x1c, 0x5b, 0x40, 0x97, 0x4f, 0xac, 0x8f, 0x18, 0xa3, 0x24, 0x8d, 0x04, 0xbc, 0x0e, 0x10,
	0x77, 0x5a, 0xd8, 0xa1, 0x01, 0xc7, 0xf3, 0x65, 0x93, 0x62, 0x24, 0x92, 0x14, 0xbb, 0x02, 0x7a,
	0x72, 0x5a, 0xe8, 0xea, 0xa7, 0x51, 0xd2, 0x11, 0x13, 0x01, 0xf6, 0xd6, 0x32, 0x5d, 0xf5, 0x1a,
	0x1c, 0x8e, 0xad, 0x46, 0x54, 0x81, 0x85, 0x43, 0x97, 0xc7, 0xae, 0x2f, 0x54, 0xb3, 0xc7, 0x19,
	0xb1, 0xec, 0x55, 0x93, 0xa3, 0x40, 0xdd, 0x6a, 0x18, 0x24, 0x5a, 0x7f, 0x0f, 0x8e, 0xf3, 0x13,
	0x49, 0x65, 0x8c, 0x18, 0xbb, 0xd0, 0x55, 0x92, 0x9e, 0x5b, 0xaa, 0x01, 0xf6, 0xc8, 0xf4, 0x79,
	0x80, 0xbd, 0xc4, 0x9c, 0x71, 0x2c, 0xa0, 0x7f, 0xe8, 0x1f, 0xc2, 0x49, 0x0f, 0xc7, 0x56, 0x92,
	0x69, 0x12, 0x03, 0x27, 0x88, 0x81, 0x2b, 0x55, 0xc5, 0x79, 0xaa, 0x4a, 0x26, 0x43, 0x75, 0x83,
	0xc5, 0xd7, 0xad, 0x46, 0x54, 0xf3, 0xe3, 0xb0, 0x63, 0x9c, 0xf0, 0xa4, 0xa4, 0xd9, 0xef, 0xc2,
	0x64, 0x4f, 0x88, 0x3e, 0x01, 0x87, 0xf6, 0x70, 0x87, 0x4d, 0xa1, 0xe4, 0x4f, 0x7d, 0x1a, 0x8e,
	0xec, 0x5b, 0xcd, 0x36, 0x66, 0x53, 0x87, 0x7e, 0xf8, 0x8e, 0x76, 0x03, 0xad, 0x4e, 0xc2, 0x29,
	0xcb, 0xa1, 0xc7, 0x18, 0xab, 0x49, 0x1a, 0xb7, 0xf4, 0x6b, 0x04, 0x50, 0x4b, 0x9e, 0x02, 0x3a,
	0x1f, 0xdf, 0x85, 0x93, 0x07, 0x7b, 0xec, 0xb1, 0xf0, 0x2d, 0x0f, 0x93, 0x7a, 0xc7, 0xaf, 0xcf,
	0xaa, 0x5d, 0x27, 0x61, 0xc6, 0xd8, 0xc1, 0x1e, 0xf9, 0xe3, 0xbe, 0xe5, 0x61, 0xbd, 0x02, 0xc7,
	0x3c, 0x1c, 0x25, 0xab, 0x20, 0x53, 0xe7, 0x1f, 0xf5, 0x1b, 0x99, 0x29, 0x3b, 0xde, 0x33, 0x12,
	0x52, 0x95, 0x5b, 0x24, 0x4e, 0x4c, 0xea, 0xa7, 0x9c, 0x9a, 0x4b, 0xbf, 0xfd, 0x02, 0xc1, 0xa9,
	0xad, 0x64, 0x71, 0xa9, 0x87, 0x96, 0x4f, 0x0f, 0x82, 0xfa, 0x65, 0x38, 0xc5, 0xe6, 0xeb, 0x4e,
	0xe4, 0xa5, 0x4d, 0x4b, 0xe6, 0xec, 0x49, 0x9a, 0x71, 0x3b, 0xf2, 0x48, 0x13, 0x0c, 0x18, 0x3b,
	0xd8, 0x4b, 0xa3, 0x8e, 0x11, 0xb7, 0xd7, 0x94, 0x6e, 0x3f, 0xc2, 0xcd, 0xe6, 0x07, 0xc9, 0x01,
	0xee, 0xb6, 0xeb, 0xbb, 0x31, 0x26, 0x9a, 0x1b, 0x96, 0xbd, 0xeb, 0xfa, 0x38, 0x99, 0xb2, 0x07,
	0x7b, 0xbc, 0xce, 0x2b, 0x30, 0xc9, 0xd5, 0xc3, 0xc0, 0xa3, 0xbb, 0x33, 0xed, 0xa0, 0x75, 0x64,
	0x30, 0x63, 0xb7, 0xc3, 0xc0, 0x23, 0x35, 0xe8, 0x9f, 0xc3, 0x82, 0x83, 0x93, 0xcd, 0xdc, 0x8a,
	0x93, 0x87, 0x43, 0x9c, 0xf9, 0xe4, 0xc2, 0xc7, 0x89, 0xad, 0xab, 0xc5, 0xb6, 0x6e, 0x89, 0xa2,
	0xa4, 0xe2, 0x55, 0xad, 0x82, 0xd6, 0x91, 0x31, 0x97, 0x56, 0x9e, 0x06, 0xa4, 0xea, 0xbf, 0x07,
	0x95, 0xcc, 0xe9, 0x4e, 0x56, 0x1d, 0x23, 0xaa, 0xab, 0x4a, 0x55, 0x7a, 0xe4, 0xd8, 0x77, 0xfd,
	0xf4, 0x94, 0x27, 0x8c, 0x3c, 0x72, 0xfd, 0x5b, 0x3c, 0x95, 0xa8, 0xac, 0x23, 0xe3, 0xf4, 0xbe,
	0x94, 0x98, 0x91, 0xcf, 0x9c, 0x45, 0x65, 0xf9, 0xf1, 0x52, 0x79, 0x5a, 0x94, 0x9d, 0x62, 0xa5,
	0x7e, 0x48, 0x52, 0x3f, 0x22, 0xa9, 0x42, 0xde, 0x91, 0x12, 0x53, 0xf9, 0x1f, 0x22, 0x38, 0xdb,
	0x7d, 0x5a, 0x95, 0x2d, 0x4c, 0x12, 0x0b, 0xeb, 0x05, 0x16, 0x68, 0x69, 0x45, 0x27, 0x6c, 0x90,
	0x8c, 0x9e, 0x7e, 0xa8, 0x78, 0xd9, 0xf4, 0xd4, 0xcb, 0x4f, 0x10, 0x9c, 0x57, 0x9c, 0x83, 0x65,
	0x3b, 0xd3, 0xc4, 0xce, 0xbd, 0xd2, 0x1e, 0xa1, 0xe5, 0xe9, 0x31, 0xba, 0xab, 0x5b, 0xd6, 0x48,
	0x96, 0x91, 0x64, 0x71, 0x4b, 0xb3, 0x4e, 0x77, 0x4e, 0x6a, 0xea, 0x47, 0x08, 0xce, 0xf5, 0x9c,
	0xb3, 0x65, 0x4b, 0x2f, 0x10, 0x4b, 0xef, 0x97, 0x5a, 0x92, 0x4e, 0xe9, 0x5d, 0x8e, 0x6e, 0x89,
	0x1c, 0x6e, 0xe8, 0x8c, 0xd3, 0x95, 0x91, 0xfa, 0xe9, 0xc0, 0x0b, 0xf2, 0x9b, 0x8e, 0xec, 0x64,
	0x96, 0x38, 0x79, 0xaf, 0xc0, 0xc9, 0x1e, 0xee, 0x88, 0x57, 0x24, 0x61, 0xe2, 0x03, 0xdc, 0x31,
	0x58, 0x22, 0xd7, 0x9f, 0xde, 0x4b, 0xd3, 0x52, 0xe9, 0x18, 0x4e, 0xab, 0x1f, 0xce, 0x39, 0x22,
	0xfc, 0x6e, 0x61, 0x17, 0x88, 0x17, 0xb9, 0xbc, 0xa7, 0x75, 0x1d, 0x19, 0x53, 0x8e, 0xe2, 0xf9,
	0xfc, 0x19, 0x82, 0x79, 0xd5, 0xc9, 0x5b, 0x36, 0x70, 0x85, 0x18, 0xd8, 0x2c, 0x30, 0x90, 0xa9,
	0x81, 0x1d, 0x75, 0x85, 0x93, 0x35, 0x39, 0xf3, 0x21, 0xc9, 0xe4, 0x96, 0xce, 0xd9, 0xbd, 0x79,
	0xf2, 0x60, 0xcc, 0x48, 0xa7, 0x74, 0xd9, 0xd1, 0x4a, 0x69, 0x97, 0xec, 0x7a, 0x2e, 0x3f, 0xdd,
	0x0b, 0x23, 0xeb, 0x1b, 0x77, 0x6f, 0xd1, 0x34, 0x79, 0x01, 0x9b, 0xda, 0xf5, 0x5c, 0x96, 0x9c,
	0x59, 0x37, 0x32, 0x07, 0x63, 0x59, 0xfc, 0x7a, 0xe9, 0xba, 0x41, 0x8a, 0xf2, 0x23, 0xb5, 0x90,
	0xaf, 0x27, 0xa9, 0x06, 0x4d, 0x15, 0xeb, 0x46, 0x2c, 0x25, 0xa6, 0xf2, 0x5f, 0x23, 0x58, 0xca,
	0x79, 0xb3, 0x91, 0x9d, 0xbc, 0x4e, 0x9c, 0xd4, 0x0b, 0x9c, 0xb0, 0x4a, 0x58, 0x1d, 0xfc, 0xe5,
	0x48, 0x58, 0xaa, 0xd1, 0xec, 0x4d, 0x9a, 0x4d, 0xfb, 0x3f, 0xe2, 0xde, 0xce, 0x63, 0x55, 0x6e,
	0x6a, 0xb2, 0x0d, 0x33, 0xd2, 0xd9, 0x5c, 0xf6, 0x75, 0xa3, 0x74, 0x78, 0x92, 0x82, 0xec, 0x4c,
	0x2f, 0xcc, 0x7c, 0xe4, 0xee, 0xb8, 0x74, 0xae, 0x88, 0x19, 0x7b, 0x20, 0x92, 0x52, 0xd9, 0xbf,
	0x41, 0xb0, 0x94, 0xf3, 0x7a, 0x25, 0x7b, 0x78, 0x8b, 0x78, 0x30, 0x0a, 0x3c, 0x04, 0x3e, 0xad,
	0x83, 0x56, 0xd1, 0x3d, 0x6b, 0x1f, 0xf8, 0xb7, 0x48, 0xee, 0x16, 0xc9, 0xcd, 0x4e, 0xdb, 0xb9,
	0x40, 0x91, 0xd9, 0xdb, 0x31, 0xcc, 0x9b, 0x64, 0xea, 0xdd, 0xbe, 0x3a, 0x86, 0xbd, 0xbf, 0x64,
	0x3a, 0x86, 0x2a, 0x65, 0x3a, 0x86, 0x26, 0xa5, 0xb2, 0x7f, 0x86, 0xe0, 0x5c, 0xcf, 0xeb, 0xa3,
	0xac, 0x7e, 0xb3, 0x74, 0xb7, 0xa1, 0xc5, 0x93, 0xd2, 0xf4, 0xdd, 0x53, 0x58, 0x30, 0x48, 0x46,
	0x62, 0xe4, 0x61, 0x92, 0x21, 0x76, 0x9b, 0x30, 0x9b, 0x9e, 0xd9, 0x6d, 0xe6, 0x55, 0xfc, 0x41,
	0xf6, 0x73, 0x8b, 0xf8, 0xb9, 0x5b, 0xb4, 0xae, 0xc8, 0xe4, 0x42, 0x5a, 0x50, 0x48, 0xbd, 0x6b,
	0x52, 0xa6, 0xb4, 0xa0, 0xf4, 0xe4, 0xa5, 0xa6, 0x7e, 0x89, 0x60, 0x39, 0xef, 0x45, 0x54, 0x36,
	0x76, 0x87, 0x18, 0x7b, 0x54, 0x74, 0x30, 0xa1, 0xb5, 0x90, 0x4a, 0xa4, 0x97, 0xd9, 0xf4, 0x88,
	0x42, 0xf3, 0xd7, 0x92, 0xfc, 0x47, 0x22, 0x9f, 0xbb, 0x9c, 0xdf, 0x57, 0x66, 0xa7, 0x46, 0x7f,
	0x85, 0xe0, 0x52, 0xd1, 0x6b, 0xbd, 0x6c, 0xf6, 0x7d, 0x62, 0xf6, 0xfb, 0x85, 0xa3, 0x4a, 0x6b,
	0xca, 0xbc, 0x50, 0x92, 0x17, 0x48, 0x69, 0x7c, 0x69, 0x08, 0xdd, 0x32, 0x37, 0x69, 0xc8, 0x5a,
	0xe0, 0x88, 0x91, 0x5e, 0x0a, 0xf3, 0x22, 0x52, 0xd7, 0x3f, 0x47, 0xb0, 0xa0, 0x44, 0x55, 0xb2,
	0xdd, 0x8d, 0xf2, 0xcd, 0x84, 0x54, 0x41, 0x6b, 0xe0, 0xac, 0x2b, 0x1d, 0x7b, 0x92, 0x49, 0xd7,
	0x84, 0x4d, 0x9a, 0x99, 0x8e, 0x7d, 0x6f, 0x5e, 0x6a, 0xee, 0x5f, 0x10, 0x5c, 0x2a, 0x02, 0x54,
	0xb2, 0xc7, 0x4d, 0xe2, 0xf1, 0xd3, 0x3e, 0x36, 0x3c, 0x2c, 0x2a, 0x12, 0xa0, 0xab, 0x67, 0xdf,
	0xc3, 0x75, 0x1e, 0x53, 0x63, 0x31, 0xdc, 0xf1, 0xb2, 0x9d, 0x1b, 0x92, 0x1a, 0xff, 0x0a, 0xc1,
	0xa2, 0x9a, 0xba, 0xc8, 0x96, 0xb7, 0x4a, 0x97, 0xbb, 0xa4, 0x8e, 0xa4, 0x8a, 0x0c, 0xb7, 0x11,
	0x66, 0x1f, 0x46, 0x38, 0xbc, 0xd9, 0x8e, 0x77, 0xd7, 0xa4, 0x5c, 0xb1, 0xdc, 0xb5, 0x15, 0x99,
	0xa9, 0xc1, 0xc7, 0x70, 0x3a, 0x85, 0x99, 0xb2, 0xa7, 0x47, 0xc4, 0xd3, 0xdb, 0x05, 0x9e, 0x92,
	0x72, 0x94, 0x81, 0x0a, 0x23, 0x37, 0xfd, 0xd8, 0xad, 0x27, 0x49, 0x5c, 0x5d, 0xb7, 0x78, 0x4a,
	0x76, 0x7f, 0xec, 0x62, 0x72, 0x26, 0x7b, 0x35, 0x94, 0x0d, 0x7c, 0xaf, 0x74, 0x7f, 0xdc, 0xf5,
	0x5c, 0xa9, 0x0e, 0x56, 0x45, 0xe6, 0xc4, 0x70, 0x33, 0xcd, 0xde, 0xa0, 0xd9, 0x62, 0x7f, 0xdc,
	0xf5, 0xdc, 0xde, 0xdc, 0xd4, 0xe4, 0x97, 0x08, 0xe6, 0x14, 0x30, 0x55, 0xf2, 0xf7, 0x7d, 0xe2,
	0xef, 0xc3, 0xc2, 0x79, 0x46, 0xca, 0xa7, 0xc5, 0x69, 0x72, 0xf7, 0x52, 0xb8, 0x29, 0xf2, 0xc5,
	0xa1, 0xdb, 0xee, 0xce, 0x49, 0x8d, 0xfd, 0x07, 0x82, 0x6a, 0x32, 0x8e, 0x07, 0x56, 0x88, 0xcd,
	0x76, 0xab, 0x11, 0x5a, 0x4e, 0xf2, 0xc4, 0x16, 0x39, 0x35, 0x89, 0xd3, 0x1f, 0x3c, 0x83, 0xd3,
	0xdb, 0x4c, 0xf0, 0x21, 0xd5, 0xcb, 0x35, 0xfe, 0xd2, 0x4e, 0x49, 0x60, 0x66, 0x95, 0xbc, 0xec,
	0x60, 0xdc, 0x32, 0xa3, 0x66, 0xf2, 0x6f, 0x71, 0x0b, 0xb6, 0x49, 0x0b, 0x3e, 0x79, 0x86, 0x16,
	0xdc, 0xc2, 0xb8, 0xb5, 0x95, 0x28, 0xe5, 0x7a, 0x5f, 0x76, 0x72, 0x43, 0x52, 0xd7, 0xbf, 0x41,
	0x70, 0xdd, 0xb6, 0xc2, 0xd0, 0xc5, 0xa1, 0x19, 0xe2, 0x86, 0x1b, 0xc5, 0xec, 0xe0, 0x5d, 0xec,
	0x1f, 0x13, 0xff, 0xce, 0xb3, 0xcc, 0x15, 0x2a, 0x6a, 0x48, 0x9a, 0xb9, 0x2d, 0xb9, 0x6a, 0xf7,
	0x11, 0x9c, 0xb6, 0xe9, 0xb7, 0x08, 0x5e, 0x8d, 0xb1, 0xd7, 0xc2, 0xa1, 0x15, 0x93, 0xe5, 0x75,
	0x37, 0x39, 0xcf, 0x06, 0x4d, 0xa7, 0xa4, 0x51, 0xbb, 0xa4, 0x51, 0xf8, 0x19, 0x1a, 0x55, 0x4f,
	0x55, 0xeb, 0x5c, 0x34, 0xb7, 0x55, 0xd5, 0xb8, 0x9f, 0xe8, 0xb4, 0x59, 0x2d, 0x98, 0x16, 0xdf,
	0xe8, 0xc8, 0xb6, 0x0f, 0xca, 0x17, 0x36, 0xf1, 0x45, 0x50, 0xba, 0xb0, 0xf1, 0xa4, 0x74, 0x61,
	0xe3, 0x29, 0xa9, 0xe2, 0x67, 0x70, 0xaa, 0x19, 0xd8, 0x7b, 0xb2, 0xd8, 0xc2, 0xb3, 0x8b, 0xb1,
	0x37, 0x9d, 0x93, 0x49, 0xd5, 0xa9, 0x96, 0x0f, 0x93, 0x6d, 0xbf, 0x5b, 0x6d, 0x79, 0x60, 0x6a,
	0xa7, 0x68, 0xe5, 0x99, 0x77, 0xeb, 0x10, 0x7b, 0x41, 0x8c, 0x13, 0xa9, 0x30, 0xb3, 0x53, 0x5c,
	0x1c, 0x98, 0xea, 0x34, 0x95, 0xd8, 0x4a, 0x14, 0x52, 0xe9, 0x2f, 0x10, 0x9c, 0xa7, 0x67, 0x49,
	0x33, 0xcf, 0xc2, 0x4b, 0x03, 0xb3, 0x30, 0x4b, 0x95, 0x0c, 0x95, 0x91, 0x9f, 0x22, 0xb8, 0x40,
	0xa5, 0xd3, 0x13, 0x88, 0x1d, 0x34, 0x9b, 0xd8, 0xee, 0x9e, 0x63, 0x7b, 0x03, 0xf3, 0xb3, 0x48,
	0x04, 0xc5, 0x09, 0x63, 0x4d, 0xc8, 0x65, 0xb6, 0xaa, 0x8b, 0xac, 0x7f, 0xca, 0x7c, 0xf9, 0x03,
	0xf3, 0xb5, 0x44, 0x15, 0x0b, 0x8d, 0x1d, 0xc0, 0x8c, 0x38, 0xb0, 0xb7, 0x33, 0x7b, 0xfb, 0xe3,
	0x81, 0xf9, 0x98, 0xe2, 0xa7, 0xf1, 0xb6, 0xb4, 0x79, 0x47, 0x30, 0xdd, 0xb2, 0x7c, 0xd7, 0xee,
	0x96, 0x8d, 0x07, 0x26, 0x3b, 0x49, 0xea, 0xcf, 0x88, 0xa6, 0x58, 0x39, 0x0e, 0x98, 0x1e, 0xf9,
	0x46, 0x66, 0x5d, 0xe3, 0x58, 0xb9, 0x1e, 0xd0, 0xc8, 0x27, 0x70, 0x5e, 0x0d, 0x75, 0x45, 0xc1,
	0xd1, 0x6f, 0x8a, 0x74, 0x35, 0xe3, 0xac, 0x0a, 0xe9, 0x72, 0xe5, 0x0e, 0xcc, 0x64, 0x81, 0xae,
	0x50, 0x3c, 0x31, 0x30, 0x9c, 0xab, 0x19, 0x53, 0x32, 0xce, 0x95, 0xa4, 0xb3, 0x30, 0x57, 0x48,
	0x9f, 0x1a, 0x18, 0xca, 0xd5, 0x8c, 0x29, 0x19, 0xe5, 0x72, 0xe9, 0x3f, 0x41, 0x70, 0xa6, 0x07,
	0xe4, 0x0a, 0x79, 0x7d, 0xc0, 0x18, 0x57, 0x33, 0x66, 0xba, 0x30, 0x2e, 0xf7, 0xf1, 0xe7, 0x29,
	0x2f, 0xcd, 0x40, 0x5c, 0x61, 0xe5, 0xf4, 0x10, 0x10, 0xae, 0x66, 0x54, 0x7a, 0x10, 0x2e, 0x37,
	0xf4, 0x43, 0x04, 0xb3, 0xbd, 0x00, 0x57, 0xd8, 0xa9, 0x0c, 0x1c, 0xdf, 0x6a, 0xc6, 0x0b, 0xdd,
	0xf8, 0x96, 0x7b, 0x69, 0xc3, 0xe9, 0x0c, 0xbc, 0x15, 0x2e, 0xce, 0x0e, 0x08, 0xdd, 0x6a, 0x86,
	0x2e, 0xa1, 0x5b, 0x2e, 0xdb, 0x82, 0x29, 0xd5, 0x03, 0x78, 0x7e, 0x20, 0xd8, 0x56, 0x33, 0x26,
	0x9d, 0x9e, 0x67, 0xf0, 0xaf, 0xc8, 0x9b, 0x85, 0x02, 0xda, 0x0a, 0xf1, 0xab, 0x43, 0x42, 0xb6,
	0x5a, 0xf2, 0x62, 0xd1, 0x93, 0x97, 0x0e, 0xc0, 0xb4, 0x0c, 0x6c, 0x85, 0x9b, 0x6b, 0x03, 0xc3,
	0xb5, 0x9a, 0x31, 0x99, 0xe2, 0x5a, 0x69, 0x5d, 0xc8, 0xc2, 0x5a, 0x21, 0xfc, 0xea, 0xc0, 0x50,
	0xad, 0x66, 0x4c, 0xc9, 0xa8, 0x96, 0x4b, 0x7f, 0x85, 0x60, 0x21, 0x0f, 0xd4, 0x0a, 0x17, 0xdf,
	0x1e, 0x22, 0xa6, 0xd5, 0x8c, 0x73, 0x4a, 0x4c, 0xcb, 0x0d, 0x3e, 0x86, 0x69, 0x19, 0xd2, 0x0a,
	0x4f, 0x6f, 0x0e, 0x04, 0xd1, 0x6a, 0xc6, 0x64, 0x8a, 0x68, 0xb9, 0xe4, 0x2f, 0x10, 0x2c, 0xe4,
	0x01, 0x5a, 0xa1, 0xff, 0xf6, 0xd0, 0xf0, 0xac, 0x66, 0x9c, 0x55, 0xe1, 0xd9, 0xee, 0x0e, 0x61,
	0xbe, 0x84, 0xa1, 0xef, 0x0e, 0x04, 0xcd, 0xb2, 0x0e, 0xa1, 0x49, 0x5c, 0xf2, 0x0b, 0x04, 0xb3,
	0xbd, 0x60, 0x56, 0x28, 0xaf, 0x0e, 0x18, 0xcb, 0x6a, 0xc6, 0x4c, 0x17, 0x96, 0x95, 0x76, 0x8f,
	0x39, 0x25, 0x94, 0x15, 0x5e, 0x6a, 0x83, 0x46, 0xb2, 0x9a, 0x20, 0x11, 0x72, 0x1e, 0x37, 0xf4,
	0x35, 0x82, 0xc5, 0x5c, 0x20, 0x2b, 0x4c, 0xad, 0x0f, 0x15, 0xc7, 0x6a, 0xc6, 0x9c, 0x1a, 0xc7,
	0x72, 0x93, 0xff, 0x84, 0xe0, 0x42, 0x21, 0x8c, 0x15, 0x46, 0x3f, 0x78, 0x0e, 0x28, 0x56, 0x33,
	0x16, 0x72, 0x51, 0x2c, 0x77, 0xfc, 0x65, 0xf2, 0xba, 0xa3, 0x04, 0xb1, 0xc2, 0xea, 0xfd, 0x21,
	0x61, 0xd8, 0x64, 0xbc, 0x7b, 0xf3, 0xb8, 0xb1, 0x7f, 0x46, 0x70, 0xa1, 0x10, 0xc2, 0x0a, 0x7f,
	0x1f, 0x3e, 0x17, 0x04, 0xab, 0x19, 0x8b, 0xf9, 0x08, 0x96, 0x9b, 0xfe, 0x39, 0x82, 0xf9, 0x1c,
	0x00, 0x2b, 0xec, 0xd6, 0x87, 0x86, 0x5f, 0x35, 0xe3, 0xac, 0x0a, 0xbf, 0x72, 0x73, 0x1e, 0x4c,
	0x49, 0xf0, 0x55, 0xf8, 0xf9, 0x68, 0x00, 0xe8, 0x55, 0x33, 0x26, 0x04, 0x7a, 0x95, 0xf7, 0xbb,
	0x3c, 0xf0, 0x2a, 0xc4, 0x3f, 0x19, 0x22, 0x76, 0xd5, 0x8c, 0x73, 0x4a, 0xec, 0xca, 0x0d, 0xfe,
	0x04, 0xc1, 0x59, 0x05, 0x73, 0x12, 0xde, 0xfe, 0xff, 0xb0, 0x90, 0xab, 0x66, 0x54, 0x7a, 0x90,
	0x2b, 0x37, 0xf5, 0xef, 0x08, 0xae, 0xf4, 0x03, 0x5c, 0x85, 0xcb, 0x1f, 0x3c, 0x27, 0xdc, 0xaa,
	0x19, 0x97, 0xca, 0x70, 0xab, 0xb4, 0x0a, 0x5e, 0x2c, 0x86, 0xad, 0xc2, 0xbd, 0x3d, 0x74, 0xd4,
	0xaa, 0x19, 0x8b, 0xf9, 0xa8, 0x95, 0x3b, 0xfe, 0x4f, 0x04, 0xd7, 0xfa, 0x05, 0xad, 0xc2, 0xfb,
	0xce, 0x73, 0xc4, 0xac, 0x9a, 0xf1, 0x72, 0x3f, 0x98, 0x95, 0xb7, 0xe7, 0xd7, 0x08, 0x5e, 0xe9,
	0x1b, 0xb2, 0x8a, 0x06, 0xb9, 0xcf, 0x13, 0xb1, 0x6a, 0xc6, 0x95, 0xbe, 0x10, 0x2b, 0x6f, 0x52,
	0x13, 0x52, 0x08, 0x9a, 0x5a, 0x7e, 0x32, 0x00, 0xbc, 0x9a, 0x2c, 0x5e, 0x3c, 0x85, 0xab, 0xed,
	0x00, 0x21, 0xa0, 0xa9, 0xd0, 0xe2, 0x80, 0x60, 0x8e, 0x66, 0x8c, 0x25, 0x15, 0x73, 0x9d, 0xcf,
	0x80, 0xb1, 0xcf, 0x54, 0xe9, 0xc5, 0x81, 0x29, 0x9d, 0xa4, 0x55, 0x4b, 0xef, 0xbc, 0x19, 0xa2,
	0x29, 0x14, 0x2f, 0x0d, 0x4c, 0x51, 0x97, 0x90, 0x2a, 0x97, 0xfd, 0x43, 0x04, 0xe7, 0x54, 0x40,
	0x55, 0xc8, 0x7f, 0x6b, 0x60, 0xf2, 0x95, 0x1e, 0x9c, 0xca, 0x4d, 0xfc, 0x18, 0xc1, 0x72, 0x01,
	0x4c, 0x15, 0x5e, 0x9a, 0x03, 0xf3, 0x32, 0x9f, 0x87, 0x52, 0xa5, 0xed, 0xe7, 0xc5, 0x22, 0x90,
	0x2a, 0x3c, 0x05, 0x03, 0xf3, 0xb4, 0x90, 0x8b, 0x51, 0xb9, 0xa9, 0x08, 0xa6, 0x65, 0x88, 0x2a,
	0x3c, 0x84, 0x03, 0xf3, 0x30, 0x99, 0x22, 0x54, 0x2e, 0x1a, 0x80, 0x9e, 0x02, 0x54, 0x21, 0xd9,
	0x1e, 0x98, 0xe4, 0x29, 0x8e, 0x4f, 0xb9, 0xe0, 0x25, 0x18, 0xe7, 0xf0, 0x34, 0x74, 0x1b, 0x0d,
	0x1c, 0x92, 0x9f, 0xac, 0x8f, 0xae, 0x1f, 0x12, 0xec, 0x94, 0x26, 0xeb, 0x7f, 0x84, 0x60, 0x2e,
	0x07, 0x9e, 0xb2, 0x82, 0x40, 0x5c, 0xbe, 0xd9, 0x2f, 0x3b, 0x4d, 0x7f, 0x18, 0xcc, 0x24, 0x88,
	0xc5, 0x43, 0x39, 0x1c, 0x95, 0xb9, 0xf8, 0x63, 0x04, 0xa7, 0xbb, 0x40, 0x2a, 0x53, 0x3f, 0x49,
	0xd4, 0xef, 0x3f, 0x13, 0x47, 0xed, 0xb1, 0xb4, 0x7e, 0xa8, 0x8b, 0xa9, 0x4a, 0x36, 0xba, 0xa0,
	0x2a, 0xb3, 0x31, 0x51, 0x6a, 0xa3, 0x9c, 0xa9, 0x2a, 0x6d, 0x64, 0xf8, 0x2a, 0xb3, 0xf1, 0x63,
	0x04, 0x95, 0x5e, 0xbe, 0xca, 0x9c, 0x4c, 0x95, 0x9e, 0x27, 0xfb, 0xc5, 0xab, 0x2a, 0x3f, 0x3d,
	0xa8, 0x95, 0x59, 0xfa, 0x19, 0x82, 0xb3, 0x4a, 0xd4, 0xca, 0x5c, 0xcd, 0x10, 0x57, 0x1f, 0x0f,
	0x88, 0xb4, 0xaa, 0x9c, 0x29, 0xa8, 0x2b, 0xf3, 0xf6, 0x53, 0x04, 0x67, 0x14, 0xd4, 0x95, 0x39,
	0x3b, 0x53, 0xfa, 0xbe, 0xdc, 0x3f, 0x74, 0x55, 0xf9, 0xea, 0x05, 0xb0, 0xcc, 0xd6, 0x1f, 0x20,
	0x98, 0xce, 0x12, 0x58, 0xe6, 0xe8, 0x5c, 0x29, 0x95, 0x2e, 0x03, 0xb0, 0x2a, 0x1f, 0x19, 0x18,
	0xcb, 0x2c, 0xfc, 0x2e, 0xe8, 0x8a, 0x07, 0x7a, 0xbe, 0x0f, 0x0c, 0x5d, 0xc4, 0x62, 0x55, 0xea,
	0x32, 0x97, 0x65, 0xe2, 0x7f, 0x9b, 0xec, 0x8a, 0x4a, 0x2e, 0xcb, 0x7c, 0x54, 0x4b, 0x01, 0xc1,
	0xd3, 0x62, 0x59, 0x95, 0x33, 0x25, 0xa2, 0x4d, 0x87, 0x68, 0x2a, 0xc3, 0x68, 0x99, 0xb3, 0x57,
	0x4a, 0x7b, 0xa8, 0x18, 0xd1, 0xe6, 0xad, 0x81, 0x32, 0xae, 0x95, 0x96, 0x9c, 0x2e, 0x5e, 0xcb,
	0x4c, 0xbc, 0x56, 0xba, 0xe4, 0x94, 0xe3, 0x5a, 0xe5, 0x92, 0x93, 0x41, 0xb7, 0xcc, 0xc6, 0xdf,
	0x23, 0x98, 0xcf, 0x45, 0xb7, 0xcc, 0xd0, 0x1b, 0xa5, 0xef, 0x61, 0xdf, 0x84, 0xdc, 0xaa, 0x2c,
	0xe6, 0x50, 0x5c, 0xe6, 0xf5, 0x73, 0x98, 0xca, 0x50, 0x5c, 0x66, 0xef, 0x3b, 0xa5, 0x83, 0x56,
	0x0c, 0x71, 0x95, 0xd3, 0x5a, 0x02, 0xba, 0x4c, 0xfd, 0x97, 0x08, 0xe6, 0x73, 0x81, 0x2e, 0xb3,
	0xf2, 0x4e, 0x29, 0xaf, 0x79, 0x7a, 0x9e, 0xab, 0xb2, 0xa7, 0x66, 0xbb, 0x5d, 0xdd, 0xc4, 0xd9,
	0x2e, 0xf3, 0xf6, 0x5e, 0x5f, 0xdd, 0x94, 0x8f, 0x76, 0x73, 0xbb, 0x89, 0x67, 0x53, 0xf5, 0xbf,
	0x44, 0x70, 0x46, 0x81, 0x79, 0x99, 0x89, 0xb5, 0xd2, 0x4d, 0xac, 0x5f, 0xca, 0xab, 0xdc, 0xc4,
	0xba, 0x89, 0x6f, 0xba, 0x89, 0x9d, 0x53, 0x13, 0x5f, 0x66, 0xeb, 0x36, 0xb1, 0xf5, 0x70, 0x10,
	0xc0, 0x37, 0x67, 0x29, 0x52, 0xc4, 0x51, 0x6f, 0xff, 0x80, 0x60, 0x21, 0x1f, 0xfe, 0x32, 0x7f,
	0x77, 0x89, 0xbf, 0xed, 0x81, 0xb3, 0x5f, 0x95, 0xd9, 0x3c, 0x0e, 0xcc, 0xfc, 0xfe, 0x2b, 0x82,
	0x17, 0x8b, 0x39, 0x30, 0xf3, 0x7c, 0x8f, 0x78, 0xde, 0x1d, 0x12, 0x06, 0x56, 0x39, 0x2f, 0x40,
	0xc2, 0xcc, 0xfc, 0xdf, 0x21, 0x98, 0xcb, 0x41, 0xc2, 0xcc, 0xf5, 0x83, 0xf2, 0xbd, 0xe9, 0x29,
	0x89, 0xb0, 0x7a, 0x42, 0xa8, 0xe2, 0xa8, 0xc7, 0x5f, 0x25, 0x2f, 0x4f, 0x85, 0x74, 0x98, 0x59,
	0x35, 0xfa, 0xc0, 0x63, 0xcf, 0x02, 0x87, 0x53, 0xbb, 0x45, 0x78, 0x98, 0xb9, 0xfe, 0x05, 0x82,
	0xf3, 0x79, 0x78, 0x98, 0xf9, 0x7d, 0x58, 0xfa, 0xec, 0x3f, 0x3d, 0x1d, 0x96, 0x96, 0xc4, 0x76,
	0x7e, 0xb6, 0xfe, 0x04, 0x74, 0x99, 0x0f, 0x33, 0x43, 0x1f, 0x97, 0x7e, 0xe5, 0x54, 0x84, 0x87,
	0x55, 0xe3, 0x2a, 0xa1, 0x62, 0x69, 0x7f, 0xcd, 0x45, 0xc5, 0xcc, 0xc7, 0xff, 0x2b, 0x1d, 0xc8,
	0x6f, 0x42, 0x8a, 0x95, 0xfb, 0xab, 0x9a, 0x1a, 0x33, 0xaf, 0x5f, 0x23, 0x98, 0x55, 0x41, 0x34,
	0x66, 0xf3, 0xd3, 0xd2, 0x45, 0xe8, 0x9b, 0x41, 0x63, 0xe5, 0xa1, 0xbf, 0x97, 0x22, 0x33, 0x93,
	0xbf, 0x41, 0xf0, 0x72, 0x5f, 0x14, 0x99, 0xb9, 0xb6, 0x88, 0xeb, 0xc7, 0xc3, 0x86, 0xc8, 0xaa,
	0x46, 0x94, 0x53, 0x65, 0xd6, 0xa6, 0x7f, 0x43, 0x70, 0xa1, 0x84, 0x2a, 0xb3, 0xd6, 0x38, 0xa4,
	0x35, 0x7b, 0xc3, 0x83, 0xca, 0xaa, 0x76, 0x14, 0x51, 0x66, 0xd6, 0x82, 0xff, 0x42, 0xb0, 0xd2,
	0x37, 0x65, 0x66, 0x6d, 0x69, 0x90, 0xb6, 0xb4, 0x9f, 0x07, 0x64, 0x56, 0xb5, 0xaa, 0x3f, 0xea,
	0xcc, 0xda, 0xf7, 0xdf, 0x08, 0xae, 0xf5, 0x4f, 0x9d, 0x59, 0x03, 0x3f, 0x23, 0x0d, 0xdc, 0x7f,
	0x2e, 0xd0, 0x59, 0xd5, 0xc2, 0x3e, 0x29, 0x34, 0x6b, 0xe2, 0x01, 0x4c, 0x4a, 0x14, 0x9a, 0x35,
	0xa1, 0x53, 0xbe, 0x44, 0x16, 0x90, 0x2a, 0xf5, 0x12, 0x99, 0xe6, 0x52, 0xe1, 0xc7, 0x70, 0x82,
	0x62, 0x62, 0xa6, 0xb9, 0x34, 0x58, 0x4d, 0xf6, 0x0a, 0x46, 0xd9, 0x34, 0x93, 0x6c, 0xc3, 0x38,
	0x67, 0xd3, 0x4c, 0xf4, 0xc2, 0x50, 0x44, 0x39, 0xa6, 0x96, 0xc8, 0x40, 0x16, 0x14, 0x33, 0xf5,
	0xcb, 0x43, 0x51, 0xcf, 0x20, 0x6b, 0x66, 0xe1, 0x47, 0x08, 0xce, 0x2a, 0x91, 0x35, 0x73, 0xf2,
	0xf2, 0x50, 0x9c, 0x28, 0xe8, 0x75, 0x7a, 0x6e, 0x58, 0x2a, 0xa2, 0xd7, 0xcc, 0x96, 0x37, 0x14,
	0x5b, 0xf9, 0x20, 0x9b, 0xb9, 0xfb, 0x6b, 0x04, 0xcb, 0x85, 0x20, 0x9b, 0xd9, 0x6b, 0x0d, 0xc5,
	0x5e, 0x01, 0xd3, 0x66, 0xfe, 0x7e, 0x1f, 0xa6, 0x32, 0x4c, 0x9b, 0xd9, 0x89, 0x86, 0x62, 0x47,
	0xc6, 0xdb, 0x4c, 0xff, 0x77, 0x60, 0x52, 0xc2, 0xdb, 0x4c, 0x7d, 0x7f, 0x28, 0xea, 0x29, 0xe9,
	0x66, 0xda, 0xef, 0xc0, 0x61, 0x72, 0x95, 0xc8, 0xff, 0x1c, 0x23, 0x17, 0x58, 0x5c, 0x56, 0xea,
	0x75, 0xad, 0x8d, 0xe4, 0x3a, 0x11, 0x52, 0x4c, 0xbe, 0x55, 0xe3, 0x48, 0xf6, 0x56, 0x8d, 0x37,
	0x93, 0x9c, 0x38, 0x74, 0xed, 0xa8, 0x72, 0x94, 0xdc, 0x2f, 0x32, 0x9f, 0x7b, 0xc1, 0xc9, 0x06,
	0x89, 0x33, 0x78, 0xfc, 0x2a, 0xc0, 0x71, 0x7e, 0xc9, 0xc5, 0xea, 0x09, 0x80, 0xf4, 0x17, 0xd3,
	0x49, 0x0e, 0xc7, 0xff, 0xab, 0xa3, 0x70, 0x8c, 0xf5, 0xd5, 0xd2, 0x57, 0x1a, 0x8c, 0x93, 0x5b,
	0x42, 0xd6, 0xf8, 0x5d, 0x68, 0xfa, 0x3d, 0x18, 0x15, 0x17, 0xa3, 0xb1, 0xab, 0x42, 0xae, 0x14,
	0x33, 0xf8, 0x6c, 0x05, 0xeb, 0x23, 0x46, 0x5a, 0x81, 0xbe, 0x0c, 0x27, 0xd8, 0xf7, 0x01, 0x4d,
	0x6b, 0x1b, 0x37, 0xd9, 0x2f, 0xa9, 0x47, 0x0c, 0x76, 0xd3, 0xcc, 0xbd, 0x24, 0x51, 0x7f, 0x0b,
	0x8e, 0xd2, 0x16, 0x90, 0xfb, 0x33, 0xca, 0x1b, 0x9c, 0x0c, 0x89, 0xc1, 0x8a, 0xe8, 0xef, 0xc3,
	0x44, 0x88, 0x1f, 0xb7, 0xdd, 0x10, 0x3b, 0x26, 0xef, 0xb7, 0xc3, 0xfd, 0xf5, 0xdb, 0x29, 0x5e,
	0x70, 0x83, 0xf5, 0xdf, 0x04, 0x8c, 0x0b, 0xeb, 0xa4, 0x17, 0x97, 0xfe, 0x42, 0x83, 0x71, 0x36,
	0xe2, 0xd8, 0xa1, 0xf7, 0xa9, 0xac, 0x01, 0xa4, 0x37, 0xc7, 0x55, 0x10, 0x91, 0x5a, 0xce, 0xbf,
	0x02, 0x46, 0x74, 0x8c, 0x21, 0x15, 0xd3, 0x1f, 0xc0, 0x84, 0x74, 0x57, 0x1c, 0xed, 0x1b, 0x8d,
	0x74, 0xf6, 0x72, 0x1f, 0x9d, 0xbd, 0x3e, 0x62, 0x8c, 0x1f, 0xf0, 0x14, 0xda, 0x87, 0x7d, 0x75,
	0xb4, 0x34, 0xb5, 0x0e, 0x3f, 0xe5, 0xd4, 0x3a, 0x06, 0x47, 0x48, 0xc5, 0x4b, 0x5f, 0x1e, 0x82,
	0x93, 0x77, 0xd8, 0xcd, 0x4d, 0xb4, 0x43, 0xde, 0x84, 0xe3, 0xfc, 0x2a, 0x27, 0x32, 0x61, 0xc6,
	0xae, 0xcf, 0x29, 0xdb, 0xc0, 0x4b, 0x19, 0x22, 0x5c, 0x7f, 0x07, 0x8e, 0xf3, 0x7b, 0xfd, 0xd8,
	0xd8, 0x2f, 0xe6, 0x3a, 0xda, 0x64, 0x81, 0x86, 0x28, 0xa2, 0xbf, 0x05, 0x87, 0xe3, 0x4e, 0x8b,
	0x5f, 0x3f, 0x73, 0xa9, 0x50, 0x95, 0xde, 0xc7, 0x53, 0xef, 0xb4, 0xb0, 0x41, 0x0a, 0xe9, 0x1f,
	0xc2, 0x89, 0x98, 0x8f, 0xac, 0xb9, 0xdd, 0x21, 0x5f, 0x54, 0x8d, 0x5f, 0xaf, 0xf6, 0x53, 0x09,
	0x2d, 0x46, 0xea, 0x1a, 0x13, 0x75, 0xac, 0x76, 0x96, 0x2e, 0xc2, 0xe1, 0x24, 0x51, 0x1f, 0x85,
	0x23, 0x0f, 0xef, 0x6f, 0xd5, 0xea, 0x13, 0x23, 0xc9, 0x9f, 0xb5, 0xfb, 0xf5, 0x9a, 0x31, 0x81,
	0xf4, 0xe3, 0x70, 0xb8, 0xf6, 0xf1, 0xdd, 0xfa, 0x84, 0xb6, 0xb4, 0x05, 0x63, 0x52, 0x1d, 0xfa,
	0x0c, 0xe8, 0x24, 0xdc, 0xac, 0x1b, 0x77, 0xef, 0xdc, 0xa9, 0x19, 0x66, 0xfd, 0x7b, 0x9b, 0xb5,
	0x89, 0x91, 0x24, 0xfd, 0x4e, 0xed, 0xc1, 0xed, 0xda, 0xfd, 0xb5, 0x9a, 0xf9, 0x60, 0xb3, 0x66,
	0xdc, 0xac, 0xdf, 0x7d, 0x70, 0x7f, 0x02, 0xe9, 0xd3, 0x30, 0xf1, 0xa8, 0xb6, 0x7e, 0x77, 0xed,
	0x5e, 0xcd, 0xdc, 0x78, 0xf0, 0xa8, 0xb6, 0x51, 0xbb, 0x9f, 0x54, 0xfa, 0x8f, 0x87, 0x61, 0x4a,
	0xb1, 0xde, 0xe8, 0x8f, 0x60, 0xcc, 0x6a, 0x99, 0x11, 0x8e, 0x63, 0xd7, 0x6f, 0x44, 0x6c, 0x84,
	0x56, 0x14, 0x57, 0x1f, 0x59, 0xbe, 0x43, 0x18, 0x5c, 0xf5, 0xa6, 0x6d, 0xe3, 0x28, 0xda, 0x0c,
	0x5c, 0x3f, 0xde, 0x62, 0xc5, 0xc8, 0x2a, 0x38, 0x62, 0x80, 0xd5, 0xe2, 0x29, 0xfa, 0x1e, 0x4c,
	0x67, 0xc0, 0x0b, 0x53, 0x60, 0xe3, 0xf8, 0x46, 0x8e, 0x40, 0x06, 0xb6, 0x54, 0xe5, 0x1f, 0xd6,
	0xd1, 0xe2, 0xeb, 0x23, 0x86, 0xde, 0xea, 0x49, 0xd5, 0xb7, 0xb3, 0x3f, 0x18, 0x15, 0xad, 0x39,
	0x44, 0xc4, 0xaa, 0x45, 0xad, 0x91, 0x7e, 0x1d, 0xca, 0x4a, 0x25, 0x1a, 0x07, 0x3d, 0xa9, 0xfa,
	0xa7, 0xa0, 0xf7, 0x5e, 0x22, 0xc6, 0xae, 0xdc, 0xca, 0x53, 0xa0, 0x97, 0x8f, 0x55, 0xd9, 0xa9,
	0x96, 0x5c, 0x75, 0x94, 0x74, 0xfa, 0xfa, 0x88, 0x31, 0x61, 0x77, 0xa5, 0x91, 0xff, 0xbe, 0xa0,
	0x38, 0xae, 0xdb, 0x56, 0x3b, 0xc2, 0x11, 0xbb, 0x07, 0xe9, 0xce, 0xd3, 0x9f, 0xd6, 0x7b, 0x4e,
	0xd4, 0xcc, 0xc0, 0x0b, 0x3d, 0xef, 0xb0, 0x6b, 0x44, 0x69, 0xf5, 0x28, 0xdd, 0xb9, 0x56, 0x3f,
	0x87, 0x24, 0x44, 0x25, 0xb8, 0x0a, 0x64, 0xa2, 0x6f, 0x86, 0x41, 0x1c, 0x6c, 0xa2, 0x4f, 0xde,
	0x6f, 0xb8, 0xf1, 0x6e, 0x7b, 0x3b, 0x31, 0x90, 0x5e, 0xcf, 0x77, 0xd5, 0x72, 0x57, 0xf0, 0x93,
	0x18, 0x87, 0xbe, 0xd5, 0xbc, 0x4a, 0x6e, 0x6d, 0x8a, 0x56, 0xa2, 0xd0, 0x5e, 0xf1, 0x2c, 0xd7,
	0xa7, 0x37, 0x85, 0xaa, 0xae, 0xf2, 0xfb, 0x5f, 0x84, 0xbe, 0xd6, 0x0e, 0xdd, 0x7c, 0x58, 0xdf,
	0x3e, 0x4a, 0x62, 0x5e, 0xfd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x24, 0xb3, 0xa2, 0xae,
	0x54, 0x00, 0x00,
}
