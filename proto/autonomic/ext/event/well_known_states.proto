/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2018 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
syntax = "proto3";

package autonomic.ext.event;

option go_package = "xk6-fabric/proto/autonomic/ext/event";
option java_package = "com.autonomic.ext.event";
option java_outer_classname = "WellKnownStatesProto";
option java_multiple_files = true;
option cc_enable_arenas = true;
option objc_class_prefix = "AUT";

// Those well-known fsm_name field values in StateTransition events
enum WellKnownFiniteStateMachine {
    UNKNOWN_FSM = 0;
    DEPLOYMENT = 1;
    VIN_DISCOVERY = 2;
    DEVICE_WAKEUP = 3;
    MODULE_DISCOVERY = 4;
    DEVICE_CONFIG_RESET = 5;
    DEVICE_DIAGNOSTIC = 6;
    KEY_ROTATION = 7;
    DEVICE_CONNECTIVITY = 8;
    CONFIGURATION_UPDATE = 13;
    HMI_DISPLAY = 14;
    TOKEN_REFRESH = 15;
    EXECUTE_PENDING_UPDATES = 16;
    WIFI_CONFIG = 17;
    ON_DEMAND_STATUS_UPDATE = 18;
    WIFI_STATUS = 19;
    REPORT_WIFI_USAGE = 20;
    COMMAND_CANCELLATION = 21;
    VEHICLE_CLAIM_VALIDATION = 22;
    RETRIEVE_DEVICE_PAIRING_CODE = 23;
    CHANGE_CONFIG_PROFILE = 24;
    CONFIGURE_TELEMETRY_EMISSION = 25;
    USER_AUTH_CONFIRMATION = 26;
    ANTI_THEFT = 27;
    BOOTSTRAP = 28;
    BINDING_ASSERTION = 29;
    HMI_APPLICATION_MESSAGE = 30;
    COMMAND_PRECLUSION_STATE = 31; // This state should only be emitted by the cloud, as an aggregate of all potential preclusion states
    FIRMWARE_UPGRADE_COMMAND_PRECLUSION_STATE = 32;
    DEEP_SLEEP_COMMAND_PRECLUSION_STATE = 33;
    CARRIER_REGISTRATION_PRECLUSION_STATE = 34;
    TEMPERATURE_THRESHOLD_COMMAND_PRECLUSION_STATE = 35;
    ACTUATION = 42;
    REGULATORY_COMMAND_PRECLUSION_STATE = 43;

    // A defined state machine for opaque commands sent through the TMC.
    OPAQUE_COMMAND = 1000;

    // DEPRECATED FSM types.  These are still supported, but callers should plan to migrate off
    // of these types

    // Callers should begin leveraging the generic actuation FSM type.
    ACTUATION_LOCK = 9 [deprecated = true];
    ACTUATION_UNLOCK = 10 [deprecated = true];
    ACTUATION_REMOTE_START = 11 [deprecated = true];
    ACTUATION_CANCEL_REMOTE_START = 12 [deprecated = true];
    ACTUATION_START_TELEMETRY_COLLECTION_STATE = 36 [deprecated = true];
    ACTUATION_CANCEL_TELEMETRY_COLLECTION_STATE = 37 [deprecated = true];
    ACTUATION_START_VEHICLE_CUE = 38 [deprecated = true];
    ACTUATION_CANCEL_VEHICLE_CUE = 39 [deprecated = true];
    ACTUATION_START_PANIC_CUE = 40 [deprecated = true];
    ACTUATION_CANCEL_PANIC_CUE = 41 [deprecated = true];
}

// DEPRECATED: Those well-known from_state and to_state fields in StateTransition events
enum WellKnownDeploymentState {
    UNKNOWN_DEPLOYMENT_STATE = 0;
    // Deployment request was received by cloud through API
    // Emitted by: cloud
    DEPLOYMENT_REQUESTED = 1;
    // Request was queued in the cloud, waiting for device
    // to connect.
    // Emitted by: cloud
    // Triggered by: DEPLOYMENT_QUEUED_FOR_DELIVERY
    DEPLOYMENT_DELIVERY_QUEUED = 2;
    // Cloud attempted delivery of request to device
    // Emitted by: cloud
    // Triggered by: DEVICE_CONNECTED_TO_CLOUD
    DEPLOYMENT_DELIVERY_IN_PROGRESS = 3;
    // Delivery of request attempt failed due to device disconnect
    // Emitted by: cloud
    // Triggered by: DEPLOYMENT_DELIVERY_FAILED
    DEPLOYMENT_DELIVERY_FAILURE = 4;
    // Cancellation removes the request from the list of
    // in-progress commands in the cloud, but does not
    // cancel the operation on the device. Emitted by cloud.
    // Triggered by: DEPLOYMENT_CANCELLATION_REQUESTED
    DEPLOYMENT_CANCELLATION_IN_PROGRESS = 5;
    // Command was successfully removed from set of in-progress
    // commands from the cloud. Emitted by cloud.
    // Triggered by: DEPLOYMENT_CANCELLATION_REQUEST_FULFILLED
    DEPLOYMENT_CANCELLED = 6;                      // cloud
    // Delivery attempt was not acknowledged by device
    // Emitted by: cloud
    // Triggered by: DEPLOYMENT_DELIVERY_TIMEOUT_EXCEEDED
    DEPLOYMENT_DELIVERY_TIMED_OUT = 7;             // cloud
    // Command expired before reaching a terminal state.
    // This event can be emitted by the device or the cloud.
    // In either case, it will cause the command to be removed
    // from the set of in-progress commands on the cloud.
    // However the cloud does not send this event to the device.
    // This state is terminal.
    // Emitted by: cloud or device
    // Triggered by: DEPLOYMENT_EXPIRATION_EXCEEDED
    DEPLOYMENT_EXPIRED = 30;
    // Request is acknowledged by device, queued, and the device may begin
    // downloading artifacts when it is ready to begin the deployment
    // process.
    // Emitted by: device
    // Triggered by: DEPLOYMENT_QUEUED_ON_DEVICE
    ARTIFACT_RETRIEVAL_QUEUED = 60;
    // Device has begun actively downloading artifacts from cloud
    // Emitted by: device
    // Triggered by: ARTIFACT_RETRIEVAL_STARTED
    ARTIFACT_RETRIEVAL_IN_PROGRESS = 61;
    // Device encountered an error downlaoding artifacts. It may either re-try at
    // its discretion or transition into a terminal failure.
    // Emitted by: device
    // Triggered by:  ARTIFACT_RETRIEVAL_FAILED
    ARTIFACT_RETRIEVAL_FAILURE = 62;
    // Artifact retrieval is successful, and the device has queued installation
    // to begin at its discretion.
    // Emitted by: device
    // Triggered by: ARTIFACT_RETRIVAL_SUCCEDED
    INSTALLATION_QUEUED = 63;
    // Device has begin installation of artifacts
    // Emitted by: device
    // Triggered by: INSTALLER_STARTED_ON_DEVICE
    INSTALLATION_IN_PROGRESS = 64;
    // Installation failed. The device may retry or tansition into a terminal failed state
    // Emitted by: device
    // Triggered by: INSTALLER_FAILED_ON_DEVICE
    INSTALLATION_FAILURE = 65;
    // Post-installation tasks are in-progress. This state covers any work that may be needed
    // after installation, before final success or failure
    // Emitted by: device
    // Triggered by: DEPLOYMENT_STARTED_ON_DEVICE
    DEPLOYMENT_IN_PROGRESS = 66;
    // Deployment was successful on device. This state is terminal.
    // Emitted by: device
    // Triggered by: DEPLOYMENT_SUCCEEDED_ON_DEVICE
    DEPLOYMENT_SUCCEEDED = 67;
    // Deployment failed. This state is reachable from all intermediate failed states, if the
    // device determines that the failure is non-recoverable. This state is terminal.
    // Emitted by: device
    // Triggered by: DEPLOYMENT_FAILED_ON_DEVICE
    DEPLOYMENT_FAILURE = 68;
}

// DEPRECATED: Those well-Known trigger field values in StateTransition events
// See WellKnownDeploymentState enum for information as to when these triggers are used
enum WellKnownDeploymentTransitionTrigger {
    UNKNOWN_DEPLOYMENT_TRIGGER = 0;
    DEPLOYMENT_QUEUED_FOR_DELIVERY = 1;           // cloud
    DEVICE_CONNECTED_TO_CLOUD = 2;                // cloud
    DEPLOYMENT_DELIVERY_FAILED = 3;               // cloud
    DEPLOYMENT_CANCELLATION_REQUESTED = 4;        // cloud
    DEPLOYMENT_CANCELLATION_REQUEST_FULFILLED = 5;// cloud
    DEPLOYMENT_DELIVERY_TIMEOUT_EXCEEDED = 6;     // cloud
    DEPLOYMENT_EXPIRATION_EXCEEDED = 30;          // cloud or device
    DEPLOYMENT_QUEUED_ON_DEVICE = 60;             // device
    DEPLOYMENT_STARTED_ON_DEVICE = 61;            // device
    DEPLOYMENT_SUCCEEDED_ON_DEVICE = 62;          // device
    DEPLOYMENT_FAILED_ON_DEVICE = 63;             // device
    INSTALLER_STARTED_ON_DEVICE = 64;             // device
    INSTALLER_FAILED_ON_DEVICE = 65;              // device
    ARTIFACT_RETRIEVAL_STARTED = 80;              // device
    ARTIFACT_RETRIEVAL_SUCCEEDED = 81;            // device
    ARTIFACT_RETRIEVAL_FAILED = 82;               // device
}
