/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2020 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autonomic/ext/event/geofence.proto

package event

import (
	fmt "fmt"
	telemetry "xk6-fabric/proto/autonomic/ext/telemetry"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Geofence struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid string `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are valid to be assigned to Shape:
	//	*Geofence_Polygon
	//	*Geofence_Circle
	//	*Geofence_BoundaryBox
	Shape                isGeofence_Shape  `protobuf_oneof:"shape"`
	Tags                 map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Geofence) Reset()         { *m = Geofence{} }
func (m *Geofence) String() string { return proto.CompactTextString(m) }
func (*Geofence) ProtoMessage()    {}
func (*Geofence) Descriptor() ([]byte, []int) {
	return fileDescriptor_07af454b0d366f58, []int{0}
}

func (m *Geofence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Geofence.Unmarshal(m, b)
}
func (m *Geofence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Geofence.Marshal(b, m, deterministic)
}
func (m *Geofence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Geofence.Merge(m, src)
}
func (m *Geofence) XXX_Size() int {
	return xxx_messageInfo_Geofence.Size(m)
}
func (m *Geofence) XXX_DiscardUnknown() {
	xxx_messageInfo_Geofence.DiscardUnknown(m)
}

var xxx_messageInfo_Geofence proto.InternalMessageInfo

func (m *Geofence) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Geofence) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type isGeofence_Shape interface {
	isGeofence_Shape()
}

type Geofence_Polygon struct {
	Polygon *Polygon `protobuf:"bytes,2,opt,name=polygon,proto3,oneof"`
}

type Geofence_Circle struct {
	Circle *Circle `protobuf:"bytes,3,opt,name=circle,proto3,oneof"`
}

type Geofence_BoundaryBox struct {
	BoundaryBox *BoundaryBox `protobuf:"bytes,4,opt,name=boundary_box,json=boundaryBox,proto3,oneof"`
}

func (*Geofence_Polygon) isGeofence_Shape() {}

func (*Geofence_Circle) isGeofence_Shape() {}

func (*Geofence_BoundaryBox) isGeofence_Shape() {}

func (m *Geofence) GetShape() isGeofence_Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *Geofence) GetPolygon() *Polygon {
	if x, ok := m.GetShape().(*Geofence_Polygon); ok {
		return x.Polygon
	}
	return nil
}

func (m *Geofence) GetCircle() *Circle {
	if x, ok := m.GetShape().(*Geofence_Circle); ok {
		return x.Circle
	}
	return nil
}

func (m *Geofence) GetBoundaryBox() *BoundaryBox {
	if x, ok := m.GetShape().(*Geofence_BoundaryBox); ok {
		return x.BoundaryBox
	}
	return nil
}

func (m *Geofence) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Geofence) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Geofence_Polygon)(nil),
		(*Geofence_Circle)(nil),
		(*Geofence_BoundaryBox)(nil),
	}
}

type Polygon struct {
	// vertices of the polygon in the counter clockwise order
	Points               []*telemetry.Point `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Polygon) Reset()         { *m = Polygon{} }
func (m *Polygon) String() string { return proto.CompactTextString(m) }
func (*Polygon) ProtoMessage()    {}
func (*Polygon) Descriptor() ([]byte, []int) {
	return fileDescriptor_07af454b0d366f58, []int{1}
}

func (m *Polygon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Polygon.Unmarshal(m, b)
}
func (m *Polygon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Polygon.Marshal(b, m, deterministic)
}
func (m *Polygon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Polygon.Merge(m, src)
}
func (m *Polygon) XXX_Size() int {
	return xxx_messageInfo_Polygon.Size(m)
}
func (m *Polygon) XXX_DiscardUnknown() {
	xxx_messageInfo_Polygon.DiscardUnknown(m)
}

var xxx_messageInfo_Polygon proto.InternalMessageInfo

func (m *Polygon) GetPoints() []*telemetry.Point {
	if m != nil {
		return m.Points
	}
	return nil
}

type Circle struct {
	Center               *telemetry.Point `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	Radius               float64          `protobuf:"fixed64,2,opt,name=radius,proto3" json:"radius,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Circle) Reset()         { *m = Circle{} }
func (m *Circle) String() string { return proto.CompactTextString(m) }
func (*Circle) ProtoMessage()    {}
func (*Circle) Descriptor() ([]byte, []int) {
	return fileDescriptor_07af454b0d366f58, []int{2}
}

func (m *Circle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Circle.Unmarshal(m, b)
}
func (m *Circle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Circle.Marshal(b, m, deterministic)
}
func (m *Circle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Circle.Merge(m, src)
}
func (m *Circle) XXX_Size() int {
	return xxx_messageInfo_Circle.Size(m)
}
func (m *Circle) XXX_DiscardUnknown() {
	xxx_messageInfo_Circle.DiscardUnknown(m)
}

var xxx_messageInfo_Circle proto.InternalMessageInfo

func (m *Circle) GetCenter() *telemetry.Point {
	if m != nil {
		return m.Center
	}
	return nil
}

func (m *Circle) GetRadius() float64 {
	if m != nil {
		return m.Radius
	}
	return 0
}

type BoundaryBox struct {
	NorthWest            *telemetry.Point `protobuf:"bytes,1,opt,name=north_west,json=northWest,proto3" json:"north_west,omitempty"`
	SouthEast            *telemetry.Point `protobuf:"bytes,2,opt,name=south_east,json=southEast,proto3" json:"south_east,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BoundaryBox) Reset()         { *m = BoundaryBox{} }
func (m *BoundaryBox) String() string { return proto.CompactTextString(m) }
func (*BoundaryBox) ProtoMessage()    {}
func (*BoundaryBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_07af454b0d366f58, []int{3}
}

func (m *BoundaryBox) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoundaryBox.Unmarshal(m, b)
}
func (m *BoundaryBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoundaryBox.Marshal(b, m, deterministic)
}
func (m *BoundaryBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoundaryBox.Merge(m, src)
}
func (m *BoundaryBox) XXX_Size() int {
	return xxx_messageInfo_BoundaryBox.Size(m)
}
func (m *BoundaryBox) XXX_DiscardUnknown() {
	xxx_messageInfo_BoundaryBox.DiscardUnknown(m)
}

var xxx_messageInfo_BoundaryBox proto.InternalMessageInfo

func (m *BoundaryBox) GetNorthWest() *telemetry.Point {
	if m != nil {
		return m.NorthWest
	}
	return nil
}

func (m *BoundaryBox) GetSouthEast() *telemetry.Point {
	if m != nil {
		return m.SouthEast
	}
	return nil
}

func init() {
	proto.RegisterType((*Geofence)(nil), "autonomic.ext.event.Geofence")
	proto.RegisterMapType((map[string]string)(nil), "autonomic.ext.event.Geofence.TagsEntry")
	proto.RegisterType((*Polygon)(nil), "autonomic.ext.event.Polygon")
	proto.RegisterType((*Circle)(nil), "autonomic.ext.event.Circle")
	proto.RegisterType((*BoundaryBox)(nil), "autonomic.ext.event.BoundaryBox")
}

func init() { proto.RegisterFile("autonomic/ext/event/geofence.proto", fileDescriptor_07af454b0d366f58) }

var fileDescriptor_07af454b0d366f58 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcd, 0xaa, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0xfd, 0x48, 0xed, 0x54, 0x41, 0x46, 0xd1, 0x70, 0x15, 0x29, 0x59, 0x68, 0x37,
	0x37, 0x81, 0x2b, 0xea, 0x45, 0x71, 0x71, 0x23, 0xc5, 0xe2, 0xaa, 0x84, 0x2b, 0x8a, 0x9b, 0x32,
	0x49, 0x8f, 0xe9, 0x60, 0x32, 0x13, 0x66, 0x4e, 0xae, 0xcd, 0xca, 0x07, 0xf0, 0x2d, 0x7c, 0x3b,
	0xdf, 0xc0, 0xa5, 0x64, 0x92, 0xd6, 0x0f, 0x02, 0xb7, 0xbb, 0x39, 0xc3, 0xef, 0x37, 0x39, 0xfc,
	0xcf, 0x09, 0xf5, 0x78, 0x89, 0x4a, 0xaa, 0x5c, 0x24, 0x01, 0xec, 0x30, 0x80, 0x2b, 0x90, 0x18,
	0xa4, 0xa0, 0x3e, 0x83, 0x4c, 0xc0, 0x2f, 0xb4, 0x42, 0xc5, 0xee, 0x1c, 0x18, 0x1f, 0x76, 0xe8,
	0x5b, 0xe6, 0xe4, 0xf1, 0xbf, 0x22, 0x42, 0x06, 0x39, 0xa0, 0xae, 0x82, 0x42, 0x19, 0x81, 0x42,
	0xc9, 0x46, 0xf6, 0x7e, 0xf6, 0xe9, 0x8d, 0xb7, 0xed, 0x7b, 0x8c, 0xd1, 0xa1, 0xe4, 0x39, 0xb8,
	0x64, 0x46, 0xe6, 0x93, 0xc8, 0x9e, 0xeb, 0xbb, 0xb2, 0x14, 0x1b, 0x77, 0xd4, 0xdc, 0xd5, 0x67,
	0x76, 0x4e, 0xc7, 0x85, 0xca, 0xaa, 0x54, 0x49, 0xb7, 0x3f, 0x23, 0xf3, 0xe9, 0xd9, 0x43, 0xbf,
	0xa3, 0x07, 0x7f, 0xd5, 0x30, 0xcb, 0x5e, 0xb4, 0xc7, 0xd9, 0x33, 0xea, 0x24, 0x42, 0x27, 0x19,
	0xb8, 0x03, 0x2b, 0x3e, 0xe8, 0x14, 0xdf, 0x58, 0x64, 0xd9, 0x8b, 0x5a, 0x98, 0x2d, 0xe8, 0xcd,
	0x58, 0x95, 0x72, 0xc3, 0x75, 0xb5, 0x8e, 0xd5, 0xce, 0x1d, 0x5a, 0x79, 0xd6, 0x29, 0x87, 0x2d,
	0x18, 0xaa, 0xdd, 0xb2, 0x17, 0x4d, 0xe3, 0x3f, 0x25, 0x7b, 0x45, 0x87, 0xc8, 0x53, 0xe3, 0x3a,
	0xb3, 0xc1, 0x7c, 0x7a, 0xf6, 0xa4, 0x53, 0xdf, 0x87, 0xe1, 0x5f, 0xf2, 0xd4, 0x2c, 0x24, 0xea,
	0x2a, 0xb2, 0xd2, 0xc9, 0x0b, 0x3a, 0x39, 0x5c, 0xb1, 0xdb, 0x74, 0xf0, 0x05, 0xaa, 0x36, 0xa8,
	0xfa, 0xc8, 0xee, 0xd2, 0xd1, 0x15, 0xcf, 0x4a, 0xb0, 0x89, 0x4c, 0xa2, 0xa6, 0x78, 0xd9, 0x3f,
	0x27, 0xe1, 0x98, 0x8e, 0xcc, 0x96, 0x17, 0xe0, 0x5d, 0xd0, 0x71, 0x1b, 0x09, 0x7b, 0x4e, 0x9d,
	0x42, 0x09, 0x89, 0xc6, 0x25, 0xb6, 0x97, 0x47, 0xff, 0xf5, 0x72, 0x98, 0x97, 0xbf, 0xaa, 0xb1,
	0xa8, 0xa5, 0xbd, 0x8f, 0xd4, 0x69, 0xc2, 0xa9, 0x5f, 0x48, 0x40, 0x22, 0x68, 0xdb, 0xc4, 0x11,
	0x2f, 0x34, 0x34, 0xbb, 0x47, 0x1d, 0xcd, 0x37, 0xa2, 0x34, 0xb6, 0x51, 0x12, 0xb5, 0x95, 0xf7,
	0x9d, 0xd0, 0xe9, 0x5f, 0xd1, 0xb1, 0xd7, 0x94, 0x4a, 0xa5, 0x71, 0xbb, 0xfe, 0x0a, 0x06, 0x8f,
	0xfc, 0xc6, 0xc4, 0x1a, 0x1f, 0xc0, 0x60, 0xad, 0x1b, 0x55, 0xe2, 0x76, 0x0d, 0xdc, 0x60, 0xbb,
	0x25, 0xd7, 0xea, 0xd6, 0x58, 0x70, 0x83, 0xe1, 0x37, 0x7a, 0x3f, 0x51, 0x79, 0xd7, 0x80, 0xc2,
	0x5b, 0xfb, 0x09, 0xad, 0xea, 0x05, 0x5e, 0x91, 0x4f, 0xef, 0x52, 0x81, 0xdb, 0x32, 0xf6, 0x13,
	0x95, 0x07, 0x07, 0xe1, 0x94, 0x8b, 0x7a, 0xf1, 0x41, 0x4b, 0x9e, 0x9d, 0xda, 0x55, 0x37, 0x81,
	0xd1, 0x49, 0x90, 0x73, 0x21, 0x03, 0x5b, 0x07, 0x1d, 0xbf, 0xd6, 0x2f, 0x42, 0x7e, 0xf4, 0x07,
	0x17, 0xef, 0x2f, 0x63, 0xc7, 0x32, 0x4f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x88, 0x02, 0xd5,
	0x63, 0x81, 0x03, 0x00, 0x00,
}
