/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2018 - 2020 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */

syntax = "proto3";

package autonomic.ext.event.state.commandpreclusionstate;

option go_package = "xk6-fabric/proto/autonomic/ext/event/state";
option java_package = "com.autonomic.ext.event.state.commandpreclusionstate";
option java_outer_classname = "WellKnownCommandPreclusionStateProto";
option java_multiple_files = true;

option cc_enable_arenas = true;

option objc_class_prefix = "AUT";

// These states are emitted by the cloud, and represents the overall state of whether or not a device is precluded from
// receiving/processing commands.
enum WellKnownCommandPreclusionState {
    UNKNOWN_STATE = 0;

    // The device is able to receive/process commands from the cloud
    // Emitted by: cloud
    // Triggered by: ALL_PRECLUSIONS_RESOLVED
    COMMANDS_PERMITTED = 1;

    // The device is unable to receive/process commands from the cloud
    // Emitted by: cloud
    // Triggered by: NEW_PRECLUSION_INITIATED, SINGLE_PRECLUSION_RESOLVED
    COMMANDS_PRECLUDED = 2;
}

// These triggers are emitted by the cloud, and indicate that the cloud has identified when there are no remaining
// causes of preclusion, or when a new active preclusion has been identified
enum WellKnownCommandPreclusionStateTransitionTrigger {
    UNKNOWN_TRANSITION = 0;

    ALL_PRECLUSIONS_RESOLVED = 10;
    NEW_PRECLUSION_INTRODUCED = 11;
    SINGLE_PRECLUSION_RESOLVED = 12;
}

// This data informs consumers of preclusion causes which are active
message CommandPreclusionData {
    WellKnownFirmwareUpgradeCommandPreclusionState firmware_upgrade_preclusion_state = 1;
    WellKnownDeepSleepCommandPreclusionState deep_sleep_preclusion_state = 2;
    WellKnownCarrierRegistrationCommandPreclusionState carrier_registration_preclusion_state = 3;
    WellKnownTemperatureThresholdCommandPreclusionState temperature_threshold_preclusion_state = 4;
    WellKnownRegulatoryCommandPreclusionState regulatory_preclusion_state = 5;
}


// These states are emitted by devices to notify the cloud as to whether or not commands to a device are precluded due
// to a firmware update
enum WellKnownFirmwareUpgradeCommandPreclusionState {
    UNKNOWN_FIRMWARE_UPDATE_COMMAND_PRECLUSION_STATE = 0;

    // A firmware upgrade is not blocking the device from receiving/processing commands from the cloud
    // This could mean that there is no active firmware upgrade, or if there is one, commands can still be serviced
    // while the upgrade is ongoing.
    // Emitted by: device
    // Triggered by: MODULE_FIRMWARE_UPDATE_ENDED
    COMMANDS_NOT_PRECLUDED_BY_FIRMWARE_UPDATE = 1;

    // A firmware upgrade is blocking the device from receiving/processing commands from the cloud
    // Emitted by: device
    // Triggered by: MODULE_FIRMWARE_UPDATE_STARTED
    COMMANDS_PRECLUDED_BY_FIRMWARE_UPDATE = 2;
}

enum WellKnownFirmwareUpgradeCommandPreclusionStateTransitionTrigger {
    UNKNOWN_FIRMWARE_UPDATE_COMMAND_PRECLUSION_TRANSITION = 0;

    MODULE_FIRMWARE_UPDATE_STARTED = 1;             // device
    MODULE_FIRMWARE_UPDATE_ENDED = 2;               // device
}


// These states are emitted by devices to notify the cloud as to whether or not commands to a device are precluded due
// to a the device operating in a deep sleep low power mode
enum WellKnownDeepSleepCommandPreclusionState {
    UNKNOWN_DEEP_SLEEP_COMMAND_PRECLUSION_STATE = 0;

    // The device is not in a deep sleep low power mode, and can receive/process commands from the cloud if there are
    // no other causes of preclusion
    // Emitted by: device
    // Triggered by: DEVICE_EXITING_DEEP_SLEEP
    COMMANDS_NOT_PRECLUDED_BY_DEEP_SLEEP = 1;

    // The device is in deep sleep low power mode, and will not receive/process commands from the cloud
    // Emitted by: device
    // Triggered by: DEVICE_ENTERING_DEEP_SLEEP
    COMMANDS_PRECLUDED_BY_DEEP_SLEEP = 2;
}

enum WellKnownDeepSleepCommandPreclusionStateTransitionTrigger {
    UNKNOWN_DEEP_SLEEP_COMMAND_PRECLUSION_TRANSITION = 0;

    DEVICE_ENTERING_DEEP_SLEEP = 1;                 // device
    DEVICE_EXITING_DEEP_SLEEP = 2;                  // device
}


// These states are emitted by an application to notify the cloud as to whether or not commands to a device are
// precluded due to the device being deregistered from a network carrier
enum WellKnownCarrierRegistrationCommandPreclusionState {
    UNKNOWN_CARRIER_REGISTRATION_COMMAND_PRECLUSION_STATE = 0;

    // The device is actively registered with a mobile carrier, and can receive/process commands from the cloud if there
    // are no other causes of preclusion
    // Emitted by: application
    // Triggered by: DEVICE_REGISTERED_WITH_CARRIER
    COMMANDS_NOT_PRECLUDED_BY_CARRIER_REGISTRATION = 1;

    // The lack of an active carrier registration is blocking the device from receiving/processing commands from the
    // cloud
    // Emitted by: application
    // Triggered by: DEVICE_DEREGISTERED_FROM_CARRIER
    COMMANDS_PRECLUDED_BY_CARRIER_REGISTRATION = 2;
}

enum WellKnownCarrierRegistrationCommandPreclusionStateTransitionTrigger {
    UNKNOWN_CARRIER_REGISTRATION_COMMAND_PRECLUSION_TRANSITION = 0;

    DEVICE_DEREGISTERED_FROM_CARRIER = 1;           // application
    DEVICE_REGISTERED_WITH_CARRIER = 2;             // application
}


// These states are emitted by devices to notify the cloud as to whether or not commands to a device are precluded due
// to the device reaching temperatures that exceed a threshold for safe operation
enum WellKnownTemperatureThresholdCommandPreclusionState {
        UNKNOWN_TEMPERATURE_THRESHOLD_COMMAND_PRECLUSION_STATE = 0;

    // The device is operating within safe temperature thresholds, and thus the device can receive/process commands from
    // the cloud if there are no other causes of preclusion
    // Emitted by: device
    // Triggered by: DEVICE_TEMPERATURE_THRESHOLD_OPERABLE
    COMMANDS_NOT_PRECLUDED_BY_TEMPERATURE_THRESHOLD = 1;

    // The device is operating outside safe temperature thresholds, blocking the device from receiving/processing
    // commands from the cloud.
    // Emitted by: device
    // Triggered by: DEVICE_TEMPERATURE_THRESHOLD_EXCEEDED
    COMMANDS_PRECLUDED_BY_TEMPERATURE_THRESHOLD = 2;
}

enum WellKnownTemperatureThresholdCommandPreclusionStateTransitionTrigger {
    UNKNOWN_TEMPERATURE_THRESHOLD_COMMAND_PRECLUSION_TRANSITION = 0;

    DEVICE_TEMPERATURE_THRESHOLD_EXCEEDED = 1;      // device
    DEVICE_TEMPERATURE_THRESHOLD_OPERABLE = 2;      // device
}


// These states are emitted by an application to notify the cloud as to whether or not commands to a device are
// precluded due to a regulatory requirement
enum WellKnownRegulatoryCommandPreclusionState {
    UNKNOWN_REGULATORY_COMMAND_PRECLUSION_STATE = 0;

    // Regulatory compliance preventing this device from receiving/processing commands from the cloud have cleared.
    // Emitted by: application
    // Triggered by: REGULATORY_PRECLUSION_DEACTIVATED
    COMMANDS_NOT_PRECLUDED_BY_REGULATORY = 1;

    // Regulatory compliance is preventing this device from receiving/processing commands from the cloud.
    // Emitted by: application
    // Triggered by: REGULATORY_PRECLUSION_ACTIVATED
    COMMANDS_PRECLUDED_BY_REGULATORY = 2;
}

enum WellKnownRegulatoryCommandPreclusionStateTransitionTrigger {
    UNKNOWN_REGULATORY_COMMAND_PRECLUSION_TRANSITION = 0;

    REGULATORY_PRECLUSION_ACTIVATED = 1;        // application
    REGULATORY_PRECLUSION_DEACTIVATED = 2;      // application
}
