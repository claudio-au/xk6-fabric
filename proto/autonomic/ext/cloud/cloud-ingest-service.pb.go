/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2020 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autonomic/ext/cloud/cloud-ingest-service.proto

package cloud

import (
	context "context"
	fmt "fmt"
	event "xk6-fabric/proto/autonomic/ext/event"
	telemetry "xk6-fabric/proto/autonomic/ext/telemetry"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
// PublishStatus is attached to each PublishNote indicating whether
// the note is an error, or confirmation that something succeeded.
//
// This status list may be expanded in the future; we recommend
// that client code be prepared to see GRPC "UNRECOGNIZED" values
// in this field (and to avoid calling .getNumber on those).
type PublishStatus int32

const (
	PublishStatus_UNKNOWN PublishStatus = 0
	PublishStatus_ERROR   PublishStatus = 1
	PublishStatus_SUCCESS PublishStatus = 2
)

var PublishStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "ERROR",
	2: "SUCCESS",
}

var PublishStatus_value = map[string]int32{
	"UNKNOWN": 0,
	"ERROR":   1,
	"SUCCESS": 2,
}

func (x PublishStatus) String() string {
	return proto.EnumName(PublishStatus_name, int32(x))
}

func (PublishStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_314a97647a704f38, []int{0}
}

// The DataClassification enum is reserved for internal use.
type DataClassification int32

const (
	DataClassification_UNMODIFIED DataClassification = 0
	DataClassification_TELEMETRY  DataClassification = 1
	DataClassification_COMMAND    DataClassification = 2
	DataClassification_DIAGNOSTIC DataClassification = 999
)

var DataClassification_name = map[int32]string{
	0:   "UNMODIFIED",
	1:   "TELEMETRY",
	2:   "COMMAND",
	999: "DIAGNOSTIC",
}

var DataClassification_value = map[string]int32{
	"UNMODIFIED": 0,
	"TELEMETRY":  1,
	"COMMAND":    2,
	"DIAGNOSTIC": 999,
}

func (x DataClassification) String() string {
	return proto.EnumName(DataClassification_name, int32(x))
}

func (DataClassification) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_314a97647a704f38, []int{1}
}

//
// Publish Request Batches contain a batch of data to be ingested into
// the TMC, prepackaged as a collection of KeyedPublishRequests. It also
// carries an optional ACK token, to be returned when batch processing
// has been completed.
//
// Messages with most (or all!) fields left empty can be sent, to enable
// active in-band keepalive implementations when appropriate.
type PublishRequestBatch struct {
	//
	// The "batch" field contains collections of messages to be ingested
	// into TMC. See "KeyedPublishRequest" for details. Can be empty.
	Batch []*KeyedPublishRequest `protobuf:"bytes,1,rep,name=batch,proto3" json:"batch,omitempty"`
	//
	// The "ack_token" field can be set by the caller to any non-empty
	// collection of bytes, which will be returned via the response
	// channel after all data from the batch (and prior batches) has
	// been ingested (or rejected by sanity checks).
	AckToken []byte `protobuf:"bytes,2,opt,name=ack_token,json=ackToken,proto3" json:"ack_token,omitempty"`
	//
	// The "group_id" field is used while establishing the connection
	// to indicate an TMC Asset Group, containing all the devices that
	// the client wants to reference.
	//
	// This is the permission system. The client credentials must have
	// permission to ingest data for this named group, and this allows
	// the client to send messages using any device in the group as
	// the "device_id" for the message.
	//
	// Clients should send their group when initiating the connection,
	// along with an ACK token, then wait for the ACK token to be returned
	// before sending any data. Clients are cautioned that this operation
	// may take a number of seconds for large groups.
	//
	// Clients should *NOT* send any data in this field once they have
	// started sending batches of data.
	GroupId []string `protobuf:"bytes,3,rep,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The "data_class" field is reserved for internal use.
	DataClass            DataClassification `protobuf:"varint,4,opt,name=data_class,json=dataClass,proto3,enum=autonomic.cloudingest.DataClassification" json:"data_class,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PublishRequestBatch) Reset()         { *m = PublishRequestBatch{} }
func (m *PublishRequestBatch) String() string { return proto.CompactTextString(m) }
func (*PublishRequestBatch) ProtoMessage()    {}
func (*PublishRequestBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_314a97647a704f38, []int{0}
}

func (m *PublishRequestBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequestBatch.Unmarshal(m, b)
}
func (m *PublishRequestBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequestBatch.Marshal(b, m, deterministic)
}
func (m *PublishRequestBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequestBatch.Merge(m, src)
}
func (m *PublishRequestBatch) XXX_Size() int {
	return xxx_messageInfo_PublishRequestBatch.Size(m)
}
func (m *PublishRequestBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequestBatch.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequestBatch proto.InternalMessageInfo

func (m *PublishRequestBatch) GetBatch() []*KeyedPublishRequest {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *PublishRequestBatch) GetAckToken() []byte {
	if m != nil {
		return m.AckToken
	}
	return nil
}

func (m *PublishRequestBatch) GetGroupId() []string {
	if m != nil {
		return m.GroupId
	}
	return nil
}

func (m *PublishRequestBatch) GetDataClass() DataClassification {
	if m != nil {
		return m.DataClass
	}
	return DataClassification_UNMODIFIED
}

//
// The "KeyedPublishRequest" message provides, for one specific Device ID,
// a collection of data items related to that device, to be ingested into
// the TMC.
type KeyedPublishRequest struct {
	//
	// The "device_id" field contains the full AUI form of the Device ID
	// as provided by TMC during device onboarding, for the device that
	// is associated with the data being transported by this message.
	//
	// The value presented here must indicate a device that is a member
	// of the group specified in "group_id" above during start-up.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	//
	// The "publish_request" field contains a collection of messages
	// intended to be ingested into TMC, relating to the device_id.
	PublishRequest []*CloudIngestPublishRequest `protobuf:"bytes,2,rep,name=publish_request,json=publishRequest,proto3" json:"publish_request,omitempty"`
	// The "trace_span" field is reserved for future use.
	TraceSpan            map[string]string `protobuf:"bytes,3,rep,name=trace_span,json=traceSpan,proto3" json:"trace_span,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *KeyedPublishRequest) Reset()         { *m = KeyedPublishRequest{} }
func (m *KeyedPublishRequest) String() string { return proto.CompactTextString(m) }
func (*KeyedPublishRequest) ProtoMessage()    {}
func (*KeyedPublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_314a97647a704f38, []int{1}
}

func (m *KeyedPublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyedPublishRequest.Unmarshal(m, b)
}
func (m *KeyedPublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyedPublishRequest.Marshal(b, m, deterministic)
}
func (m *KeyedPublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyedPublishRequest.Merge(m, src)
}
func (m *KeyedPublishRequest) XXX_Size() int {
	return xxx_messageInfo_KeyedPublishRequest.Size(m)
}
func (m *KeyedPublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyedPublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyedPublishRequest proto.InternalMessageInfo

func (m *KeyedPublishRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *KeyedPublishRequest) GetPublishRequest() []*CloudIngestPublishRequest {
	if m != nil {
		return m.PublishRequest
	}
	return nil
}

func (m *KeyedPublishRequest) GetTraceSpan() map[string]string {
	if m != nil {
		return m.TraceSpan
	}
	return nil
}

//
// The "CloudIngestPublishRequest" message represents a collection
// of data elements to be ingested for a device specified separately.
//
// REVIEW NOTE: see separate Compatibility document in Redeef.
type CloudIngestPublishRequest struct {
	// TODO document timestamp semantics (per Edge Processor)
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//
	// This message contains collections of messages that will become Data
	// Elements within the TMC. Currently, Cloud Ingest allows ingestion of
	// Events, Reports, and Command Requests.
	Events               []*event.Event      `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	Reports              []*telemetry.Report `protobuf:"bytes,3,rep,name=reports,proto3" json:"reports,omitempty"`
	CommandRequests      []*CommandRequest   `protobuf:"bytes,4,rep,name=commandRequests,proto3" json:"commandRequests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CloudIngestPublishRequest) Reset()         { *m = CloudIngestPublishRequest{} }
func (m *CloudIngestPublishRequest) String() string { return proto.CompactTextString(m) }
func (*CloudIngestPublishRequest) ProtoMessage()    {}
func (*CloudIngestPublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_314a97647a704f38, []int{2}
}

func (m *CloudIngestPublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudIngestPublishRequest.Unmarshal(m, b)
}
func (m *CloudIngestPublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudIngestPublishRequest.Marshal(b, m, deterministic)
}
func (m *CloudIngestPublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudIngestPublishRequest.Merge(m, src)
}
func (m *CloudIngestPublishRequest) XXX_Size() int {
	return xxx_messageInfo_CloudIngestPublishRequest.Size(m)
}
func (m *CloudIngestPublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudIngestPublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloudIngestPublishRequest proto.InternalMessageInfo

func (m *CloudIngestPublishRequest) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *CloudIngestPublishRequest) GetEvents() []*event.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *CloudIngestPublishRequest) GetReports() []*telemetry.Report {
	if m != nil {
		return m.Reports
	}
	return nil
}

func (m *CloudIngestPublishRequest) GetCommandRequests() []*CommandRequest {
	if m != nil {
		return m.CommandRequests
	}
	return nil
}

//
// If the ACK token in a request batch is not empty, or if there are
// any response notes generated by the batch, the Publish Response
// will be returned to the caller after all state related to the batch
// has been committed to storage within the cloud.
//
// The service may send PublishResponse messages with all fields
// empty, to enable active in-band keepalive implementations when that
// is appropriate.
type PublishResponse struct {
	//
	// Responses may contain several independent notes.
	Notes []*PublishNote `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
	//
	// If an "ack_token" was provided in a PublishRequestBatch, it will
	// be returned in this field, after all data provided in the batch
	// and in all previous batches has been processed.
	AckToken             []byte   `protobuf:"bytes,2,opt,name=ack_token,json=ackToken,proto3" json:"ack_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_314a97647a704f38, []int{3}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetNotes() []*PublishNote {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *PublishResponse) GetAckToken() []byte {
	if m != nil {
		return m.AckToken
	}
	return nil
}

//
// The PublishNote message is used to provide confirmation messages
// for certain important transitions, and information about certain
// kinds of failures.
//
// Client software should log any ERROR notes and bring them to the
// attention of a human for corrective action. Such notes generally
// will be followed shortly by termination of the stream; reconnecting
// is likely to simply trigger the same ERROR until an action is
// taken to clear the described condition.
//
// It is recommended that Client software log all SUCCESS notes for
// future reference, especially useful when there is a subsequent
// ERROR note later in the same stream.
//
// It is notable that the initial SUCCESS notes will include
// information on which server was contacted, what version of the
// service is running, and confirmation of initial permissions; this
// data will be needed in any problem resolution interaction.
//
// Logging of start-up messages is like keeping your receipt when you
// purchase expensive equipment: it comes in handy if you need support ;)
type PublishNote struct {
	//
	// The "note" field contains a human-readable string, intended for
	// logging and display.
	//
	// Human readable notes are meant to stand on their own, providing
	// explicit annotation of what was wrong in a way that indicates what
	// to do to fix the problem. Please let us know if any messages lack
	// clarity, so they can be refined.
	Note string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	//
	// Indicate whether this message indicates an ERROR of some kind,
	// or is a confirmation of SUCCESS of an important step.
	Status               PublishStatus `protobuf:"varint,2,opt,name=status,proto3,enum=autonomic.cloudingest.PublishStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PublishNote) Reset()         { *m = PublishNote{} }
func (m *PublishNote) String() string { return proto.CompactTextString(m) }
func (*PublishNote) ProtoMessage()    {}
func (*PublishNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_314a97647a704f38, []int{4}
}

func (m *PublishNote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishNote.Unmarshal(m, b)
}
func (m *PublishNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishNote.Marshal(b, m, deterministic)
}
func (m *PublishNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishNote.Merge(m, src)
}
func (m *PublishNote) XXX_Size() int {
	return xxx_messageInfo_PublishNote.Size(m)
}
func (m *PublishNote) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishNote.DiscardUnknown(m)
}

var xxx_messageInfo_PublishNote proto.InternalMessageInfo

func (m *PublishNote) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *PublishNote) GetStatus() PublishStatus {
	if m != nil {
		return m.Status
	}
	return PublishStatus_UNKNOWN
}

type CloudIngestPingRequest struct {
	//
	// Clients using "ping" merely to verify service liveness need not
	// fill in this field.
	//
	// While the "client_time" field is optional, it is highly recommended
	// that clients estimating latency or clock offsets provide a timestamp
	// here using the same clock that will be used to estimate the latency
	// when the reply is received.
	ClientTime           *timestamp.Timestamp `protobuf:"bytes,1,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CloudIngestPingRequest) Reset()         { *m = CloudIngestPingRequest{} }
func (m *CloudIngestPingRequest) String() string { return proto.CompactTextString(m) }
func (*CloudIngestPingRequest) ProtoMessage()    {}
func (*CloudIngestPingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_314a97647a704f38, []int{5}
}

func (m *CloudIngestPingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudIngestPingRequest.Unmarshal(m, b)
}
func (m *CloudIngestPingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudIngestPingRequest.Marshal(b, m, deterministic)
}
func (m *CloudIngestPingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudIngestPingRequest.Merge(m, src)
}
func (m *CloudIngestPingRequest) XXX_Size() int {
	return xxx_messageInfo_CloudIngestPingRequest.Size(m)
}
func (m *CloudIngestPingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudIngestPingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloudIngestPingRequest proto.InternalMessageInfo

func (m *CloudIngestPingRequest) GetClientTime() *timestamp.Timestamp {
	if m != nil {
		return m.ClientTime
	}
	return nil
}

type CloudIngestPingResponse struct {
	//
	// The "client_time" field is a direct duplicate of the client time
	// represented in the ping request. Note that if the client did not
	// provide a client time, the value present here will be the default
	// value per protobuf standards.
	ClientTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
	//
	// The "server_time" field represents the current wall-clock time
	// on the specific server handling this request.
	//
	// The primary use for this data is to estimate clock offsets between
	// the client and the server, based on knowing that the server clock
	// had this value at some instant between the two client times, and
	// it was probably somewhere near the midway point between them.
	//
	// Clients wishing to establish separate latency estimates for inbound
	// versus outbound traffic are reminded that their client clock, and
	// the clock on the service, will not be well synchronized; and they
	// should rely on the round-trip measurement using a singe clock on
	// their end to provide starting and ending times.
	ServerTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	//
	// The "greeting" message is intended to be human readable, and clients
	// should expect that the content might change from time to time. It
	// is intended to convey information sufficient to identify the specific
	// service handling the request, and which version of that service.
	Greeting             string   `protobuf:"bytes,3,opt,name=greeting,proto3" json:"greeting,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudIngestPingResponse) Reset()         { *m = CloudIngestPingResponse{} }
func (m *CloudIngestPingResponse) String() string { return proto.CompactTextString(m) }
func (*CloudIngestPingResponse) ProtoMessage()    {}
func (*CloudIngestPingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_314a97647a704f38, []int{6}
}

func (m *CloudIngestPingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudIngestPingResponse.Unmarshal(m, b)
}
func (m *CloudIngestPingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudIngestPingResponse.Marshal(b, m, deterministic)
}
func (m *CloudIngestPingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudIngestPingResponse.Merge(m, src)
}
func (m *CloudIngestPingResponse) XXX_Size() int {
	return xxx_messageInfo_CloudIngestPingResponse.Size(m)
}
func (m *CloudIngestPingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudIngestPingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloudIngestPingResponse proto.InternalMessageInfo

func (m *CloudIngestPingResponse) GetClientTime() *timestamp.Timestamp {
	if m != nil {
		return m.ClientTime
	}
	return nil
}

func (m *CloudIngestPingResponse) GetServerTime() *timestamp.Timestamp {
	if m != nil {
		return m.ServerTime
	}
	return nil
}

func (m *CloudIngestPingResponse) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

func init() {
	proto.RegisterEnum("autonomic.cloudingest.PublishStatus", PublishStatus_name, PublishStatus_value)
	proto.RegisterEnum("autonomic.cloudingest.DataClassification", DataClassification_name, DataClassification_value)
	proto.RegisterType((*PublishRequestBatch)(nil), "autonomic.cloudingest.PublishRequestBatch")
	proto.RegisterType((*KeyedPublishRequest)(nil), "autonomic.cloudingest.KeyedPublishRequest")
	proto.RegisterMapType((map[string]string)(nil), "autonomic.cloudingest.KeyedPublishRequest.TraceSpanEntry")
	proto.RegisterType((*CloudIngestPublishRequest)(nil), "autonomic.cloudingest.CloudIngestPublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "autonomic.cloudingest.PublishResponse")
	proto.RegisterType((*PublishNote)(nil), "autonomic.cloudingest.PublishNote")
	proto.RegisterType((*CloudIngestPingRequest)(nil), "autonomic.cloudingest.CloudIngestPingRequest")
	proto.RegisterType((*CloudIngestPingResponse)(nil), "autonomic.cloudingest.CloudIngestPingResponse")
}

func init() {
	proto.RegisterFile("autonomic/ext/cloud/cloud-ingest-service.proto", fileDescriptor_314a97647a704f38)
}

var fileDescriptor_314a97647a704f38 = []byte{
	// 861 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x41, 0x6f, 0x23, 0x35,
	0x14, 0xee, 0x4c, 0xda, 0xa6, 0xf3, 0xc2, 0xa6, 0x91, 0x17, 0xd8, 0x6c, 0x38, 0x34, 0x1a, 0xad,
	0x50, 0xb6, 0x28, 0x33, 0xab, 0xc0, 0xa1, 0x0b, 0x7b, 0xa0, 0x4d, 0x02, 0x84, 0xa5, 0x49, 0x71,
	0x12, 0xc1, 0x72, 0x89, 0x9c, 0x19, 0x6f, 0x3a, 0x6a, 0x62, 0x0f, 0x63, 0x4f, 0xb5, 0xfd, 0x19,
	0x9c, 0xb9, 0x21, 0x71, 0xe6, 0xf7, 0x70, 0xe5, 0xc2, 0x5f, 0xe0, 0x88, 0x6c, 0xcf, 0x64, 0x93,
	0xb6, 0xe9, 0x56, 0xda, 0xcb, 0xc8, 0xf6, 0x7c, 0xdf, 0xf3, 0xf3, 0xf7, 0xbd, 0x67, 0x83, 0x47,
	0x52, 0xc9, 0x19, 0x5f, 0x44, 0x81, 0x4f, 0xdf, 0x48, 0x3f, 0x98, 0xf3, 0x34, 0x34, 0xdf, 0x66,
	0xc4, 0x66, 0x54, 0xc8, 0xa6, 0xa0, 0xc9, 0x65, 0x14, 0x50, 0x2f, 0x4e, 0xb8, 0xe4, 0xe8, 0xa3,
	0x25, 0xde, 0xd3, 0x28, 0x03, 0xaa, 0x1d, 0xac, 0x87, 0xa1, 0x97, 0x94, 0x65, 0x5f, 0xc3, 0xab,
	0x3d, 0x59, 0x07, 0x48, 0x3a, 0xa7, 0x0b, 0x2a, 0x93, 0x2b, 0x3f, 0xa1, 0x31, 0x4f, 0x72, 0xd4,
	0xd3, 0x5b, 0xb3, 0xe1, 0x8b, 0x05, 0x61, 0xe1, 0x24, 0xa1, 0xbf, 0xa6, 0x54, 0xe4, 0xd0, 0x83,
	0x19, 0xe7, 0xb3, 0x39, 0xf5, 0xf5, 0x6c, 0x9a, 0xbe, 0xf6, 0x65, 0xb4, 0xa0, 0x42, 0x92, 0x45,
	0x6c, 0x00, 0xee, 0xdf, 0x16, 0x3c, 0x3c, 0x4b, 0xa7, 0xf3, 0x48, 0x9c, 0x63, 0xc3, 0x3c, 0x21,
	0x32, 0x38, 0x47, 0x5f, 0xc3, 0xce, 0x54, 0x0d, 0xaa, 0x56, 0xbd, 0xd0, 0x28, 0xb5, 0x0e, 0xbd,
	0x5b, 0x4f, 0xe4, 0xbd, 0xa4, 0x57, 0x34, 0x5c, 0xe7, 0x63, 0x43, 0x44, 0x9f, 0x80, 0x43, 0x82,
	0x8b, 0x89, 0xe4, 0x17, 0x94, 0x55, 0xed, 0xba, 0xd5, 0xf8, 0x00, 0xef, 0x91, 0xe0, 0x62, 0xa4,
	0xe6, 0xe8, 0x31, 0xec, 0xcd, 0x12, 0x9e, 0xc6, 0x93, 0x28, 0xac, 0x16, 0xea, 0x85, 0x86, 0x83,
	0x8b, 0x7a, 0xde, 0x0b, 0xd1, 0x77, 0x00, 0x21, 0x91, 0x64, 0x12, 0xcc, 0x89, 0x10, 0xd5, 0xed,
	0xba, 0xd5, 0x28, 0xb7, 0x9e, 0x6e, 0xd8, 0xbe, 0x43, 0x24, 0x69, 0x2b, 0x5c, 0xf4, 0x3a, 0x0a,
	0x88, 0x8c, 0x38, 0xc3, 0x4e, 0x98, 0xaf, 0xb9, 0x7f, 0xda, 0xf0, 0xf0, 0x96, 0x04, 0x55, 0x66,
	0x21, 0x55, 0x6e, 0xa9, 0xdd, 0xad, 0xba, 0xd5, 0x70, 0xf0, 0x9e, 0x59, 0xe8, 0x85, 0xe8, 0x15,
	0xec, 0xc7, 0x06, 0x9e, 0x4b, 0x59, 0xb5, 0xb5, 0x04, 0xcf, 0x36, 0xe4, 0xd0, 0x56, 0xe3, 0x9e,
	0x1e, 0x5f, 0x13, 0xa2, 0x1c, 0xaf, 0xef, 0xfb, 0x33, 0x80, 0x4c, 0x48, 0x40, 0x27, 0x22, 0x26,
	0x4c, 0x1f, 0xbb, 0xd4, 0x7a, 0x7e, 0x7f, 0x61, 0xbd, 0x91, 0x22, 0x0f, 0x63, 0xc2, 0xba, 0x4c,
	0x26, 0x57, 0xd8, 0x91, 0xf9, 0xbc, 0xf6, 0x02, 0xca, 0xeb, 0x3f, 0x51, 0x05, 0x0a, 0x17, 0xf4,
	0x2a, 0x3b, 0x9d, 0x1a, 0xa2, 0x0f, 0x61, 0xe7, 0x92, 0xcc, 0x53, 0xaa, 0xbd, 0x70, 0xb0, 0x99,
	0x7c, 0x69, 0x1f, 0x59, 0xee, 0xef, 0x36, 0x3c, 0xde, 0x78, 0x0a, 0x74, 0x04, 0xce, 0xb2, 0x68,
	0x74, 0xbc, 0x52, 0xab, 0xe6, 0x99, 0xb2, 0xf2, 0xf2, 0xb2, 0xf2, 0x46, 0x39, 0x02, 0xbf, 0x05,
	0xa3, 0x16, 0xec, 0xea, 0xe2, 0x16, 0x99, 0x82, 0xb5, 0x95, 0xb3, 0xd2, 0x37, 0xd2, 0x33, 0x95,
	0xdf, 0x55, 0x5f, 0x9c, 0x21, 0xd1, 0x73, 0x28, 0x9a, 0x5a, 0x17, 0x99, 0x40, 0x07, 0xd7, 0x48,
	0xcb, 0x9e, 0xf0, 0xb0, 0xc6, 0xe1, 0x1c, 0x8f, 0xc6, 0xb0, 0x9f, 0x35, 0x41, 0x96, 0xba, 0xaa,
	0x1e, 0x15, 0xe2, 0xb3, 0x6b, 0x21, 0xb4, 0xce, 0x5e, 0x86, 0xf5, 0xda, 0x6b, 0x1c, 0x7c, 0x3d,
	0x86, 0x7b, 0x0e, 0xfb, 0x4b, 0x45, 0x44, 0xcc, 0x99, 0xa0, 0xe8, 0x08, 0x76, 0x18, 0x97, 0x54,
	0x64, 0xcd, 0xe1, 0x6e, 0xf0, 0x30, 0xa3, 0xf5, 0xb9, 0xa4, 0xd8, 0x10, 0xee, 0x6c, 0x0a, 0x77,
	0x02, 0xa5, 0x15, 0x0a, 0x42, 0xb0, 0xad, 0x48, 0x99, 0x87, 0x7a, 0x8c, 0x5e, 0xc0, 0xae, 0x90,
	0x44, 0xa6, 0x42, 0x93, 0xcb, 0xad, 0x27, 0x77, 0x6f, 0x3d, 0xd4, 0x58, 0x9c, 0x71, 0xdc, 0x31,
	0x7c, 0xbc, 0xea, 0x73, 0xc4, 0x66, 0xb9, 0xc9, 0x5f, 0x41, 0x29, 0x98, 0x47, 0x94, 0xc9, 0x89,
	0xb2, 0xef, 0x1e, 0x36, 0x83, 0x81, 0xab, 0x05, 0xf7, 0x2f, 0x0b, 0x1e, 0xdd, 0x88, 0x9b, 0x49,
	0xf5, 0x3e, 0x81, 0x15, 0x59, 0xdd, 0xab, 0x34, 0x31, 0x64, 0xfb, 0xdd, 0x64, 0x03, 0xd7, 0xe4,
	0x9a, 0xba, 0x62, 0x28, 0x95, 0x11, 0x9b, 0x55, 0x0b, 0xa6, 0xc9, 0xf3, 0xf9, 0xe1, 0x17, 0xf0,
	0x60, 0x4d, 0x21, 0x54, 0x82, 0xe2, 0xb8, 0xff, 0xb2, 0x3f, 0xf8, 0xa9, 0x5f, 0xd9, 0x42, 0x0e,
	0xec, 0x74, 0x31, 0x1e, 0xe0, 0x8a, 0xa5, 0xd6, 0x87, 0xe3, 0x76, 0xbb, 0x3b, 0x1c, 0x56, 0xec,
	0xc3, 0x1f, 0x01, 0xdd, 0xbc, 0x70, 0x50, 0x19, 0x60, 0xdc, 0x3f, 0x1d, 0x74, 0x7a, 0xdf, 0xf4,
	0xba, 0x9d, 0xca, 0x16, 0x7a, 0x00, 0xce, 0xa8, 0xfb, 0x43, 0xf7, 0xb4, 0x3b, 0xc2, 0xaf, 0x4c,
	0x84, 0xf6, 0xe0, 0xf4, 0xf4, 0xb8, 0xdf, 0xa9, 0xd8, 0x68, 0x1f, 0xa0, 0xd3, 0x3b, 0xfe, 0xb6,
	0x3f, 0x18, 0x8e, 0x7a, 0xed, 0xca, 0xbf, 0xc5, 0xd6, 0x3f, 0x16, 0xa0, 0x15, 0xe9, 0x86, 0xe6,
	0x15, 0x41, 0x01, 0x14, 0xb3, 0xfc, 0xd0, 0xe1, 0xdd, 0x0e, 0xaf, 0x5e, 0xda, 0xb5, 0x4f, 0xdf,
	0x85, 0x35, 0xa6, 0xb8, 0x5b, 0x0d, 0xeb, 0x99, 0x85, 0x66, 0xb0, 0xad, 0xac, 0x42, 0xcd, 0x7b,
	0x5c, 0x6c, 0x6f, 0x4b, 0xa5, 0xe6, 0xdd, 0x17, 0x9e, 0x6f, 0x76, 0xf2, 0x9b, 0x05, 0x07, 0x01,
	0x5f, 0x6c, 0xe0, 0x69, 0x1b, 0x4f, 0x1e, 0xdd, 0x54, 0xe1, 0x4c, 0xfd, 0x38, 0xb3, 0x7e, 0xf9,
	0x7e, 0x16, 0xc9, 0xf3, 0x74, 0xaa, 0x1a, 0xd6, 0x5f, 0x86, 0x68, 0x92, 0x48, 0x3d, 0x7e, 0x34,
	0x61, 0x64, 0xde, 0xd4, 0x21, 0x84, 0x2f, 0x92, 0xc0, 0x5f, 0x90, 0x88, 0x99, 0xd7, 0xce, 0xbf,
	0xe5, 0x95, 0xfc, 0xcf, 0xb2, 0xfe, 0xb0, 0x0b, 0xc7, 0xe3, 0xd1, 0x74, 0x57, 0x63, 0x3e, 0xff,
	0x3f, 0x00, 0x00, 0xff, 0xff, 0x17, 0xbb, 0xe5, 0x65, 0xda, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CloudIngestServiceClient is the client API for CloudIngestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudIngestServiceClient interface {
	//
	// Establish the data and response streams.
	//
	// The data stream carries information from the caller
	// to TMC, and the response stream carries confirmation
	// notes and other response messages in response.
	Publish(ctx context.Context, opts ...grpc.CallOption) (CloudIngestService_PublishClient, error)
	//
	// Ping()
	//
	// Confirm liveness of the service; report service version; allow
	// estimation of minimum request round trip latency, and allow
	// a bounded estimate for clock offset between client and TMC.
	Ping(ctx context.Context, in *CloudIngestPingRequest, opts ...grpc.CallOption) (*CloudIngestPingResponse, error)
}

type cloudIngestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudIngestServiceClient(cc grpc.ClientConnInterface) CloudIngestServiceClient {
	return &cloudIngestServiceClient{cc}
}

func (c *cloudIngestServiceClient) Publish(ctx context.Context, opts ...grpc.CallOption) (CloudIngestService_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CloudIngestService_serviceDesc.Streams[0], "/autonomic.cloudingest.CloudIngestService/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudIngestServicePublishClient{stream}
	return x, nil
}

type CloudIngestService_PublishClient interface {
	Send(*PublishRequestBatch) error
	Recv() (*PublishResponse, error)
	grpc.ClientStream
}

type cloudIngestServicePublishClient struct {
	grpc.ClientStream
}

func (x *cloudIngestServicePublishClient) Send(m *PublishRequestBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudIngestServicePublishClient) Recv() (*PublishResponse, error) {
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudIngestServiceClient) Ping(ctx context.Context, in *CloudIngestPingRequest, opts ...grpc.CallOption) (*CloudIngestPingResponse, error) {
	out := new(CloudIngestPingResponse)
	err := c.cc.Invoke(ctx, "/autonomic.cloudingest.CloudIngestService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudIngestServiceServer is the server API for CloudIngestService service.
type CloudIngestServiceServer interface {
	//
	// Establish the data and response streams.
	//
	// The data stream carries information from the caller
	// to TMC, and the response stream carries confirmation
	// notes and other response messages in response.
	Publish(CloudIngestService_PublishServer) error
	//
	// Ping()
	//
	// Confirm liveness of the service; report service version; allow
	// estimation of minimum request round trip latency, and allow
	// a bounded estimate for clock offset between client and TMC.
	Ping(context.Context, *CloudIngestPingRequest) (*CloudIngestPingResponse, error)
}

// UnimplementedCloudIngestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCloudIngestServiceServer struct {
}

func (*UnimplementedCloudIngestServiceServer) Publish(srv CloudIngestService_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedCloudIngestServiceServer) Ping(ctx context.Context, req *CloudIngestPingRequest) (*CloudIngestPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterCloudIngestServiceServer(s *grpc.Server, srv CloudIngestServiceServer) {
	s.RegisterService(&_CloudIngestService_serviceDesc, srv)
}

func _CloudIngestService_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudIngestServiceServer).Publish(&cloudIngestServicePublishServer{stream})
}

type CloudIngestService_PublishServer interface {
	Send(*PublishResponse) error
	Recv() (*PublishRequestBatch, error)
	grpc.ServerStream
}

type cloudIngestServicePublishServer struct {
	grpc.ServerStream
}

func (x *cloudIngestServicePublishServer) Send(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudIngestServicePublishServer) Recv() (*PublishRequestBatch, error) {
	m := new(PublishRequestBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CloudIngestService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudIngestPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudIngestServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autonomic.cloudingest.CloudIngestService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudIngestServiceServer).Ping(ctx, req.(*CloudIngestPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudIngestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "autonomic.cloudingest.CloudIngestService",
	HandlerType: (*CloudIngestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _CloudIngestService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _CloudIngestService_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "autonomic/ext/cloud/cloud-ingest-service.proto",
}
