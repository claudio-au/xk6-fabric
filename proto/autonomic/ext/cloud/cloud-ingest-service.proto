/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2019 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */

syntax = "proto3";

package autonomic.cloudingest;

option go_package = "xk6-fabric/proto/autonomic/ext/cloud";
option java_package = "com.autonomic.cloudingest.proto";
option java_outer_classname = "CloudIngestServiceProto";
option java_multiple_files = true;

option cc_enable_arenas = true;

option objc_class_prefix = "AUT";

import "autonomic/ext/event/event.proto";
import "autonomic/ext/telemetry/report.proto";
import "autonomic/ext/cloud/command_request.proto";
import "google/protobuf/timestamp.proto";

/*
 * The CloudIngestService is a mechanism to enable transfer of large
 * amounts of data relating to large numbers of distinct devices
 * from client data storage into TMC, where each update message from
 * the client can carry potentially many data items for each of a
 * number of distinct devices.
 *
 * This file defines the interface between the implementation of the
 * Cloud Ingest service within TMC (currently, "redeef"), and the
 * various Agents running outside TMC providing transformation from
 * client-native formats into data that TMC can ingest. Clients are
 * advised to use an Au-supplied support library in order to assure
 * correct semantics and behaviors that are not within the scope
 * of a "proto" file.
 *
 * The primary transfer mechanism provides for an explicit Acknowledge
 * mechanism, to support "at least once" delivery of data from Client
 * cloud to TMC.
 */
service CloudIngestService {

  /*
   * Establish the data and response streams.
   *
   * The data stream carries information from the caller
   * to TMC, and the response stream carries confirmation
   * notes and other response messages in response.
   */
  rpc Publish (stream PublishRequestBatch) returns (stream PublishResponse) {
  }

  /*
   * Ping()
   *
   * Confirm liveness of the service; report service version; allow
   * estimation of minimum request round trip latency, and allow
   * a bounded estimate for clock offset between client and TMC.
   */
  rpc Ping (CloudIngestPingRequest) returns (CloudIngestPingResponse) {
  }
}

/*
 * Publish Request Batches contain a batch of data to be ingested into
 * the TMC, prepackaged as a collection of KeyedPublishRequests. It also
 * carries an optional ACK token, to be returned when batch processing
 * has been completed.
 *
 * Messages with most (or all!) fields left empty can be sent, to enable
 * active in-band keepalive implementations when appropriate.
 */
message PublishRequestBatch {
  /*
   * The "batch" field contains collections of messages to be ingested
   * into TMC. See "KeyedPublishRequest" for details. Can be empty.
   */
  repeated KeyedPublishRequest batch = 1;
  /*
   * The "ack_token" field can be set by the caller to any non-empty
   * collection of bytes, which will be returned via the response
   * channel after all data from the batch (and prior batches) has
   * been ingested (or rejected by sanity checks).
   */
  bytes ack_token = 2;
  /*
   * The "group_id" field is used while establishing the connection
   * to indicate an TMC Asset Group, containing all the devices that
   * the client wants to reference.
   *
   * This is the permission system. The client credentials must have
   * permission to ingest data for this named group, and this allows
   * the client to send messages using any device in the group as
   * the "device_id" for the message.
   *
   * Clients should send their group when initiating the connection,
   * along with an ACK token, then wait for the ACK token to be returned
   * before sending any data. Clients are cautioned that this operation
   * may take a number of seconds for large groups.
   *
   * Clients should *NOT* send any data in this field once they have
   * started sending batches of data.
   */
  repeated string group_id = 3;

  // The "data_class" field is reserved for internal use.
  DataClassification data_class = 4;
}

/*
 * The "KeyedPublishRequest" message provides, for one specific Device ID,
 * a collection of data items related to that device, to be ingested into
 * the TMC.
 */
message KeyedPublishRequest {
  /*
   * The "device_id" field contains the full AUI form of the Device ID
   * as provided by TMC during device onboarding, for the device that
   * is associated with the data being transported by this message.
   *
   * The value presented here must indicate a device that is a member
   * of the group specified in "group_id" above during start-up.
   */
  string device_id = 1;
  /*
   * The "publish_request" field contains a collection of messages
   * intended to be ingested into TMC, relating to the device_id.
   */
  repeated CloudIngestPublishRequest publish_request = 2;

  // The "trace_span" field is reserved for future use.
  map<string,string> trace_span = 3;
}

/*
 * The "CloudIngestPublishRequest" message represents a collection
 * of data elements to be ingested for a device specified separately.
 *
 * REVIEW NOTE: see separate Compatibility document in Redeef.
 */
message CloudIngestPublishRequest {

    // TODO document timestamp semantics (per Edge Processor)
    google.protobuf.Timestamp timestamp = 1;

    /*
     * This message contains collections of messages that will become Data
     * Elements within the TMC. Currently, Cloud Ingest allows ingestion of
     * Events, Reports, and Command Requests.
     */
    repeated autonomic.ext.event.Event events = 2;
    repeated autonomic.ext.telemetry.Report reports = 3;
    repeated autonomic.ext.cloud.command.CommandRequest commandRequests = 4;
}

/*
 * If the ACK token in a request batch is not empty, or if there are
 * any response notes generated by the batch, the Publish Response
 * will be returned to the caller after all state related to the batch
 * has been committed to storage within the cloud.
 *
 * The service may send PublishResponse messages with all fields
 * empty, to enable active in-band keepalive implementations when that
 * is appropriate.
 */
message PublishResponse {
  /*
   * Responses may contain several independent notes.
   */
  repeated PublishNote notes = 1;
  /*
   * If an "ack_token" was provided in a PublishRequestBatch, it will
   * be returned in this field, after all data provided in the batch
   * and in all previous batches has been processed.
   */
  bytes ack_token = 2;
}

/*
 * The PublishNote message is used to provide confirmation messages
 * for certain important transitions, and information about certain
 * kinds of failures.
 *
 * Client software should log any ERROR notes and bring them to the
 * attention of a human for corrective action. Such notes generally
 * will be followed shortly by termination of the stream; reconnecting
 * is likely to simply trigger the same ERROR until an action is
 * taken to clear the described condition.
 *
 * It is recommended that Client software log all SUCCESS notes for
 * future reference, especially useful when there is a subsequent
 * ERROR note later in the same stream.
 *
 * It is notable that the initial SUCCESS notes will include
 * information on which server was contacted, what version of the
 * service is running, and confirmation of initial permissions; this
 * data will be needed in any problem resolution interaction.
 *
 * Logging of start-up messages is like keeping your receipt when you
 * purchase expensive equipment: it comes in handy if you need support ;)
 */
message PublishNote {
  /*
   * The "note" field contains a human-readable string, intended for
   * logging and display.
   *
   * Human readable notes are meant to stand on their own, providing
   * explicit annotation of what was wrong in a way that indicates what
   * to do to fix the problem. Please let us know if any messages lack
   * clarity, so they can be refined.
   */
  string note = 1;
  /*
   * Indicate whether this message indicates an ERROR of some kind,
   * or is a confirmation of SUCCESS of an important step.
   */
  PublishStatus status = 2;
  /*
   * This message may be expanded in the future to allow client
   * code to explicitly identify specific conditions, and extract
   * specific parameters, without using text scraping methods. If
   * you find yourself doing string matches of the note in code to
   * detect specific conditions, or attempting to extract data
   * from the note about errors, please let us know; this will
   * help drive future evolution of the responses to be more
   * useful to the Agent software and the people running it.
   */
}

/*
 * PublishStatus is attached to each PublishNote indicating whether
 * the note is an error, or confirmation that something succeeded.
 *
 * This status list may be expanded in the future; we recommend
 * that client code be prepared to see GRPC "UNRECOGNIZED" values
 * in this field (and to avoid calling .getNumber on those).
 */
enum PublishStatus {
  UNKNOWN = 0;
  ERROR = 1;
  SUCCESS = 2;
}

message CloudIngestPingRequest {
  /*
   * Clients using "ping" merely to verify service liveness need not
   * fill in this field.
   *
   * While the "client_time" field is optional, it is highly recommended
   * that clients estimating latency or clock offsets provide a timestamp
   * here using the same clock that will be used to estimate the latency
   * when the reply is received.
   */
  google.protobuf.Timestamp client_time = 1; // OPTIONAL client timestamp
}

message CloudIngestPingResponse {
  /*
   * The "client_time" field is a direct duplicate of the client time
   * represented in the ping request. Note that if the client did not
   * provide a client time, the value present here will be the default
   * value per protobuf standards.
   */
  google.protobuf.Timestamp client_time = 1;  // copied from PingRequest
  /*
   * The "server_time" field represents the current wall-clock time
   * on the specific server handling this request.
   *
   * The primary use for this data is to estimate clock offsets between
   * the client and the server, based on knowing that the server clock
   * had this value at some instant between the two client times, and
   * it was probably somewhere near the midway point between them.
   *
   * Clients wishing to establish separate latency estimates for inbound
   * versus outbound traffic are reminded that their client clock, and
   * the clock on the service, will not be well synchronized; and they
   * should rely on the round-trip measurement using a singe clock on
   * their end to provide starting and ending times.
   */
  google.protobuf.Timestamp server_time = 2; // clock sampled by service
  /*
   * The "greeting" message is intended to be human readable, and clients
   * should expect that the content might change from time to time. It
   * is intended to convey information sufficient to identify the specific
   * service handling the request, and which version of that service.
   */
  string greeting = 3; // service name, version identifier
}

// The DataClassification enum is reserved for internal use.
enum DataClassification {
  UNMODIFIED = 0;
  TELEMETRY = 1;
  COMMAND = 2;

  DIAGNOSTIC = 999;
}

