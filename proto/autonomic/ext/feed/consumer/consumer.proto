/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2018 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */

syntax = "proto3";

package autonomic.ext.feed.consumer;

option go_package = "xk6-fabric/proto/autonomic/ext/feed/consumer";
option java_package = "com.autonomic.ext.feed.consumer";
option java_outer_classname = "FeedConsumerProto";
option java_multiple_files = true;

option cc_enable_arenas = true;

option objc_class_prefix = "AUT";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

/*
    Feed Consumer

    path structure: /{namespace}/{flow}

    EXTERNAL INTERFACE NOTE: Valid flow names contain only lower case
    letters, digits, and hyphens; they must start and end with letters
    (this is intended to keep flow names "telephone test" safe).

    TODO: move this note to the External Interface documentation,
    wherever we discuss creation of Flows.

    IMPL NOTE: when flows are reified as Kafka Topics, we intend to
    add a "flow-" prefix to the flow name to get the topic name.

    TODO: move this IMPL NOTE to the Implementation documentation,
    where we discuss how flows map to Kakfa topics.

*/
service Consumer {
    /*
        GetFlow()

        Returns a snapshot of selected statistics for a named flow.

        If the flow name is invalid or the named flow does not exist,
        an appropriate exception is raised.

        NOTE: the Shard Identifiers returned by this call are intended
        to be entirely opaque.

    */
    rpc GetFlow (GetFlowRequest) returns (GetFlowResponse) {};

    /*
        GetStartReference()

        Given a valid flow name and a shard identifier previously
        obtained from a GetFlow request, obtain a valid Reference that
        can be used to start reading that shard's data for that flow
        at the indicationed starting location.

        If the flow name is invalid or the named flow does not exist,
        or the Shard Identifier is invalid, or the Reference is needed
        and is invalid, an appropriate exception is raised.

        Consumers may start at the beginning, or ask only for new
        data arriving, or start at a specified time, or start after
        a previously consumed message using its reference.

        Operation is currently UNDEFINED if the shard identifier is
        from the wrong flow, or if a specified reference is not from
        the specified shard of the specified flow.

        TODO: decide if "throw an exception on mismatch" is sufficiently
        useful to mandate the bookkeeping needed.
    */
    rpc GetStartReference (GetStartReferenceRequest) returns (GetStartReferenceResponse) {};

    /*
        GetEvents()

        Given a valid flow name, shard identifier, and reference, start
        a stream flowing that contains the appropriate data. The stream
        will terminate if a specified timeout is exceeded, or if the number
        of events returned reeaches a specified limit, or if the total
        size of the serialized data exceeds the size limit.

        If the flow name is invalid or the named flow does not exist,
        or the Shard Identifier is invalid, or the Reference is
        invalid, an appropriate exception is raised.

        Operation is currently UNDEFINED if the shard identifier is
        from the wrong flow, or if the specified reference is not from
        the specified shard of the specified flow.

        TODO: decide if "throw an exception on mismatch" is sufficiently
        useful to mandate the bookkeeping needed.
    */
    rpc GetEvents (GetEventsRequest) returns (stream GetEventsResponse) {};

    /*
        Ping()

        Confirm liveness of the service; report service version; and
        allow estimation of minimum request round trip latency.

        Precision of one-way latencies will depend on the relative
        offsets of client and server clocks.
    */
    rpc Ping (FeedConsumerPingRequest) returns (FeedConsumerPingResponse) {};
}

message GetFlowRequest {

    string flow = 1;
}

message ShardInfo {

    bytes id = 1;

    uint64 messages = 2;

    uint64 bytes = 3;

    google.protobuf.Timestamp last_received = 4;
}

message GetFlowResponse {

    repeated ShardInfo shards = 1;

    uint64 total_messages = 2;

    uint64 total_bytes = 3;

    google.protobuf.Timestamp last_received = 4;
}

message GetStartReferenceRequest {

    string flow = 1;

    bytes shard = 2;

    enum StartReferenceType {
        UNKNOWN_START_REFERENCE_TYPE = 0;
        EARLIEST = 1;
        LATEST = 2;
        AFTER_REFERENCE = 3;
        AT_TIMESTAMP = 4;
    }

    StartReferenceType start_type = 3;

    oneof start_parameter {

        bytes reference = 4;

        google.protobuf.Timestamp timestamp = 5;
    }
}

message GetStartReferenceResponse {

    bytes reference = 1;
}

message GetEventsRequest {
    // Name of the flow from which we want events
    string flow = 1;

    // Identifier of the shard from which we want events
    bytes shard = 2;

    // Reference at which we want to begin receiving events
    bytes reference = 3;

    // Timeout in milliseconds to wait for events; a value of 0 disables timeout
    uint32 timeout = 4;

    // The maximum number of events to return; a value of 0 means no maximum
    uint32 count_limit = 5;

    // The maximum number of bytes to return; a value of 0 means no maximum
    uint32 size_limit = 6;



    // The following fields are "optional", meaning if a value is not provided
    // for them by the client, their default value - "false" will be used.

    // Dedup contiguous duplicate events
    bool dedup_contiguous_identical_events = 7;
    // Add vehicle UUID in FeedEvent
    bool enable_vehicle_uuid_info = 8;
    // Add device UUID in FeedEvent
    bool enable_device_uuid_info = 9;

    // if enable_event_packaging is true, then multiple events
    // will be packaged into a single FeedEvent response.
    // Default is false if this flag is unset.
    bool enable_batch_telemetry = 10;
}

message GetEventsResponse {

    repeated FeedEvent events = 1;
}

message FeedEvent {
    bytes reference = 1;

    google.protobuf.Timestamp timestamp = 2;

    string shard_key = 3;

    google.protobuf.Any typed_data = 5;

    // Additional information about the asset
    AssetInfo asset_info = 7;

    // aux storage for dynamic tracing
    map<string,string> trace_span = 8;

    // Contains the list of telemetry data when typed_data is empty.
    repeated google.protobuf.Any telemetry_data = 9;
}

message AssetInfo {
    VehicleAssetInfo vehicle_asset_info = 1;
    VehicleAssetUuidInfo vehicle_asset_uuid_info = 2;
}

message VehicleAssetInfo {
    string vin = 1;
    string last_known_esn = 2;
    string last_known_iccid = 3;
    string type = 4;
    string serial = 5;
    reserved 6; reserved "protocol"; //DEPRECATED - device communication protocol
    string region_code = 7; // device region code
    string protocol_version = 8; // device protocol version
}

message VehicleAssetUuidInfo {
    string vehicle_asset_uuid = 1;
    string device_asset_uuid = 2;
}

message FeedConsumerPingRequest {
    google.protobuf.Timestamp client_time = 1; // OPTIONAL client timestamp
}

message FeedConsumerPingResponse {
    google.protobuf.Timestamp client_time = 1; // copied from PingRequest
    google.protobuf.Timestamp server_time = 2; // clock sampled by service
    string greeting = 3; // service name, version identifier (not semver)
}
