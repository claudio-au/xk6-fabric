/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2020 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autonomic/ext/vehicledeviceregistration/vehicle_device_registration_event.proto

package vehicledeviceregistration

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VehicleDeviceRegistrationEvent_Status int32

const (
	VehicleDeviceRegistrationEvent_UNKNOWN_STATUS VehicleDeviceRegistrationEvent_Status = 0
	VehicleDeviceRegistrationEvent_SUCCESS        VehicleDeviceRegistrationEvent_Status = 1
	VehicleDeviceRegistrationEvent_FAILURE        VehicleDeviceRegistrationEvent_Status = 2
)

var VehicleDeviceRegistrationEvent_Status_name = map[int32]string{
	0: "UNKNOWN_STATUS",
	1: "SUCCESS",
	2: "FAILURE",
}

var VehicleDeviceRegistrationEvent_Status_value = map[string]int32{
	"UNKNOWN_STATUS": 0,
	"SUCCESS":        1,
	"FAILURE":        2,
}

func (x VehicleDeviceRegistrationEvent_Status) String() string {
	return proto.EnumName(VehicleDeviceRegistrationEvent_Status_name, int32(x))
}

func (VehicleDeviceRegistrationEvent_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_72214c738e2b5329, []int{0, 0}
}

type VehicleDeviceRegistrationEvent_FailureCode int32

const (
	VehicleDeviceRegistrationEvent_UNKNOWN_FAILURE VehicleDeviceRegistrationEvent_FailureCode = 0
	// Insufficient/invalid information was contained in the payload received from
	// the device requesting registration.
	VehicleDeviceRegistrationEvent_PARSE_ERROR VehicleDeviceRegistrationEvent_FailureCode = 1
	// The device is missing from TMC. (Note that a device must be defined in TMC
	// prior to any VehicleDeviceRegistrationEvent that it is associated with.)
	VehicleDeviceRegistrationEvent_DEVICE_NOT_FOUND VehicleDeviceRegistrationEvent_FailureCode = 2
	// An unexpected error was encountered on TMC during the registration process
	// that resulted in the registration not completing successfully.
	VehicleDeviceRegistrationEvent_INTERNAL_SERVICE_ERROR VehicleDeviceRegistrationEvent_FailureCode = 3
)

var VehicleDeviceRegistrationEvent_FailureCode_name = map[int32]string{
	0: "UNKNOWN_FAILURE",
	1: "PARSE_ERROR",
	2: "DEVICE_NOT_FOUND",
	3: "INTERNAL_SERVICE_ERROR",
}

var VehicleDeviceRegistrationEvent_FailureCode_value = map[string]int32{
	"UNKNOWN_FAILURE":        0,
	"PARSE_ERROR":            1,
	"DEVICE_NOT_FOUND":       2,
	"INTERNAL_SERVICE_ERROR": 3,
}

func (x VehicleDeviceRegistrationEvent_FailureCode) String() string {
	return proto.EnumName(VehicleDeviceRegistrationEvent_FailureCode_name, int32(x))
}

func (VehicleDeviceRegistrationEvent_FailureCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_72214c738e2b5329, []int{0, 1}
}

// A specific PlatformEvent type that represents the registration of a vehicle-device
// pair onto the TMC platform.
type VehicleDeviceRegistrationEvent struct {
	// REQUIRED: Unique identifier for the event - e.g. aui:vehicledeviceregistration:event:<au-ingest-message-id>
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// REQUIRED: The timestamp at which the event occurred
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// REQUIRED: The payload received from a device that initiated the VehicleDeviceRegistrationEvent
	BytesData []byte `protobuf:"bytes,3,opt,name=bytes_data,json=bytesData,proto3" json:"bytes_data,omitempty"`
	// REQUIRED: The VIN of the vehicle associated with the VehicleDeviceRegistrationEvent
	Vin string `protobuf:"bytes,4,opt,name=vin,proto3" json:"vin,omitempty"`
	// REQUIRED: The serial number of the device associated with the VehicleDeviceRegistrationEvent
	DeviceSerialNumber string `protobuf:"bytes,5,opt,name=device_serial_number,json=deviceSerialNumber,proto3" json:"device_serial_number,omitempty"`
	// REQUIRED: The type of the connectivity device associated with the VehicleDeviceRegistrationEvent
	DeviceType string `protobuf:"bytes,6,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// REQUIRED: The status of the VehicleDeviceRegistrationEvent (success/failure)
	Status VehicleDeviceRegistrationEvent_Status `protobuf:"varint,7,opt,name=status,proto3,enum=autonomic.ext.vehicledeviceregistration.VehicleDeviceRegistrationEvent_Status" json:"status,omitempty"`
	// OPTIONAL: Present if the status of the VehicleDeviceRegistrationEvent is failure - a failure
	// code that indicates the reason for the failure.
	FailureCode          VehicleDeviceRegistrationEvent_FailureCode `protobuf:"varint,8,opt,name=failure_code,json=failureCode,proto3,enum=autonomic.ext.vehicledeviceregistration.VehicleDeviceRegistrationEvent_FailureCode" json:"failure_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *VehicleDeviceRegistrationEvent) Reset()         { *m = VehicleDeviceRegistrationEvent{} }
func (m *VehicleDeviceRegistrationEvent) String() string { return proto.CompactTextString(m) }
func (*VehicleDeviceRegistrationEvent) ProtoMessage()    {}
func (*VehicleDeviceRegistrationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_72214c738e2b5329, []int{0}
}

func (m *VehicleDeviceRegistrationEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VehicleDeviceRegistrationEvent.Unmarshal(m, b)
}
func (m *VehicleDeviceRegistrationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VehicleDeviceRegistrationEvent.Marshal(b, m, deterministic)
}
func (m *VehicleDeviceRegistrationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VehicleDeviceRegistrationEvent.Merge(m, src)
}
func (m *VehicleDeviceRegistrationEvent) XXX_Size() int {
	return xxx_messageInfo_VehicleDeviceRegistrationEvent.Size(m)
}
func (m *VehicleDeviceRegistrationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_VehicleDeviceRegistrationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_VehicleDeviceRegistrationEvent proto.InternalMessageInfo

func (m *VehicleDeviceRegistrationEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VehicleDeviceRegistrationEvent) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *VehicleDeviceRegistrationEvent) GetBytesData() []byte {
	if m != nil {
		return m.BytesData
	}
	return nil
}

func (m *VehicleDeviceRegistrationEvent) GetVin() string {
	if m != nil {
		return m.Vin
	}
	return ""
}

func (m *VehicleDeviceRegistrationEvent) GetDeviceSerialNumber() string {
	if m != nil {
		return m.DeviceSerialNumber
	}
	return ""
}

func (m *VehicleDeviceRegistrationEvent) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *VehicleDeviceRegistrationEvent) GetStatus() VehicleDeviceRegistrationEvent_Status {
	if m != nil {
		return m.Status
	}
	return VehicleDeviceRegistrationEvent_UNKNOWN_STATUS
}

func (m *VehicleDeviceRegistrationEvent) GetFailureCode() VehicleDeviceRegistrationEvent_FailureCode {
	if m != nil {
		return m.FailureCode
	}
	return VehicleDeviceRegistrationEvent_UNKNOWN_FAILURE
}

func init() {
	proto.RegisterEnum("autonomic.ext.vehicledeviceregistration.VehicleDeviceRegistrationEvent_Status", VehicleDeviceRegistrationEvent_Status_name, VehicleDeviceRegistrationEvent_Status_value)
	proto.RegisterEnum("autonomic.ext.vehicledeviceregistration.VehicleDeviceRegistrationEvent_FailureCode", VehicleDeviceRegistrationEvent_FailureCode_name, VehicleDeviceRegistrationEvent_FailureCode_value)
	proto.RegisterType((*VehicleDeviceRegistrationEvent)(nil), "autonomic.ext.vehicledeviceregistration.VehicleDeviceRegistrationEvent")
}

func init() {
	proto.RegisterFile("autonomic/ext/vehicledeviceregistration/vehicle_device_registration_event.proto", fileDescriptor_72214c738e2b5329)
}

var fileDescriptor_72214c738e2b5329 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x41, 0x6b, 0xdb, 0x30,
	0x1c, 0xc5, 0x2b, 0xa7, 0x4b, 0x17, 0xb9, 0xa4, 0x46, 0x2b, 0xc3, 0x04, 0xb6, 0x86, 0xec, 0xb0,
	0xc0, 0xa8, 0x3d, 0x3a, 0x18, 0xbb, 0xa6, 0x89, 0x03, 0x61, 0xc5, 0x09, 0xb2, 0xdd, 0xc1, 0x0e,
	0x13, 0x8a, 0xfd, 0x4f, 0x2a, 0x88, 0xad, 0x60, 0xcb, 0xa1, 0xf9, 0x3a, 0xfb, 0x1e, 0xfb, 0x48,
	0xbb, 0xef, 0x38, 0x22, 0x27, 0x69, 0x2e, 0x2b, 0x39, 0xec, 0x66, 0xe9, 0xfd, 0xdf, 0xef, 0x99,
	0x87, 0xfe, 0x78, 0xcc, 0x4b, 0x25, 0x33, 0x99, 0x8a, 0xd8, 0x85, 0x47, 0xe5, 0xae, 0xe0, 0x41,
	0xc4, 0x0b, 0x48, 0x60, 0x25, 0x62, 0xc8, 0x61, 0x2e, 0x0a, 0x95, 0x73, 0x25, 0x64, 0xb6, 0x53,
	0x58, 0x25, 0xb1, 0x43, 0x8d, 0xc1, 0x0a, 0x32, 0xe5, 0x2c, 0x73, 0xa9, 0x24, 0x79, 0xbf, 0x07,
	0x3a, 0xf0, 0xa8, 0x9c, 0x7f, 0x02, 0x5b, 0x57, 0x73, 0x29, 0xe7, 0x0b, 0x70, 0xb5, 0x6d, 0x5a,
	0xce, 0x5c, 0x25, 0x52, 0x28, 0x14, 0x4f, 0x97, 0x15, 0xa9, 0xf3, 0xfb, 0x14, 0xbf, 0xbd, 0xaf,
	0xec, 0x03, 0x6d, 0xa7, 0x07, 0x76, 0x6f, 0x13, 0x49, 0x9a, 0xd8, 0x10, 0x89, 0x8d, 0xda, 0xa8,
	0xdb, 0xa0, 0x86, 0x48, 0xc8, 0x17, 0xdc, 0xd8, 0x53, 0x6c, 0xa3, 0x8d, 0xba, 0xe6, 0x4d, 0xcb,
	0xa9, 0x72, 0x9c, 0x5d, 0x8e, 0x13, 0xee, 0x26, 0xe8, 0xd3, 0x30, 0x79, 0x83, 0xf1, 0x74, 0xad,
	0xa0, 0x60, 0x09, 0x57, 0xdc, 0xae, 0xb5, 0x51, 0xf7, 0x9c, 0x36, 0xf4, 0xcd, 0x80, 0x2b, 0x4e,
	0x2c, 0x5c, 0x5b, 0x89, 0xcc, 0x3e, 0xd5, 0x49, 0x9b, 0x4f, 0xf2, 0x11, 0x5f, 0x6e, 0xab, 0x28,
	0x20, 0x17, 0x7c, 0xc1, 0xb2, 0x32, 0x9d, 0x42, 0x6e, 0xbf, 0xd0, 0x23, 0xa4, 0xd2, 0x02, 0x2d,
	0xf9, 0x5a, 0x21, 0x57, 0xd8, 0xdc, 0x3a, 0xd4, 0x7a, 0x09, 0x76, 0x5d, 0x0f, 0xe2, 0xea, 0x2a,
	0x5c, 0x2f, 0x81, 0xcc, 0x70, 0xbd, 0x50, 0x5c, 0x95, 0x85, 0x7d, 0xd6, 0x46, 0xdd, 0xe6, 0x8d,
	0xef, 0x1c, 0xd9, 0xa5, 0xf3, 0x7c, 0x4d, 0x4e, 0xa0, 0xa9, 0x74, 0x4b, 0x27, 0x2b, 0x7c, 0x3e,
	0xe3, 0x62, 0x51, 0xe6, 0xc0, 0x62, 0x99, 0x80, 0xfd, 0x52, 0xa7, 0x05, 0xff, 0x2b, 0x6d, 0x58,
	0xb1, 0xfb, 0x32, 0x01, 0x6a, 0xce, 0x9e, 0x0e, 0x9d, 0xcf, 0xb8, 0x5e, 0xfd, 0x09, 0x21, 0xb8,
	0x19, 0xf9, 0x5f, 0xfd, 0xf1, 0x37, 0x9f, 0x05, 0x61, 0x2f, 0x8c, 0x02, 0xeb, 0x84, 0x98, 0xf8,
	0x2c, 0x88, 0xfa, 0x7d, 0x2f, 0x08, 0x2c, 0xb4, 0x39, 0x0c, 0x7b, 0xa3, 0xbb, 0x88, 0x7a, 0x96,
	0xd1, 0x01, 0x6c, 0x1e, 0x30, 0xc9, 0x2b, 0x7c, 0xb1, 0x33, 0xef, 0x66, 0x4e, 0xc8, 0x05, 0x36,
	0x27, 0x3d, 0x1a, 0x78, 0xcc, 0xa3, 0x74, 0x4c, 0x2d, 0x44, 0x2e, 0xb1, 0x35, 0xf0, 0xee, 0x47,
	0x7d, 0x8f, 0xf9, 0xe3, 0x90, 0x0d, 0xc7, 0x91, 0x3f, 0xb0, 0x0c, 0xd2, 0xc2, 0xaf, 0x47, 0x7e,
	0xe8, 0x51, 0xbf, 0x77, 0xc7, 0x02, 0x8f, 0x6a, 0xbd, 0x72, 0xd4, 0x6e, 0x7f, 0x21, 0xfc, 0x21,
	0x96, 0xe9, 0xb1, 0x35, 0xdc, 0xbe, 0x7b, 0xbe, 0x87, 0xc9, 0xe6, 0xbd, 0x4d, 0xd0, 0xf7, 0x1f,
	0x73, 0xa1, 0x1e, 0xca, 0xa9, 0x13, 0xcb, 0xd4, 0xdd, 0xa3, 0xaf, 0xb9, 0xd8, 0xec, 0x1b, 0xe4,
	0x19, 0x5f, 0x5c, 0xeb, 0x97, 0x59, 0xb8, 0x45, 0x1e, 0xbb, 0x29, 0x17, 0x59, 0xb5, 0x11, 0xee,
	0x91, 0x8b, 0xf9, 0x07, 0xa1, 0x9f, 0x46, 0xad, 0x17, 0x85, 0xd3, 0xba, 0xf6, 0x7d, 0xfa, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0xce, 0xcf, 0x46, 0xc1, 0xd3, 0x03, 0x00, 0x00,
}
