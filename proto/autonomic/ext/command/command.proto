/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2017 - 2018 Autonomic Incorporated - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 * 
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 * 
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
syntax = "proto3";

package autonomic.ext.command;

option go_package = "xk6-fabric/proto/autonomic/ext/command";
option java_package = "com.autonomic.ext.command";
option java_outer_classname = "CommandProto";
option java_multiple_files = true;
option cc_enable_arenas = true;
option objc_class_prefix = "AUT";

import "autonomic/ext/deployment/device_deployment.proto";
import "autonomic/ext/command/actuation/actuation.proto";
import "autonomic/ext/command/antitheft/anti_theft.proto";
import "autonomic/ext/command/commandcancellation/command_cancellation.proto";
import "autonomic/ext/command/configuration/configuration.proto";
import "autonomic/ext/command/keyrotation/key_rotation.proto";
import "autonomic/ext/command/wifi/report_wifi_usage.proto";
import "autonomic/ext/command/wifi/wifi.proto";
import "autonomic/ext/command/diagnostic/diagnostic.proto";
import "autonomic/ext/command/discovery/discovery.proto";
import "autonomic/ext/command/token/token.proto";
import "autonomic/ext/command/hmidisplay/hmi_display.proto";
import "autonomic/ext/command/vehicleclaim/validate_vehicle_claim.proto";
import "autonomic/ext/command/devicepairing/device_pairing_code.proto";
import "autonomic/ext/command/profile/change_config_profile.proto";
import "autonomic/ext/command/telemetryemission/configuretelemetryemission.proto";
import "autonomic/ext/command/authorization/user_auth_confirmation.proto";
import "autonomic/ext/command/hmiapplication/hmi_application.proto";
import "autonomic/ext/command/opaque/opaque.proto";
import "autonomic/ext/command/custom/custom.proto";
import "autonomic/ext/common/oem_param.proto";
import "autonomic/ext/event/well_known_states.proto";
import "autonomic/ext/event/state/well_known_command_states.proto";


// RPC for upstream services to request that a connectivity device perform a command
// In this model, the device registers its willingness to perform commands as defined
// by this service definition.
service DeviceCommand {
    rpc registerCommandListener(RegisterCommandListenerRequest) returns (stream CommandTrigger) {}
}

// Identifying information is supplied in the certificate used to by the device to connect
// to the platform edge.
message RegisterCommandListenerRequest { }

// Envelope containing a (possibly encrypted) command
message CommandTrigger {

    // The correlation_id is a Version 4 UUID string represented as a sequence of bytes.
    // Within the TMC, this field is the primary identifier for the command request. This field will
    // be unique for the target device in question. That is, it is possible for two command requests,
    // which target different devices, to share a correlation id. It is not possible for two commands,
    // which target a a single device id, to have the same correlation id.
    bytes correlation_id = 1;

    enum CommandRequestType {
        UNKNOWN_COMMAND_REQUEST_TYPE = 0;
        DEVICE_CONFIG_RESET = 1;
        MODULE_DISCOVERY = 2;
        DEVICE_DIAGNOSTIC = 3;
        DEVICE_KEY_ROTATION = 4;
        DEVICE_DEPLOYMENT = 5;
        ACTUATION = 6;
        DEVICE_CONFIG_UPDATE = 7;
        HMI_DISPLAY = 8;
        TOKEN_REFRESH = 9;
        EXECUTE_PENDING_UPDATES = 10;
        WIFI_CONFIG = 11;
        ON_DEMAND_STATUS_UPDATE = 12;
        WIFI_STATUS = 13;
        REPORT_WIFI_USAGE = 14;
        COMMAND_CANCELLATION = 15;
        VALIDATE_VEHICLE_CLAIM = 16;
        RETRIEVE_DEVICE_PAIRING_CODE = 17;
        CHANGE_CONFIG_PROFILE = 18;
        CONFIGURE_TELEMETRY_EMISSION = 19;
        USER_AUTH_CONFIRMATION = 20;
        ANTI_THEFT = 21;
        HMI_APPLICATION_MESSAGE = 22;

        CUSTOM_REQUEST = 998;
        OPAQUE_REQUEST = 999;
    }

    // Type information for encrypted requests is identified by looking at this field
    CommandRequestType type = 2;

    oneof request {
        // If set, this command trigger contains an encrypted payload. Consult the CommandRequestType
        // enumeration above to identify the request in this oneof that the _unencrypted_ payload
        // should be de-serialized into.
        bytes encrypted_request = 3;
        // A DiscoveryRequest is a request to discover modules on a vehicle CAN bus.
        autonomic.ext.command.discovery.DiscoveryRequest discovery_request = 4;
        // A ConfigurationResetRequest is a request to reset the configuration of one or more modules
        // in a vehicle to a specific state. Generally this comes in the form a of a factory reset,
        // but multiple reset types are supported.
        autonomic.ext.command.configuration.ConfigurationResetRequest configuration_reset_request = 5;
        // A DiagnosticRequest is a request to capture state information about the connectivity device
        // that receives the command. Generally this is through the collection and uploading of logs
        // to the TMC.
        autonomic.ext.command.diagnostic.DiagnosticRequest diagnostic_request = 6;
        // A KeyRotationRequest is a request to perform an encryption key rotation on the connectivity
        // device that is receiving this request.
        autonomic.ext.command.keyrotation.KeyRotationRequest key_rotation_request = 7;
        // A DeviceDeploymentRequest is a request to perform an over-the-air update on the
        // connectivity device or other module on the CAN bus.
        autonomic.ext.deployment.DeviceDeploymentRequest deployment_request = 8;
        // An ActuationRequest is a request to perform a physical operation on a vehicle. It takes
        // a number of forms, and the form of the request is determined by which of the ActuationRequest
        // fields are set. Below is an ActuationRequest to lock a door.
        autonomic.ext.command.actuation.ActuationRequest actuation_request = 9;
        // A ConfigurationUpdateRequest is a request to change specific configuration values on
        // a device or an entity in which a device resides (such as a vehicle).
        autonomic.ext.command.configuration.ConfigurationUpdateRequest configuration_update_request = 10;
        // HMIDisplayRequest has been deprecated as all previous use cases have had their implementations replaced
        autonomic.ext.command.hmidisplay.HMIDisplayRequest hmi_display_request = 11 [deprecated = true];
        // A TokenRefreshRequest is a command that updates the authentication token on a connectivity
        // device or other module on the CAN bus. The token purpose is opaque to the TMC.
        autonomic.ext.command.token.TokenRefreshRequest token_refresh_request = 12;
        // An ExecutePendingUpdatesRequest is used to inform a connectivity device, or other module on
        // the CAN bus, to perform any queued updates upon receiving the command. It is used to drive
        // software updates during off-peak hours. The presumption of this use case is that the
        // receiving CAN bus module already knows which updates are available, but is waiting to be
        // prompted.
        ExecutePendingUpdatesRequest execute_pending_updates_request = 13;
        // A WifiConfigRequest represents a request to configure the Wifi Access Point on a connectivity
        // device.
        autonomic.ext.command.wifi.WifiConfigRequest wifi_config_request = 14;
        // An OnDemandStatusUpdate request represents a request to send a pre-defined set of telemetry
        // or device state to the cloud.
        OnDemandStatusUpdateRequest on_demand_status_update_request = 15;
        // A WifiStatusRequest is a request for the device to report the current WIFI access point
        // settings, and other wifi-related telemetry, to the cloud.
        autonomic.ext.command.wifi.WifiStatusRequest wifi_status_request = 16;
        // A ReportWifiUsageRequest is a request for the device to display the contents of the enclosed
        // usage report on a screen.
        autonomic.ext.command.wifi.ReportWifiUsageRequest report_wifi_usage_request = 17;
        // A CommandCancellationRequest is a request that a device perform a cancellation of a command
        // that was previously submitted to the device, and can be identified through a correlation id.
        autonomic.ext.command.commandcancellation.CommandCancellationRequest command_cancellation_request = 18;
        // A ValidateVehicleClaimRequest is a request that the device report some specific telemetry
        // to the cloud in order for the cloud to validate a claim about physical ownership of
        // a vehicle.
        autonomic.ext.command.vehicleclaim.ValidateVehicleClaimRequest validate_vehicle_claim_request = 19;
        // A RetrieveDevicePairingCodeRequest is a request to return a pairing code used for the purposes
        // of keyless entry.
        autonomic.ext.command.devicepairing.RetrieveDevicePairingCodeRequest retrieve_device_pairing_code_request = 20;
        // A ChangeConfigProfileRequest is used to load different pre-defined configuration profiles
        // on a device.
        autonomic.ext.command.profile.ChangeConfigProfileRequest change_config_profile_request = 21;
        // A ConfigureTelemetryEmissionRequest is used to enable or disable the emission of telemetry
        // by a connectivity device, per legal or end-user constrains.
        autonomic.ext.command.telemetryemission.ConfigureTelemetryEmissionRequest configure_telemetry_emission_request = 22;
        // A UserAuthConfirmationRequest is used to validate that a specific user is authorized to
        // submit commands to a vehicle.
        autonomic.ext.command.authorization.UserAuthConfirmationRequest user_auth_confirmation_request = 23;
        // An AntiTheftRequest is a request for a device or vehicle to perform a variety of functions
        // relating to anti-theft protection.
        autonomic.ext.command.antitheft.AntiTheftRequest anti_theft_request = 24;
        // An HMIApplicationMessage is a request to display a message on the HMI.
        autonomic.ext.command.hmiapplication.HMIApplicationMessage hmi_application_message = 25;

        // A CustomRequest is a request to send an account specific user-defined command type
        autonomic.ext.command.custom.CustomRequest custom_request = 998;

        // An OpaqueRequest is a request to send an opaque blob to the vehicle.
        autonomic.ext.command.opaque.OpaqueRequest opaque_request = 999;
    }

    // was oem payload for this command (opaque to au). Leverage oem_param_values instead.
    reserved 1000;

    // oem parameters for this command (opaque to au). Leverage oem_param_values instead
    map<string, string> oem_params = 1001 [deprecated = true];

    // oem parameters for this command (opaque to au). Leverage oem_param_value_map instead
    map<string, OemParamValue> oem_param_values = 1002 [deprecated = true];

    autonomic.ext.common.oemparam.OemParamValueMap oem_param_value_map = 1006;

    // The OEM correlation id is used by the originating cloud to correlate this command, and all of
    // its progress information, to some identifier that is known only to client which submitted
    // the request to the originating cloud. This value is entirely opaque to the TMC. This
    // value will always be attached to all progress information that is processed by the TMC about
    // the command request, regardless of whether the TMC is responsible for delivery of this command
    string oem_correlation_id = 1003;

    // Contains any and all cloud-specific contextual information that may be needed for simple
    // observability or command tracking purposes.
    map<string, string> metadata_tags = 1004;

    // The tags represent generic, opaque metadata that is provided by the client when invoking
    // the command API that results in the creation of command. This metadata is attached to the
    // originating request, and all subsequent state transitions that are processed during the
    // life cycle of this command.
    map<string, string> tags = 1005;

    // The string identifier that uniquely identifies the "type" of command being executed.
    string command_type_name = 1007;

    // The finite state machine that is used to track the lifecycle of this specific command.
    oneof fsm_name {
        autonomic.ext.event.WellKnownFiniteStateMachine wk_fsm_name = 1008;
        autonomic.ext.event.state.commandstates.WellKnownCommandFiniteStateMachine command_fsm_name = 1009;
    }
}

message OemParamValue {
    option deprecated = true;
    oneof value {
        bool bool_value = 1;
        int64 int64_value = 2;
        double double_value = 3;
        float float_value = 4;
        string string_value = 5;
        OemParamStringArrayValue string_array_value = 6;
        OemParamMapValue map_value = 7;
        OemParamMapArrayValue map_array_value = 8;
        bytes byte_value = 9;
        OemParamIntArrayValue int64_array_value = 10;
    }
}

message SimpleValue {
    option deprecated = true;
    oneof value {
        bool bool_value = 1;
        int64 int64_value = 2;
        double double_value = 3;
        float float_value = 4;
        string string_value = 5;
        bytes byte_value = 6;
    }
}

message OemParamStringArrayValue {
    option deprecated = true;
    repeated string value = 1;
}

message OemParamIntArrayValue {
    option deprecated = true;
    repeated int64 value = 1;
}

message OemParamMapValue {
    option deprecated = true;
    map<string, string> value = 1 [deprecated = true];
    map<string, SimpleValue> multi_type_value = 2;
}

message OemParamMapArrayValue {
    option deprecated = true;
    repeated OemParamMapValue value = 1;
}

// Tell the device to execute pending updates, possibly scoped by module
message ExecutePendingUpdatesRequest {

    enum UpdateScope {
        // Apply all available updates
        ANY = 0;
        // Update only specific module / app
        SELECTIVE = 1;
    }

    UpdateScope update_scope = 1;
    // Parameter only set when UpdateScope is SELECTIVE
    string module = 2;
}

// On-demand status update: The device will emit telemetry based on current device configuration
message OnDemandStatusUpdateRequest {
    // Today, all telemetry emission is pre-configured on the device, so there is no need to
    // inform the device which telemetry the cloud wishes to receive.

    TelemetrySet telemetry_set = 1 [deprecated = true];

    enum TelemetrySet {
        option deprecated = true;
        UNKNOWN = 0;
        ALL_CONFIGURED = 1;
        LOCATION_ONLY = 2;
    }
}