/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2020 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autonomic/ext/command/diagnostic/diagnostic.proto

package diagnostic

import (
	fmt "fmt"
	common "xk6-fabric/proto/autonomic/ext/common"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReportType int32

const (
	ReportType_UPLOAD_RESULT_TO_URL ReportType = 0
	ReportType_INCLUDE_IN_RESPONSE  ReportType = 1
)

var ReportType_name = map[int32]string{
	0: "UPLOAD_RESULT_TO_URL",
	1: "INCLUDE_IN_RESPONSE",
}

var ReportType_value = map[string]int32{
	"UPLOAD_RESULT_TO_URL": 0,
	"INCLUDE_IN_RESPONSE":  1,
}

func (x ReportType) String() string {
	return proto.EnumName(ReportType_name, int32(x))
}

func (ReportType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85b875cc75deabd9, []int{0}
}

// A request to put the device into a diagnostic mode and upload results
type DiagnosticRequest struct {
	// type of log to get
	LogType string `protobuf:"bytes,1,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	// path to upload the file to in the Byte Stream - this is required unless the report_type is ReportType.INCLUDE_IN_RESPONSE
	BytestreamUrl        string             `protobuf:"bytes,2,opt,name=bytestream_url,json=bytestreamUrl,proto3" json:"bytestream_url,omitempty"`
	LogOptions           *LogOptions        `protobuf:"bytes,3,opt,name=log_options,json=logOptions,proto3" json:"log_options,omitempty"`
	ReportType           ReportType         `protobuf:"varint,4,opt,name=report_type,json=reportType,proto3,enum=autonomic.ext.command.diagnostic.ReportType" json:"report_type,omitempty"`
	DiagnosticTrigger    *DiagnosticTrigger `protobuf:"bytes,5,opt,name=diagnostic_trigger,json=diagnosticTrigger,proto3" json:"diagnostic_trigger,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DiagnosticRequest) Reset()         { *m = DiagnosticRequest{} }
func (m *DiagnosticRequest) String() string { return proto.CompactTextString(m) }
func (*DiagnosticRequest) ProtoMessage()    {}
func (*DiagnosticRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b875cc75deabd9, []int{0}
}

func (m *DiagnosticRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiagnosticRequest.Unmarshal(m, b)
}
func (m *DiagnosticRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiagnosticRequest.Marshal(b, m, deterministic)
}
func (m *DiagnosticRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagnosticRequest.Merge(m, src)
}
func (m *DiagnosticRequest) XXX_Size() int {
	return xxx_messageInfo_DiagnosticRequest.Size(m)
}
func (m *DiagnosticRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagnosticRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiagnosticRequest proto.InternalMessageInfo

func (m *DiagnosticRequest) GetLogType() string {
	if m != nil {
		return m.LogType
	}
	return ""
}

func (m *DiagnosticRequest) GetBytestreamUrl() string {
	if m != nil {
		return m.BytestreamUrl
	}
	return ""
}

func (m *DiagnosticRequest) GetLogOptions() *LogOptions {
	if m != nil {
		return m.LogOptions
	}
	return nil
}

func (m *DiagnosticRequest) GetReportType() ReportType {
	if m != nil {
		return m.ReportType
	}
	return ReportType_UPLOAD_RESULT_TO_URL
}

func (m *DiagnosticRequest) GetDiagnosticTrigger() *DiagnosticTrigger {
	if m != nil {
		return m.DiagnosticTrigger
	}
	return nil
}

type LogOptions struct {
	// time until the first log is generated (unit is opaque to Au)
	InitialLogDelay *common.IntOptional `protobuf:"bytes,1,opt,name=initial_log_delay,json=initialLogDelay,proto3" json:"initial_log_delay,omitempty"`
	// time between log generation (unit is opaque to Au)
	LogInterval *common.IntOptional `protobuf:"bytes,2,opt,name=log_interval,json=logInterval,proto3" json:"log_interval,omitempty"`
	// time logs should be generated for (unit is opaque to Au)
	MaxDuration *common.IntOptional `protobuf:"bytes,3,opt,name=max_duration,json=maxDuration,proto3" json:"max_duration,omitempty"`
	// maximum number of logs to generate
	MaxLogCount          *common.IntOptional `protobuf:"bytes,4,opt,name=max_log_count,json=maxLogCount,proto3" json:"max_log_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LogOptions) Reset()         { *m = LogOptions{} }
func (m *LogOptions) String() string { return proto.CompactTextString(m) }
func (*LogOptions) ProtoMessage()    {}
func (*LogOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b875cc75deabd9, []int{1}
}

func (m *LogOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogOptions.Unmarshal(m, b)
}
func (m *LogOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogOptions.Marshal(b, m, deterministic)
}
func (m *LogOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogOptions.Merge(m, src)
}
func (m *LogOptions) XXX_Size() int {
	return xxx_messageInfo_LogOptions.Size(m)
}
func (m *LogOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_LogOptions.DiscardUnknown(m)
}

var xxx_messageInfo_LogOptions proto.InternalMessageInfo

func (m *LogOptions) GetInitialLogDelay() *common.IntOptional {
	if m != nil {
		return m.InitialLogDelay
	}
	return nil
}

func (m *LogOptions) GetLogInterval() *common.IntOptional {
	if m != nil {
		return m.LogInterval
	}
	return nil
}

func (m *LogOptions) GetMaxDuration() *common.IntOptional {
	if m != nil {
		return m.MaxDuration
	}
	return nil
}

func (m *LogOptions) GetMaxLogCount() *common.IntOptional {
	if m != nil {
		return m.MaxLogCount
	}
	return nil
}

type DiagnosticTrigger struct {
	TargetModuleId int32 `protobuf:"varint,1,opt,name=target_module_id,json=targetModuleId,proto3" json:"target_module_id,omitempty"`
	// diagnostic trigger condition
	TriggerCondition string `protobuf:"bytes,2,opt,name=trigger_condition,json=triggerCondition,proto3" json:"trigger_condition,omitempty"`
	//time before the diagnostic request expires - if unable to execute
	TriggerTimeout       *timestamp.Timestamp `protobuf:"bytes,3,opt,name=trigger_timeout,json=triggerTimeout,proto3" json:"trigger_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DiagnosticTrigger) Reset()         { *m = DiagnosticTrigger{} }
func (m *DiagnosticTrigger) String() string { return proto.CompactTextString(m) }
func (*DiagnosticTrigger) ProtoMessage()    {}
func (*DiagnosticTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b875cc75deabd9, []int{2}
}

func (m *DiagnosticTrigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiagnosticTrigger.Unmarshal(m, b)
}
func (m *DiagnosticTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiagnosticTrigger.Marshal(b, m, deterministic)
}
func (m *DiagnosticTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagnosticTrigger.Merge(m, src)
}
func (m *DiagnosticTrigger) XXX_Size() int {
	return xxx_messageInfo_DiagnosticTrigger.Size(m)
}
func (m *DiagnosticTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagnosticTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_DiagnosticTrigger proto.InternalMessageInfo

func (m *DiagnosticTrigger) GetTargetModuleId() int32 {
	if m != nil {
		return m.TargetModuleId
	}
	return 0
}

func (m *DiagnosticTrigger) GetTriggerCondition() string {
	if m != nil {
		return m.TriggerCondition
	}
	return ""
}

func (m *DiagnosticTrigger) GetTriggerTimeout() *timestamp.Timestamp {
	if m != nil {
		return m.TriggerTimeout
	}
	return nil
}

func init() {
	proto.RegisterEnum("autonomic.ext.command.diagnostic.ReportType", ReportType_name, ReportType_value)
	proto.RegisterType((*DiagnosticRequest)(nil), "autonomic.ext.command.diagnostic.DiagnosticRequest")
	proto.RegisterType((*LogOptions)(nil), "autonomic.ext.command.diagnostic.LogOptions")
	proto.RegisterType((*DiagnosticTrigger)(nil), "autonomic.ext.command.diagnostic.DiagnosticTrigger")
}

func init() {
	proto.RegisterFile("autonomic/ext/command/diagnostic/diagnostic.proto", fileDescriptor_85b875cc75deabd9)
}

var fileDescriptor_85b875cc75deabd9 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x49, 0xc7, 0xf8, 0xf0, 0x58, 0xd7, 0x1a, 0x24, 0xca, 0x6e, 0xa8, 0x06, 0x48, 0x15,
	0xb0, 0x44, 0x6c, 0x0f, 0x80, 0xb6, 0xb6, 0x17, 0x15, 0x59, 0x5b, 0x65, 0x89, 0x90, 0xb8, 0xb1,
	0xdc, 0xc4, 0x18, 0x4b, 0x89, 0x1d, 0x9c, 0x13, 0xd4, 0x3e, 0x0b, 0x77, 0xbc, 0x00, 0xef, 0xc1,
	0x0b, 0xf0, 0x2a, 0x5c, 0x22, 0xc7, 0x69, 0x33, 0x01, 0x52, 0xe9, 0x9d, 0x73, 0x7c, 0xfe, 0xbf,
	0x9c, 0x4f, 0xa3, 0x37, 0xb4, 0x04, 0x25, 0x55, 0x26, 0x62, 0x8f, 0x2d, 0xc1, 0x8b, 0x55, 0x96,
	0x51, 0x99, 0x78, 0x89, 0xa0, 0x5c, 0xaa, 0x02, 0x44, 0x7c, 0xe3, 0xe8, 0xe6, 0x5a, 0x81, 0xc2,
	0xfd, 0x8d, 0xc4, 0x65, 0x4b, 0x70, 0x6b, 0x89, 0xdb, 0xf8, 0x1d, 0x3f, 0xfb, 0x1b, 0xaa, 0xa4,
	0xa7, 0x72, 0x10, 0x4a, 0xd2, 0xd4, 0x62, 0x8e, 0x9f, 0x72, 0xa5, 0x78, 0xca, 0xbc, 0xea, 0x6b,
	0x51, 0x7e, 0xf4, 0x40, 0x64, 0xac, 0x00, 0x9a, 0xe5, 0xd6, 0xe1, 0xe4, 0x67, 0x0b, 0x75, 0x47,
	0x1b, 0x68, 0xc0, 0x3e, 0x97, 0xac, 0x00, 0xfc, 0x04, 0xdd, 0x4b, 0x15, 0x27, 0xb0, 0xca, 0x59,
	0xcf, 0xe9, 0x3b, 0x83, 0xfb, 0xc1, 0xdd, 0x54, 0xf1, 0x70, 0x95, 0x33, 0xfc, 0x02, 0xb5, 0x17,
	0x2b, 0x60, 0x05, 0x68, 0x46, 0x33, 0x52, 0xea, 0xb4, 0xd7, 0xaa, 0x1c, 0x0e, 0x1b, 0x6b, 0xa4,
	0x53, 0x7c, 0x85, 0x0e, 0x0c, 0xc1, 0x86, 0x53, 0xf4, 0xf6, 0xfa, 0xce, 0xe0, 0xe0, 0xec, 0xb5,
	0xbb, 0x2d, 0x2b, 0xd7, 0x57, 0x7c, 0x66, 0x35, 0x01, 0x4a, 0x37, 0x67, 0x83, 0xd3, 0x2c, 0x57,
	0x1a, 0x6c, 0x4c, 0xb7, 0xfb, 0xce, 0xa0, 0xfd, 0x3f, 0xb8, 0xa0, 0x12, 0x99, 0xc0, 0x03, 0xa4,
	0x37, 0x67, 0xbc, 0x40, 0xb8, 0x71, 0x22, 0xa0, 0x05, 0xe7, 0x4c, 0xf7, 0xf6, 0xab, 0x20, 0xcf,
	0xb7, 0x53, 0x9b, 0x82, 0x85, 0x56, 0x1a, 0x74, 0x93, 0x3f, 0x4d, 0x27, 0x3f, 0x5a, 0x08, 0x35,
	0xd9, 0xe0, 0x10, 0x75, 0x85, 0x14, 0x20, 0x68, 0x4a, 0x4c, 0x61, 0x12, 0x96, 0xd2, 0x55, 0x55,
	0xdb, 0x83, 0xb3, 0xc1, 0x3f, 0xfe, 0xa8, 0xa4, 0xcb, 0x24, 0x08, 0x58, 0xb9, 0x13, 0x09, 0xb3,
	0xba, 0xa9, 0xc1, 0x51, 0x8d, 0xf0, 0x15, 0x1f, 0x19, 0x00, 0x7e, 0x87, 0x1e, 0x18, 0x9a, 0x90,
	0xc0, 0xf4, 0x17, 0x6a, 0x7b, 0xb1, 0x0b, 0xd0, 0x34, 0x69, 0x52, 0x8b, 0x0d, 0x2c, 0xa3, 0x4b,
	0x92, 0x94, 0x9a, 0x9a, 0xeb, 0xba, 0x69, 0x3b, 0xc0, 0x32, 0xba, 0x1c, 0xd5, 0x62, 0xec, 0xa3,
	0x43, 0x03, 0x33, 0xd1, 0xc5, 0xaa, 0x94, 0x50, 0xf5, 0x6c, 0x57, 0x9a, 0xaf, 0xf8, 0xd0, 0x88,
	0x4f, 0xbe, 0x3b, 0x37, 0xc7, 0xb4, 0x2e, 0x31, 0x1e, 0xa0, 0x0e, 0x50, 0xcd, 0x19, 0x90, 0x4c,
	0x25, 0x65, 0xca, 0x88, 0x48, 0xaa, 0x92, 0xee, 0x07, 0x6d, 0x6b, 0xbf, 0xaa, 0xcc, 0x93, 0x04,
	0xbf, 0x42, 0xdd, 0xba, 0xcb, 0x24, 0x56, 0x32, 0x11, 0x55, 0x7e, 0x76, 0x70, 0x3b, 0xf5, 0xc5,
	0x70, 0x6d, 0xc7, 0x43, 0x74, 0xb4, 0x76, 0x36, 0xeb, 0xa2, 0x4a, 0xa8, 0x4b, 0x71, 0xec, 0xda,
	0x75, 0x72, 0xd7, 0xeb, 0xe4, 0x86, 0xeb, 0x75, 0x0a, 0xda, 0xb5, 0x24, 0xb4, 0x8a, 0x97, 0x6f,
	0x11, 0x6a, 0x86, 0x0f, 0xf7, 0xd0, 0xa3, 0x68, 0xee, 0xcf, 0x2e, 0x46, 0x24, 0x18, 0x5f, 0x47,
	0x7e, 0x48, 0xc2, 0x19, 0x89, 0x02, 0xbf, 0x73, 0x0b, 0x3f, 0x46, 0x0f, 0x27, 0xd3, 0xa1, 0x1f,
	0x8d, 0xc6, 0x64, 0x32, 0x35, 0xb7, 0xf3, 0xd9, 0xf4, 0x7a, 0xdc, 0x71, 0x2e, 0xbf, 0x3a, 0xe8,
	0x79, 0xac, 0xb2, 0xad, 0xd3, 0x78, 0x79, 0xd4, 0x14, 0x66, 0x6e, 0xe2, 0x9a, 0x3b, 0x1f, 0xde,
	0x73, 0x01, 0x9f, 0xca, 0x85, 0xf1, 0xf6, 0x36, 0xfa, 0x53, 0x2a, 0xcc, 0x4b, 0xc1, 0xb4, 0xa4,
	0xe9, 0x69, 0x95, 0x41, 0xe1, 0x15, 0x3a, 0xf6, 0x32, 0x2a, 0xa4, 0x7d, 0x20, 0xbc, 0x6d, 0xef,
	0xd4, 0x2f, 0xc7, 0xf9, 0xd6, 0xda, 0xbb, 0x88, 0xc2, 0xc5, 0x9d, 0x4a, 0x70, 0xfe, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x73, 0x81, 0x9b, 0x5d, 0xdb, 0x04, 0x00, 0x00,
}
