/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2017 - 2019 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 * 
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 * 
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
syntax = "proto3";

package autonomic.ext.command.errors;

option go_package = "xk6-fabric/proto/autonomic/ext/command/errors";
option java_package = "com.autonomic.ext.command.errors";
option java_outer_classname = "CommandPreconditionErrorProto";
option java_multiple_files = true;
option cc_enable_arenas = true;
option objc_class_prefix = "AUT";

// Note: this file is imported directly by the parent file command_error_data.proto.
//

message SoftwareStateViolation {

    oneof type {
        SequentialExecutionViolation sequential_execution_violation = 1;
        RemoteControlViolation remote_control_violation = 2;
        AuthenticationFailure authentication_failure = 3;
        ExecutionSequenceFailure execution_sequence_failure = 4;
    }
}

// The number of times a command may be executed sequentially within a period of time was exhausted
// (e.g. You may refresh a remote vehicle start N number of times before a manual start is required)
message SequentialExecutionViolation {

    // delay until this command may be executed again
    int32 reset_delay = 1;

    // the maximum number of times this command is allowed to be executed sequentially before
    // some other action must occur
    int32 maximum_execution_count = 2;
}

message RemoteControlViolation {

    enum RemoteControlViolationType {
        UNKNOWN_REMOTE_CONTROL_VIOLATION_TYPE = 0;
        // This device or vehicle is not in a state where remote commands are allowed
        VEHICLE_REMOTE_CONTROL_DISABLED = 1;
    }

    RemoteControlViolationType remote_control_violation = 1;
}

message AuthenticationFailure {

    enum AuthenticationFailureType {
        UNKNOWN_AUTHENTICATION_FAILURE = 0;
        // Token is invalid or missing
        INVALID_TOKEN = 1;
        // Token is expired
        TOKEN_EXPIRED = 2;
        // Valid token, but no permission to execute command
        NOT_AUTHORIZED = 3;
    }

    AuthenticationFailureType auth_failure_type = 1;
}

message ExecutionSequenceFailure {

    enum ExecutionSequenceFailureType {
        UNKNOWN_EXECUTION_SEQUENCE_FAILURE = 0;
        // Command issued was in already progress
        COMMAND_IN_PROGRESS = 1;
        // Command was issued out of sequence
        COMMAND_OUT_OF_SEQUENCE = 2;
    }

    ExecutionSequenceFailureType execution_sequence_failure_type = 1;
}
