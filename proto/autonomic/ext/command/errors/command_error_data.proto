/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2017 - 2019 Autonomic, LLC - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 * 
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 * 
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
syntax = "proto3";

package autonomic.ext.command.errors;

import "autonomic/ext/command/errors/hardware_precondition.proto";
import "autonomic/ext/command/errors/software_precondition.proto";
import "autonomic/ext/command/errors/command_execution.proto";
import "autonomic/ext/event/state/command_preclusion_state.proto";

option go_package = "xk6-fabric/proto/autonomic/ext/command/errors";
option java_package = "com.autonomic.ext.command.errors";
option java_outer_classname = "WellKnownCommandErrorProto";
option java_multiple_files = true;
option cc_enable_arenas = true;
option objc_class_prefix = "AUT";

message CommandFailureContext {

    // All context relevant to a command failure prior to delivery.
    message FailedBeforeDeliveryContext {
        enum FailureType {
            // Functionally equivelant to unset.  The cloud will never deliberately set this value.
            UNKNOWN_FAILURE_TYPE = 0;

            // The command failed because the TMC brokering services could not validate the command
            // request payload or parameters.
            INVALID_COMMAND_PAYLOAD_FAILURE = 1;

            // The TMC encountered an internal error when attempting to deliver this command.
            INTERNAL_TMC_ERROR = 2;

            // The TMC could not complete the delivery of this command because one or more
            // preconditions related to the state of this device on the platform were not met.
            PRECONDITION_FAILURE = 3;

            // The TMC could not complete the delivery of this command because it was unable to
            // to translate the command into an appropriate, OEM device specific representation.
            OEM_CLOUD_TRANSLATION_FAILURE = 4;

            // The OEM cloud returned an error when the TMC attempted to forward this command,
            // thus preventing it from being delivered.
            OEM_CLOUD_DELIVERY_FAILURE = 5;

            // The TMC or the OEM cloud failed to deliver this command to the device due to a
            // connection error between the cloud and the device.
            DEVICE_DELIVERY_FAILURE = 6;
        }

        FailureType failure_type = 1;
    }

    // All context relevant to a command failure due to the consumption of a failure response from
    // the device
    message FailedAfterDeliveryContext {
        enum FailureType {
            // Functionally equivelant to unset.  The cloud will never deliberately set this value.
            UNKNOWN_FAILURE_TYPE = 0;

            // The device indicated that it was unable to validate the command payload.
            DEVICE_VALIDATION_FAILURE = 1;

            // The device indicated that it attempted to execute the command, but failed.
            DEVICE_EXECUTION_FAILURE = 2;

            // The device executed the command and responded to the cloud, but the cloud was unable
            // to properly digest the response from the device.
            INVALID_DEVICE_RESPONSE_FAILURE = 3;
        }

        FailureType failure_type = 1;
    }

    // All context relevant to a command failure due to device preclusion.
    message DevicePrecludedFailureContext {
        autonomic.ext.event.state.commandpreclusionstate.CommandPreclusionData command_preclusion_causes = 1;
    }

    oneof context {
        FailedBeforeDeliveryContext failed_before_delivery_context = 2;
        FailedAfterDeliveryContext failed_after_delivery_context = 3;
        DevicePrecludedFailureContext device_precluded_failure_context = 4;
    }
}

message CommandExpirationContext {
    // All context relevant to a command expiration that occurred prior to delivery
    message ExpirationBeforeDeliveryContext {
        enum ExpirationType {
            reserved 2;
            reserved "DEVICE_PRECLUDED";

            // Functionally equivelant to unset.  The cloud will never deliberately set this value.
            UNKNOWN_EXPIRATION_TYPE = 0;

            // The command expired while queued because the device never connected to the cloud.
            DEVICE_NEVER_CONNECTED = 1;

            // The command was never delivered because there was already one or more commands in
            // progress for this device, and the device's maximum command concurrency limit was
            // reached.
            PRIOR_COMMANDS_IN_PROGRESS = 3;

            // The command expired due to a timeout that occurred when the TMC attempted to forward
            // the command to the OEM cloud.
            OEM_CLOUD_DELIVERY_TIMEOUT = 4;

            // The command otherwise expired during the command delivery process. Command
            // expirations of this type may be due to reasons that are beyond the TMC's control,
            // such as a device not connecting to the cloud until a command is close to expiration.
            EXPIRED_DURING_DELIVERY = 5;
        }

        ExpirationType expiration_type = 1;
    }

    // All context relevant to a command expiration that occurred after delivery
    message ExpirationAfterDeliveryContext {
        enum ExpirationType {
            // Functionally equivelant to unset.  The cloud will never deliberately set this value.
            UNKNOWN_EXPIRATION_TYPE = 0;

            // The cloud did not consume a valid and understandable response from the device for
            // this command prior to it's expiration, as specified by the initial request to the
            // cloud.
            DEVICE_NEVER_RESPONDED = 1;
        }

        ExpirationType expiration_type = 1;
    }

    // All context relevant to a command failure due to device preclusion.
    message DevicePrecludedExpirationContext {
        autonomic.ext.event.state.commandpreclusionstate.CommandPreclusionData command_preclusion_causes = 1;
    }

    oneof context {
        ExpirationBeforeDeliveryContext expiration_before_delivery_context = 1;
        ExpirationAfterDeliveryContext expiration_after_delivery_context = 2;
        DevicePrecludedExpirationContext device_precluded_expiration_context = 3;
    }
}

// The CommandErrorData message contains all information needed to convey why a command failed.
message CommandErrorData {

    oneof type {
        // A device precondition failure due to the state of one or more on-device or in-vehicle
        // components which prevented a command from being executed.
        ComponentPreconditionViolation component_precondition_violation = 1;

        // A failure occurred on the device during command execution.
        CommandExecutionFailure command_execution_failure = 3;
    }

    // Context that describes different command failure modes, as well as data relevant to those
    //  failure modes.
    oneof state_transition_context {
        CommandFailureContext command_failure_context = 4;
        CommandExpirationContext command_expiration_context = 5;
    }
}

// A component precondition violation expresses all of the precondition violations which precluded
// a command from being executed on a vehicle or device.
message ComponentPreconditionViolation {

    // One or more hardware component states which represent a violating set of preconditions which
    // precluded the command from being executed.
    repeated HardwareStateViolation hardware_state_violations = 1;

    // One or more software component states which represent a violating set of preconditions which
    // precluded the command from being executed.
    repeated SoftwareStateViolation software_state_violations = 2;
}
