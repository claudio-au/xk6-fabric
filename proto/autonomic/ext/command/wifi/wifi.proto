/*-
 * ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 * Autonomic Proprietary 1.0
 * ——————————————————————————————————————————————————————————————————————————————
 * Copyright (C) 2017 - 2018 Autonomic Incorporated - All rights reserved
 * ——————————————————————————————————————————————————————————————————————————————
 * Proprietary and confidential.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Autonomic, LLC and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Autonomic, LLC and its suppliers
 * and may be covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Autonomic, LLC.
 *
 * Unauthorized copy of this file, via any medium is strictly prohibited.
 * ______________________________________________________________________________
 */
syntax = "proto3";

package autonomic.ext.command.wifi;

option go_package = "xk6-fabric/proto/autonomic/ext/command/wifi";
option java_package = "com.autonomic.ext.command.wifi";
option java_outer_classname = "WifiProto";
option java_multiple_files = true;
option cc_enable_arenas = true;
option objc_class_prefix = "AUT";

// Enum representing the enable / disable state of Wireless Access Point
enum AccessPointState {
  UNKNOWN_ACCESS_POINT_STATE = 0;  // No change requested
  AP_ENABLED = 1;                  // Request to enable
  AP_DISABLED = 2;                 // Request to disable
}


message AccessPointSettings {
  // wifi ssid
  bytes ssid = 1;
  // wifi password
  bytes password = 2;

  // Whether or not to broadcast the SSID. Some devices may not support toggling this value.
  // Those devices should:
  // 1) ignore this field when it is sent as a WifiConfigureResponse
  // 2) set this value to the non-configurable behavior of the device, when sending
  //    AccessPointSettings as part of telemetry. see: test/java/com/autonomic/ext/event/state/WifiCommandStateExamples.java
  bool broadcast = 3;

  // wifi security protocol
  enum WifiSecurityProtocol {
    UKNOWN_SECURITY_PROTOCOL = 0;
    WPA2 = 1;
    NONE = 2;
    WPA2_WPA3 = 3;
    WPA3 = 4;
  }

  WifiSecurityProtocol wifi_security_protocol = 4;

  // wifi frequency
  enum WifiFrequency {
    UNKNOWN_WIFI_FREQUENCY = 0;
    GHZ_2_4 = 1; // 2.4GHz
    GHZ_5_0 = 2; // 5 GHz
  }

  WifiFrequency wifi_frequency = 5;
}

// A request to update wifi AP settings, which may also change the AP state (enable disable)
message WifiConfigRequest {

  AccessPointSettings ap_settings = 1; // if has_ap_settings() returns true, update AP setttings on device
  // Configure the AP state (enable / disable)
  AccessPointState ap_state = 2;
}

// Request to receive the various wifi access point settings. AcccessPointSettings should be sent
// as part of normal telemetry. see: test/java/com/autonomic/ext/event/state/WifiCommandStateExamples.java
message WifiStatusRequest {
}

// The response of WifiStatus command, needs to be populated by device at StateTransitionData when transitioned to success
message WifiStatusSettings {
  AccessPointSettings ap_settings = 1;
  AccessPointState ap_state = 2;
}
